// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=exe, use-js-string=true, version=5.4.0+git-2b429e5
(function
  (Object){
   typeof globalThis !== "object"
   &&
    (this
      ? get()
      : (Object.defineProperty
         (Object.prototype, "_T_", {configurable: true, get: get}),
        _T_));
   function get(){
    var global = this || self;
    global.globalThis = global;
    delete Object.prototype._T_;
   }
  }
  (Object));
(function(globalThis){
   "use strict";
   function caml_array_blit(a1, i1, a2, i2, len){
    if(i2 <= i1)
     for(var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];
    else
     for(var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];
    return 0;
   }
   function caml_array_concat(l){
    var a = [0];
    while(l !== 0){
     var b = l[1];
     for(var i = 1; i < b.length; i++) a.push(b[i]);
     l = l[2];
    }
    return a;
   }
   function jsoo_sys_getenv(n){
    var process = globalThis.process;
    if(process && process.env && process.env[n] != undefined)
     return process.env[n];
    if(globalThis.jsoo_static_env && globalThis.jsoo_static_env[n])
     return globalThis.jsoo_static_env[n];
   }
   var caml_record_backtrace_flag = 0;
   (function(){
      var r = jsoo_sys_getenv("OCAMLRUNPARAM");
      if(r !== undefined){
       var l = r.split(",");
       for(var i = 0; i < l.length; i++)
        if(l[i] == "b"){
         caml_record_backtrace_flag = 1;
         break;
        }
        else if(l[i].startsWith("b="))
         caml_record_backtrace_flag = + l[i].slice(2);
        else
         continue;
      }
     }
     ());
   var caml_global_data = [0];
   function caml_exn_with_js_backtrace(exn, force){
    if(! exn.js_error || force || exn[0] == 248)
     exn.js_error = new globalThis.Error("Js exception containing backtrace");
    return exn;
   }
   function caml_maybe_attach_backtrace(exn, force){
    return caml_record_backtrace_flag
            ? caml_exn_with_js_backtrace(exn, force)
            : exn;
   }
   function caml_raise_with_arg(tag, arg){
    throw caml_maybe_attach_backtrace([0, tag, arg]);
   }
   function caml_string_of_jsbytes(x){return x;}
   function caml_raise_with_string(tag, msg){
    caml_raise_with_arg(tag, caml_string_of_jsbytes(msg));
   }
   function caml_invalid_argument(msg){
    caml_raise_with_string(caml_global_data.Invalid_argument, msg);
   }
   function caml_array_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_array_set(array, index, newval){
    if(index < 0 || index >= array.length - 1) caml_array_bound_error();
    array[index + 1] = newval;
    return 0;
   }
   function caml_array_sub(a, i, len){
    var a2 = new Array(len + 1);
    a2[0] = 0;
    for(var i2 = 1, i1 = i + 1; i2 <= len; i2++, i1++) a2[i2] = a[i1];
    return a2;
   }
   function caml_atomic_cas(ref, o, n){
    if(ref[1] === o){ref[1] = n; return 1;}
    return 0;
   }
   function caml_atomic_fetch_add(ref, i){
    var old = ref[1];
    ref[1] += i;
    return old;
   }
   function caml_atomic_load(ref){return ref[1];}
   function caml_ba_get_size_per_element(kind){
    switch(kind){case 7:case 10:case 11: return 2;default: return 1;
    }
   }
   function caml_ba_create_buffer(kind, size){
    var view;
    switch(kind){
      case 0:
       view = Float32Array; break;
      case 1:
       view = Float64Array; break;
      case 2:
       view = Int8Array; break;
      case 3:
       view = Uint8Array; break;
      case 4:
       view = Int16Array; break;
      case 5:
       view = Uint16Array; break;
      case 6:
       view = Int32Array; break;
      case 7:
       view = Int32Array; break;
      case 8:
       view = Int32Array; break;
      case 9:
       view = Int32Array; break;
      case 10:
       view = Float32Array; break;
      case 11:
       view = Float64Array; break;
      case 12:
       view = Uint8Array; break;
    }
    if(! view) caml_invalid_argument("Bigarray.create: unsupported kind");
    var data = new view(size * caml_ba_get_size_per_element(kind));
    return data;
   }
   function caml_ba_get_size(dims){
    var n_dims = dims.length, size = 1;
    for(var i = 0; i < n_dims; i++){
     if(dims[i] < 0)
      caml_invalid_argument("Bigarray.create: negative dimension");
     size = size * dims[i];
    }
    return size;
   }
   var caml_int64_offset = Math.pow(2, - 24);
   function caml_raise_constant(tag){throw tag;}
   function caml_raise_zero_divide(){
    caml_raise_constant(caml_global_data.Division_by_zero);
   }
   function MlInt64(lo, mi, hi){
    this.lo = lo & 0xffffff;
    this.mi = mi & 0xffffff;
    this.hi = hi & 0xffff;
   }
   MlInt64.prototype.caml_custom = "_j";
   MlInt64.prototype.copy =
    function(){return new MlInt64(this.lo, this.mi, this.hi);};
   MlInt64.prototype.ucompare =
    function(x){
     if(this.hi > x.hi) return 1;
     if(this.hi < x.hi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.compare =
    function(x){
     var hi = this.hi << 16, xhi = x.hi << 16;
     if(hi > xhi) return 1;
     if(hi < xhi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.neg =
    function(){
     var
      lo = - this.lo,
      mi = - this.mi + (lo >> 24),
      hi = - this.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.add =
    function(x){
     var
      lo = this.lo + x.lo,
      mi = this.mi + x.mi + (lo >> 24),
      hi = this.hi + x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.sub =
    function(x){
     var
      lo = this.lo - x.lo,
      mi = this.mi - x.mi + (lo >> 24),
      hi = this.hi - x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.mul =
    function(x){
     var
      lo = this.lo * x.lo,
      mi = (lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
      hi =
        (mi * caml_int64_offset | 0) + this.hi * x.lo + this.mi * x.mi
        + this.lo * x.hi;
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.isZero =
    function(){return (this.lo | this.mi | this.hi) == 0;};
   MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0;};
   MlInt64.prototype.and =
    function(x){
     return new MlInt64(this.lo & x.lo, this.mi & x.mi, this.hi & x.hi);
    };
   MlInt64.prototype.or =
    function(x){
     return new MlInt64(this.lo | x.lo, this.mi | x.mi, this.hi | x.hi);
    };
   MlInt64.prototype.xor =
    function(x){
     return new MlInt64(this.lo ^ x.lo, this.mi ^ x.mi, this.hi ^ x.hi);
    };
   MlInt64.prototype.shift_left =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo << s,
               this.mi << s | this.lo >> 24 - s,
               this.hi << s | this.mi >> 24 - s);
     if(s < 48)
      return new
              MlInt64
              (0, this.lo << s - 24, this.mi << s - 24 | this.lo >> 48 - s);
     return new MlInt64(0, 0, this.lo << s - 48);
    };
   MlInt64.prototype.shift_right_unsigned =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | this.hi << 24 - s,
               this.hi >> s);
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s, this.hi >> s - 24, 0);
     return new MlInt64(this.hi >> s - 48, 0, 0);
    };
   MlInt64.prototype.shift_right =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     var h = this.hi << 16 >> 16;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | h << 24 - s,
               this.hi << 16 >> s >>> 16);
     var sign = this.hi << 16 >> 31;
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s,
               this.hi << 16 >> s - 24 >> 16,
               sign & 0xffff);
     return new MlInt64(this.hi << 16 >> s - 32, sign, sign);
    };
   MlInt64.prototype.lsl1 =
    function(){
     this.hi = this.hi << 1 | this.mi >> 23;
     this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
     this.lo = this.lo << 1 & 0xffffff;
    };
   MlInt64.prototype.lsr1 =
    function(){
     this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
     this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
     this.hi = this.hi >>> 1;
    };
   MlInt64.prototype.udivmod =
    function(x){
     var
      offset = 0,
      modulus = this.copy(),
      divisor = x.copy(),
      quotient = new MlInt64(0, 0, 0);
     while(modulus.ucompare(divisor) > 0){offset++; divisor.lsl1();}
     while(offset >= 0){
      offset--;
      quotient.lsl1();
      if(modulus.ucompare(divisor) >= 0){
       quotient.lo++;
       modulus = modulus.sub(divisor);
      }
      divisor.lsr1();
     }
     return {quotient: quotient, modulus: modulus};
    };
   MlInt64.prototype.div =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi ^ y.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var q = x.udivmod(y).quotient;
     if(sign & 0x8000) q = q.neg();
     return q;
    };
   MlInt64.prototype.mod =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var r = x.udivmod(y).modulus;
     if(sign & 0x8000) r = r.neg();
     return r;
    };
   MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24;};
   MlInt64.prototype.toFloat =
    function(){
     return (this.hi << 16) * Math.pow(2, 32) + this.mi * Math.pow(2, 24)
            + this.lo;
    };
   MlInt64.prototype.toArray =
    function(){
     return [this.hi >> 8,
             this.hi & 0xff,
             this.mi >> 16,
             this.mi >> 8 & 0xff,
             this.mi & 0xff,
             this.lo >> 16,
             this.lo >> 8 & 0xff,
             this.lo & 0xff];
    };
   MlInt64.prototype.lo32 =
    function(){return this.lo | (this.mi & 0xff) << 24;};
   MlInt64.prototype.hi32 =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16;};
   function caml_int64_create_lo_hi(lo, hi){
    return new
            MlInt64
            (lo & 0xffffff,
             lo >>> 24 & 0xff | (hi & 0xffff) << 8,
             hi >>> 16 & 0xffff);
   }
   function caml_int64_hi32(v){return v.hi32();}
   function caml_int64_lo32(v){return v.lo32();}
   var caml_ba_custom_name = "_bigarr02";
   function Ml_Bigarray(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
   Ml_Bigarray.prototype.offset =
    function(arg){
     var ofs = 0;
     if(typeof arg === "number") arg = [arg];
     if(! (arg instanceof Array))
      caml_invalid_argument("bigarray.js: invalid offset");
     if(this.dims.length != arg.length)
      caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
     if(this.layout == 0)
      for(var i = 0; i < this.dims.length; i++){
       if(arg[i] < 0 || arg[i] >= this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + arg[i];
      }
     else
      for(var i = this.dims.length - 1; i >= 0; i--){
       if(arg[i] < 1 || arg[i] > this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + (arg[i] - 1);
      }
     return ofs;
    };
   Ml_Bigarray.prototype.get =
    function(ofs){
     switch(this.kind){
       case 7:
        var l = this.data[ofs * 2 + 0], h = this.data[ofs * 2 + 1];
        return caml_int64_create_lo_hi(l, h);
       case 10:
       case 11:
        var r = this.data[ofs * 2 + 0], i = this.data[ofs * 2 + 1];
        return [254, r, i];
       default: return this.data[ofs];
     }
    };
   Ml_Bigarray.prototype.set =
    function(ofs, v){
     switch(this.kind){
       case 7:
        this.data[ofs * 2 + 0] = caml_int64_lo32(v);
        this.data[ofs * 2 + 1] = caml_int64_hi32(v);
        break;
       case 10:
       case 11:
        this.data[ofs * 2 + 0] = v[1]; this.data[ofs * 2 + 1] = v[2]; break;
       default: this.data[ofs] = v; break;
     }
     return 0;
    };
   Ml_Bigarray.prototype.fill =
    function(v){
     switch(this.kind){
       case 7:
        var a = caml_int64_lo32(v), b = caml_int64_hi32(v);
        if(a == b)
         this.data.fill(a);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? a : b;
        break;
       case 10:
       case 11:
        var im = v[1], re = v[2];
        if(im == re)
         this.data.fill(im);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? im : re;
        break;
       default: this.data.fill(v); break;
     }
    };
   Ml_Bigarray.prototype.compare =
    function(b, total){
     if(this.layout != b.layout || this.kind != b.kind){
      var k1 = this.kind | this.layout << 8, k2 = b.kind | b.layout << 8;
      return k2 - k1;
     }
     if(this.dims.length != b.dims.length)
      return b.dims.length - this.dims.length;
     for(var i = 0; i < this.dims.length; i++)
      if(this.dims[i] != b.dims[i]) return this.dims[i] < b.dims[i] ? - 1 : 1;
     switch(this.kind){
       case 0:
       case 1:
       case 10:
       case 11:
        var x, y;
        for(var i = 0; i < this.data.length; i++){
         x = this.data[i];
         y = b.data[i];
         if(x < y) return - 1;
         if(x > y) return 1;
         if(x != y){
          if(! total) return NaN;
          if(x == x) return 1;
          if(y == y) return - 1;
         }
        }
        break;
       case 7:
        for(var i = 0; i < this.data.length; i += 2){
         if(this.data[i + 1] < b.data[i + 1]) return - 1;
         if(this.data[i + 1] > b.data[i + 1]) return 1;
         if(this.data[i] >>> 0 < b.data[i] >>> 0) return - 1;
         if(this.data[i] >>> 0 > b.data[i] >>> 0) return 1;
        }
        break;
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 8:
       case 9:
       case 12:
        for(var i = 0; i < this.data.length; i++){
         if(this.data[i] < b.data[i]) return - 1;
         if(this.data[i] > b.data[i]) return 1;
        }
        break;
     }
     return 0;
    };
   function Ml_Bigarray_c_1_1(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
   Ml_Bigarray_c_1_1.prototype.offset =
    function(arg){
     if(typeof arg !== "number")
      if(arg instanceof Array && arg.length == 1)
       arg = arg[0];
      else
       caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
     if(arg < 0 || arg >= this.dims[0]) caml_array_bound_error();
     return arg;
    };
   Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs];};
   Ml_Bigarray_c_1_1.prototype.set =
    function(ofs, v){this.data[ofs] = v; return 0;};
   Ml_Bigarray_c_1_1.prototype.fill =
    function(v){this.data.fill(v); return 0;};
   function caml_ba_create_unsafe(kind, layout, dims, data){
    var size_per_element = caml_ba_get_size_per_element(kind);
    if(caml_ba_get_size(dims) * size_per_element != data.length)
     caml_invalid_argument("length doesn't match dims");
    if(layout == 0 && dims.length == 1 && size_per_element == 1)
     return new Ml_Bigarray_c_1_1(kind, layout, dims, data);
    return new Ml_Bigarray(kind, layout, dims, data);
   }
   function caml_js_from_array(a){return a.slice(1);}
   function caml_ba_create(kind, layout, dims_ml){
    var
     dims = caml_js_from_array(dims_ml),
     data = caml_ba_create_buffer(kind, caml_ba_get_size(dims));
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function caml_ba_set_1(ba, i0, v){ba.set(ba.offset(i0), v); return 0;}
   function caml_subarray_to_jsbytes(a, i, len){
    var f = String.fromCharCode;
    if(i == 0 && len <= 4096 && len == a.length) return f.apply(null, a);
    var s = "";
    for(; 0 < len; i += 1024, len -= 1024)
     s += f.apply(null, a.slice(i, i + Math.min(len, 1024)));
    return s;
   }
   function caml_convert_bytes_to_array(s){
    var a = new Uint8Array(s.l), b = s.c, l = b.length, i = 0;
    for(; i < l; i++) a[i] = b.charCodeAt(i);
    for(l = s.l; i < l; i++) a[i] = 0;
    s.c = a;
    s.t = 4;
    return a;
   }
   function caml_blit_bytes(s1, i1, s2, i2, len){
    if(len == 0) return 0;
    if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length)){
     s2.c =
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else if(s2.t == 2 && i2 == s2.c.length){
     s2.c +=
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else{
     if(s2.t != 4) caml_convert_bytes_to_array(s2);
     var c1 = s1.c, c2 = s2.c;
     if(s1.t == 4)
      if(i2 <= i1)
       for(var i = 0; i < len; i++) c2[i2 + i] = c1[i1 + i];
      else
       for(var i = len - 1; i >= 0; i--) c2[i2 + i] = c1[i1 + i];
     else{
      var l = Math.min(len, c1.length - i1);
      for(var i = 0; i < l; i++) c2[i2 + i] = c1.charCodeAt(i1 + i);
      for(; i < len; i++) c2[i2 + i] = 0;
     }
    }
    return 0;
   }
   function caml_str_repeat(n, s){
    if(n == 0) return "";
    if(s.repeat) return s.repeat(n);
    var r = "", l = 0;
    for(;;){
     if(n & 1) r += s;
     n >>= 1;
     if(n == 0) return r;
     s += s;
     l++;
     if(l == 9) s.slice(0, 1);
    }
   }
   function caml_convert_string_to_bytes(s){
    if(s.t == 2)
     s.c += caml_str_repeat(s.l - s.c.length, "\0");
    else
     s.c = caml_subarray_to_jsbytes(s.c, 0, s.c.length);
    s.t = 0;
   }
   function jsoo_is_ascii(s){
    if(s.length < 24){
     for(var i = 0; i < s.length; i++) if(s.charCodeAt(i) > 127) return false;
     return true;
    }
    else
     return ! /[^\x00-\x7f]/.test(s);
   }
   function caml_utf16_of_utf8(s){
    for(var b = "", t = "", c, c1, c2, v, i = 0, l = s.length; i < l; i++){
     c1 = s.charCodeAt(i);
     if(c1 < 0x80){
      for(var j = i + 1; j < l && (c1 = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     v = 1;
     if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
      c = c2 + (c1 << 6);
      if(c1 < 0xe0){
       v = c - 0x3080;
       if(v < 0x80) v = 1;
      }
      else{
       v = 2;
       if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
        c = c2 + (c << 6);
        if(c1 < 0xf0){
         v = c - 0xe2080;
         if(v < 0x800 || v >= 0xd7ff && v < 0xe000) v = 2;
        }
        else{
         v = 3;
         if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128 && c1 < 0xf5){
          v = c2 - 0x3c82080 + (c << 6);
          if(v < 0x10000 || v > 0x10ffff) v = 3;
         }
        }
       }
      }
     }
     if(v < 4){
      i -= v;
      t += "\ufffd";
     }
     else if(v > 0xffff)
      t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF));
     else
      t += String.fromCharCode(v);
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function MlBytes(tag, contents, length){
    this.t = tag;
    this.c = contents;
    this.l = length;
   }
   MlBytes.prototype.toString =
    function(){
     switch(this.t){
       case 9:
        return this.c;
       default: caml_convert_string_to_bytes(this);
       case 0:
        if(jsoo_is_ascii(this.c)){this.t = 9; return this.c;} this.t = 8;
       case 8:
        return this.c;
     }
    };
   MlBytes.prototype.toUtf16 =
    function(){
     var r = this.toString();
     if(this.t == 9) return r;
     return caml_utf16_of_utf8(r);
    };
   MlBytes.prototype.slice =
    function(){
     var content = this.t == 4 ? this.c.slice() : this.c;
     return new MlBytes(this.t, content, this.l);
    };
   function caml_bytes_of_jsbytes(s){return new MlBytes(0, s, s.length);}
   function caml_jsbytes_of_string(x){return x;}
   function caml_bytes_of_string(s){
    return caml_bytes_of_jsbytes(caml_jsbytes_of_string(s));
   }
   function caml_blit_string(a, b, c, d, e){
    caml_blit_bytes(caml_bytes_of_string(a), b, c, d, e);
    return 0;
   }
   function caml_int64_of_bytes(a){
    return new
            MlInt64
            (a[7] << 0 | a[6] << 8 | a[5] << 16,
             a[4] << 0 | a[3] << 8 | a[2] << 16,
             a[1] << 0 | a[0] << 8);
   }
   function caml_bytes_unsafe_get(s, i){
    switch(s.t & 6){
      default: if(i >= s.c.length) return 0;
      case 0:
       return s.c.charCodeAt(i);
      case 4:
       return s.c[i];
    }
   }
   function caml_bytes_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_bytes_get64(s, i){
    if(i >>> 0 >= s.l - 7) caml_bytes_bound_error();
    var a = new Array(8);
    for(var j = 0; j < 8; j++) a[7 - j] = caml_bytes_unsafe_get(s, i + j);
    return caml_int64_of_bytes(a);
   }
   function caml_bytes_unsafe_set(s, i, c){
    c &= 0xff;
    if(s.t != 4){
     if(i == s.c.length){
      s.c += String.fromCharCode(c);
      if(i + 1 == s.l) s.t = 0;
      return 0;
     }
     caml_convert_bytes_to_array(s);
    }
    s.c[i] = c;
    return 0;
   }
   function caml_bytes_set(s, i, c){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_set(s, i, c);
   }
   function caml_int64_to_bytes(x){return x.toArray();}
   function caml_bytes_set64(s, i, i64){
    if(i >>> 0 >= s.l - 7) caml_bytes_bound_error();
    var a = caml_int64_to_bytes(i64);
    for(var j = 0; j < 8; j++) caml_bytes_unsafe_set(s, i + 7 - j, a[j]);
    return 0;
   }
   function caml_call_gen(f, args){
    var
     n = f.l >= 0 ? f.l : f.l = f.length,
     argsLen = args.length,
     d = n - argsLen;
    if(d == 0)
     return f.apply(null, args);
    else if(d < 0){
     var g = f.apply(null, args.slice(0, n));
     if(typeof g !== "function") return g;
     return caml_call_gen(g, args.slice(n));
    }
    else{
     switch(d){
       case 1:
        {
         var
          g =
            function(x){
             var nargs = new Array(argsLen + 1);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             return f.apply(null, nargs);
            };
         break;
        }
       case 2:
        {
         var
          g =
            function(x, y){
             var nargs = new Array(argsLen + 2);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             nargs[argsLen + 1] = y;
             return f.apply(null, nargs);
            };
         break;
        }
       default:
        var
         g =
           function(){
            var
             extra_args = arguments.length == 0 ? 1 : arguments.length,
             nargs = new Array(args.length + extra_args);
            for(var i = 0; i < args.length; i++) nargs[i] = args[i];
            for(var i = 0; i < arguments.length; i++)
             nargs[args.length + i] = arguments[i];
            return caml_call_gen(f, nargs);
           };
     }
     g.l = d;
     return g;
    }
   }
   function caml_check_bound(array, index){
    if(index >>> 0 >= array.length - 1) caml_array_bound_error();
    return array;
   }
   function caml_classify_float(x){
    if(isFinite(x)){
     if(Math.abs(x) >= 2.2250738585072014e-308) return 0;
     if(x != 0) return 1;
     return 2;
    }
    return isNaN(x) ? 4 : 3;
   }
   function caml_is_continuation_tag(t){return t == 245 ? 1 : 0;}
   var log2_ok = Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
   function jsoo_floor_log2(x){
    if(log2_ok) return Math.floor(Math.log2(x));
    var i = 0;
    if(x == 0) return - Infinity;
    if(x >= 1) while(x >= 2){x /= 2; i++;} else while(x < 1){x *= 2; i--;}
    return i;
   }
   function caml_int32_bits_of_float(x){
    var float32a = new Float32Array(1);
    float32a[0] = x;
    var int32a = new Int32Array(float32a.buffer);
    return int32a[0] | 0;
   }
   function caml_int64_create_lo_mi_hi(lo, mi, hi){return new MlInt64(lo, mi, hi);
   }
   function caml_int64_bits_of_float(x){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_int64_create_lo_mi_hi(1, 0, 0x7ff0);
     return x > 0
             ? caml_int64_create_lo_mi_hi(0, 0, 0x7ff0)
             : caml_int64_create_lo_mi_hi(0, 0, 0xfff0);
    }
    var sign = x == 0 && 1 / x == - Infinity ? 0x8000 : x >= 0 ? 0 : 0x8000;
    if(sign) x = - x;
    var exp = jsoo_floor_log2(x) + 1023;
    if(exp <= 0){
     exp = 0;
     x /= Math.pow(2, - 1026);
    }
    else{
     x /= Math.pow(2, exp - 1027);
     if(x < 16){x *= 2; exp -= 1;}
     if(exp == 0) x /= 2;
    }
    var k = Math.pow(2, 24), r3 = x | 0;
    x = (x - r3) * k;
    var r2 = x | 0;
    x = (x - r2) * k;
    var r1 = x | 0;
    r3 = r3 & 0xf | sign | exp << 4;
    return caml_int64_create_lo_mi_hi(r1, r2, r3);
   }
   function caml_ba_serialize(writer, ba, sz){
    writer.write(32, ba.dims.length);
    writer.write(32, ba.kind | ba.layout << 8);
    if(ba.caml_custom == "_bigarr02")
     for(var i = 0; i < ba.dims.length; i++)
      if(ba.dims[i] < 0xffff)
       writer.write(16, ba.dims[i]);
      else{
       writer.write(16, 0xffff);
       writer.write(32, 0);
       writer.write(32, ba.dims[i]);
      }
    else
     for(var i = 0; i < ba.dims.length; i++) writer.write(32, ba.dims[i]);
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       for(var i = 0; i < ba.data.length; i++) writer.write(8, ba.data[i]);
       break;
      case 4:
      case 5:
       for(var i = 0; i < ba.data.length; i++) writer.write(16, ba.data[i]);
       break;
      case 6:
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 8:
      case 9:
       writer.write(8, 0);
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 7:
       for(var i = 0; i < ba.data.length / 2; i++){
        var b = caml_int64_to_bytes(ba.get(i));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 1:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 0:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int32_bits_of_float(ba.get(i));
        writer.write(32, b);
       }
       break;
      case 10:
       for(var i = 0; i < ba.data.length / 2; i++){
        var j = ba.get(i);
        writer.write(32, caml_int32_bits_of_float(j[1]));
        writer.write(32, caml_int32_bits_of_float(j[2]));
       }
       break;
      case 11:
       for(var i = 0; i < ba.data.length / 2; i++){
        var
         complex = ba.get(i),
         b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
    }
    sz[0] = (4 + ba.dims.length) * 4;
    sz[1] = (4 + ba.dims.length) * 8;
   }
   function caml_int32_float_of_bits(x){
    var int32a = new Int32Array(1);
    int32a[0] = x;
    var float32a = new Float32Array(int32a.buffer);
    return float32a[0];
   }
   function caml_int64_float_of_bits(x){
    var lo = x.lo, mi = x.mi, hi = x.hi, exp = (hi & 0x7fff) >> 4;
    if(exp == 2047)
     return (lo | mi | hi & 0xf) == 0
             ? hi & 0x8000 ? - Infinity : Infinity
             : NaN;
    var k = Math.pow(2, - 24), res = (lo * k + mi) * k + (hi & 0xf);
    if(exp > 0){
     res += 16;
     res *= Math.pow(2, exp - 1027);
    }
    else
     res *= Math.pow(2, - 1026);
    if(hi & 0x8000) res = - res;
    return res;
   }
   function caml_failwith(msg){
    if(! caml_global_data.Failure)
     caml_global_data.Failure = [248, caml_string_of_jsbytes("Failure"), - 3];
    caml_raise_with_string(caml_global_data.Failure, msg);
   }
   function caml_ba_deserialize(reader, sz, name){
    var num_dims = reader.read32s();
    if(num_dims < 0 || num_dims > 16)
     caml_failwith("input_value: wrong number of bigarray dimensions");
    var
     tag = reader.read32s(),
     kind = tag & 0xff,
     layout = tag >> 8 & 1,
     dims = [];
    if(name == "_bigarr02")
     for(var i = 0; i < num_dims; i++){
      var size_dim = reader.read16u();
      if(size_dim == 0xffff){
       var size_dim_hi = reader.read32u(), size_dim_lo = reader.read32u();
       if(size_dim_hi != 0)
        caml_failwith("input_value: bigarray dimension overflow in 32bit");
       size_dim = size_dim_lo;
      }
      dims.push(size_dim);
     }
    else
     for(var i = 0; i < num_dims; i++) dims.push(reader.read32u());
    var
     size = caml_ba_get_size(dims),
     data = caml_ba_create_buffer(kind, size),
     ba = caml_ba_create_unsafe(kind, layout, dims, data);
    switch(kind){
      case 2:
       for(var i = 0; i < size; i++) data[i] = reader.read8s(); break;
      case 3:
      case 12:
       for(var i = 0; i < size; i++) data[i] = reader.read8u(); break;
      case 4:
       for(var i = 0; i < size; i++) data[i] = reader.read16s(); break;
      case 5:
       for(var i = 0; i < size; i++) data[i] = reader.read16u(); break;
      case 6:
       for(var i = 0; i < size; i++) data[i] = reader.read32s(); break;
      case 8:
      case 9:
       var sixty = reader.read8u();
       if(sixty)
        caml_failwith
         ("input_value: cannot read bigarray with 64-bit OCaml ints");
       for(var i = 0; i < size; i++) data[i] = reader.read32s();
       break;
      case 7:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var int64 = caml_int64_of_bytes(t);
        ba.set(i, int64);
       }
       break;
      case 1:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var f = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, f);
       }
       break;
      case 0:
       for(var i = 0; i < size; i++){
        var f = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, f);
       }
       break;
      case 10:
       for(var i = 0; i < size; i++){
        var
         re = caml_int32_float_of_bits(reader.read32s()),
         im = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, [254, re, im]);
       }
       break;
      case 11:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var re = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var im = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, [254, re, im]);
       }
       break;
    }
    sz[0] = (4 + num_dims) * 4;
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function caml_ba_compare(a, b, total){return a.compare(b, total);}
   function caml_mul(a, b){return Math.imul(a, b);}
   function caml_hash_mix_int(h, d){
    d = caml_mul(d, 0xcc9e2d51 | 0);
    d = d << 15 | d >>> 32 - 15;
    d = caml_mul(d, 0x1b873593);
    h ^= d;
    h = h << 13 | h >>> 32 - 13;
    return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0;
   }
   function caml_hash_mix_int64(h, v){
    h = caml_hash_mix_int(h, caml_int64_lo32(v));
    h = caml_hash_mix_int(h, caml_int64_hi32(v));
    return h;
   }
   function caml_hash_mix_float(h, v0){
    return caml_hash_mix_int64(h, caml_int64_bits_of_float(v0));
   }
   function caml_ba_hash(ba){
    var num_elts = caml_ba_get_size(ba.dims), h = 0;
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       if(num_elts > 256) num_elts = 256;
       var w = 0, i = 0;
       for(i = 0; i + 4 <= ba.data.length; i += 4){
        w =
         ba.data[i + 0] | ba.data[i + 1] << 8 | ba.data[i + 2] << 16
         | ba.data[i + 3] << 24;
        h = caml_hash_mix_int(h, w);
       }
       w = 0;
       switch(num_elts & 3){
         case 3:
          w = ba.data[i + 2] << 16;
         case 2:
          w |= ba.data[i + 1] << 8;
         case 1:
          w |= ba.data[i + 0]; h = caml_hash_mix_int(h, w);
       }
       break;
      case 4:
      case 5:
       if(num_elts > 128) num_elts = 128;
       var w = 0, i = 0;
       for(i = 0; i + 2 <= ba.data.length; i += 2){
        w = ba.data[i + 0] | ba.data[i + 1] << 16;
        h = caml_hash_mix_int(h, w);
       }
       if((num_elts & 1) != 0) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 6:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 8:
      case 9:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 7:
       if(num_elts > 32) num_elts = 32;
       num_elts *= 2;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 10:
       num_elts *= 2;
      case 0:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
      case 11:
       num_elts *= 2;
      case 1:
       if(num_elts > 32) num_elts = 32;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
    }
    return h;
   }
   function caml_int32_unmarshal(reader, size){size[0] = 4; return reader.read32s();
   }
   function caml_nativeint_unmarshal(reader, size){
    switch(reader.read8u()){
      case 1:
       size[0] = 4; return reader.read32s();
      case 2:
       caml_failwith("input_value: native integer value too large");
      default: caml_failwith("input_value: ill-formed native integer");
    }
   }
   function caml_int64_unmarshal(reader, size){
    var t = new Array(8);
    for(var j = 0; j < 8; j++) t[j] = reader.read8u();
    size[0] = 8;
    return caml_int64_of_bytes(t);
   }
   function caml_int64_marshal(writer, v, sizes){
    var b = caml_int64_to_bytes(v);
    for(var i = 0; i < 8; i++) writer.write(8, b[i]);
    sizes[0] = 8;
    sizes[1] = 8;
   }
   function caml_int64_compare(x, y, total){return x.compare(y);}
   function caml_int64_hash(v){return v.lo32() ^ v.hi32();}
   var
    caml_custom_ops =
      {"_j":
       {deserialize: caml_int64_unmarshal,
        serialize: caml_int64_marshal,
        fixed_length: 8,
        compare: caml_int64_compare,
        hash: caml_int64_hash},
       "_i": {deserialize: caml_int32_unmarshal, fixed_length: 4},
       "_n": {deserialize: caml_nativeint_unmarshal, fixed_length: 4},
       "_bigarray":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarray");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarr02");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash}};
   function caml_compare_val_get_custom(a){
    return caml_custom_ops[a.caml_custom]
           && caml_custom_ops[a.caml_custom].compare;
   }
   function caml_compare_val_number_custom(num, custom, swap, total){
    var comp = caml_compare_val_get_custom(custom);
    if(comp){
     var x = swap > 0 ? comp(custom, num, total) : comp(num, custom, total);
     if(total && x != x) return swap;
     if(+ x != + x) return + x;
     if((x | 0) != 0) return x | 0;
    }
    return swap;
   }
   function caml_is_ml_string(s){
    return typeof s === "string" && ! /[^\x00-\xff]/.test(s);
   }
   function caml_is_ml_bytes(s){return s instanceof MlBytes;}
   function caml_compare_val_tag(a){
    if(typeof a === "number")
     return 1000;
    else if(caml_is_ml_bytes(a))
     return 252;
    else if(caml_is_ml_string(a))
     return 1252;
    else if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255){var tag = a[0] | 0; return tag == 254 ? 0 : tag;}
    else if(a instanceof String)
     return 12520;
    else if(typeof a == "string")
     return 12520;
    else if(a instanceof Number)
     return 1000;
    else if(a && a.caml_custom)
     return 1255;
    else if(a && a.compare)
     return 1256;
    else if(typeof a == "function")
     return 1247;
    else if(typeof a == "symbol") return 1251;
    return 1001;
   }
   function caml_int_compare(a, b){
    if(a < b) return - 1;
    if(a == b) return 0;
    return 1;
   }
   function caml_string_compare(s1, s2){
    return s1 < s2 ? - 1 : s1 > s2 ? 1 : 0;
   }
   function caml_bytes_compare(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c ? - 1 : s1.c > s2.c ? 1 : 0;
   }
   function caml_compare_val(a, b, total){
    var stack = [];
    for(;;){
     if(! (total && a === b)){
      var tag_a = caml_compare_val_tag(a);
      if(tag_a == 250){a = a[1]; continue;}
      var tag_b = caml_compare_val_tag(b);
      if(tag_b == 250){b = b[1]; continue;}
      if(tag_a !== tag_b){
       if(tag_a == 1000){
        if(tag_b == 1255)
         return caml_compare_val_number_custom(a, b, - 1, total);
        return - 1;
       }
       if(tag_b == 1000){
        if(tag_a == 1255)
         return caml_compare_val_number_custom(b, a, 1, total);
        return 1;
       }
       return tag_a < tag_b ? - 1 : 1;
      }
      switch(tag_a){
        case 247:
         caml_invalid_argument("compare: functional value"); break;
        case 248:
         var x = caml_int_compare(a[2], b[2]); if(x != 0) return x | 0; break;
        case 249:
         caml_invalid_argument("compare: functional value"); break;
        case 250:
         caml_invalid_argument("equal: got Forward_tag, should not happen");
         break;
        case 251:
         caml_invalid_argument("equal: abstract value"); break;
        case 252:
         if(a !== b){
          var x = caml_bytes_compare(a, b);
          if(x != 0) return x | 0;
         }
         break;
        case 253:
         caml_invalid_argument("equal: got Double_tag, should not happen");
         break;
        case 254:
         caml_invalid_argument
          ("equal: got Double_array_tag, should not happen");
         break;
        case 255:
         caml_invalid_argument("equal: got Custom_tag, should not happen");
         break;
        case 1247:
         caml_invalid_argument("compare: functional value"); break;
        case 1255:
         var comp = caml_compare_val_get_custom(a);
         if(comp != caml_compare_val_get_custom(b))
          return a.caml_custom < b.caml_custom ? - 1 : 1;
         if(! comp) caml_invalid_argument("compare: abstract value");
         var x = comp(a, b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1256:
         var x = a.compare(b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1000:
         a = + a;
         b = + b;
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1001:
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1251:
         if(a !== b){if(! total) return NaN; return 1;} break;
        case 1252:
         var a = caml_jsbytes_of_string(a), b = caml_jsbytes_of_string(b);
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 12520:
         var a = a.toString(), b = b.toString();
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 246:
        case 254:
        default:
         if(caml_is_continuation_tag(tag_a)){
          caml_invalid_argument("compare: continuation value");
          break;
         }
         if(a.length != b.length) return a.length < b.length ? - 1 : 1;
         if(a.length > 1) stack.push(a, b, 1);
         break;
      }
     }
     if(stack.length == 0) return 0;
     var i = stack.pop();
     b = stack.pop();
     a = stack.pop();
     if(i + 1 < a.length) stack.push(a, b, i + 1);
     a = a[i];
     b = b[i];
    }
   }
   function caml_compare(a, b){return caml_compare_val(a, b, true);}
   function caml_convert_raw_backtrace(){return [0];}
   function caml_create_bytes(len){
    if(len < 0) caml_invalid_argument("Bytes.create");
    return new MlBytes(len ? 2 : 9, "", len);
   }
   var caml_domain_dls = [0];
   function caml_domain_dls_get(unit){return caml_domain_dls;}
   function caml_domain_dls_set(a){caml_domain_dls = a;}
   function caml_fill_bytes(s, i, l, c){
    if(l > 0)
     if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
      if(c == 0){
       s.c = "";
       s.t = 2;
      }
      else{
       s.c = caml_str_repeat(l, String.fromCharCode(c));
       s.t = l == s.l ? 0 : 2;
      }
     else{
      if(s.t != 4) caml_convert_bytes_to_array(s);
      for(l += i; i < l; i++) s.c[i] = c;
     }
    return 0;
   }
   function caml_parse_format(fmt){
    fmt = caml_jsbytes_of_string(fmt);
    var len = fmt.length;
    if(len > 31) caml_invalid_argument("format_int: format too long");
    var
     f =
       {justify: "+",
        signstyle: "-",
        filler: " ",
        alternate: false,
        base: 0,
        signedconv: false,
        width: 0,
        uppercase: false,
        sign: 1,
        prec: - 1,
        conv: "f"};
    for(var i = 0; i < len; i++){
     var c = fmt.charAt(i);
     switch(c){
       case "-":
        f.justify = "-"; break;
       case "+":
       case " ":
        f.signstyle = c; break;
       case "0":
        f.filler = "0"; break;
       case "#":
        f.alternate = true; break;
       case "1":
       case "2":
       case "3":
       case "4":
       case "5":
       case "6":
       case "7":
       case "8":
       case "9":
        f.width = 0;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.width = f.width * 10 + c; i++;}
        i--;
        break;
       case ".":
        f.prec = 0;
        i++;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.prec = f.prec * 10 + c; i++;}
        i--;
       case "d":
       case "i":
        f.signedconv = true;
       case "u":
        f.base = 10; break;
       case "x":
        f.base = 16; break;
       case "X":
        f.base = 16; f.uppercase = true; break;
       case "o":
        f.base = 8; break;
       case "e":
       case "f":
       case "g":
        f.signedconv = true; f.conv = c; break;
       case "E":
       case "F":
       case "G":
        f.signedconv = true;
        f.uppercase = true;
        f.conv = c.toLowerCase();
        break;
     }
    }
    return f;
   }
   function caml_finish_formatting(f, rawbuffer){
    if(f.uppercase) rawbuffer = rawbuffer.toUpperCase();
    var len = rawbuffer.length;
    if(f.signedconv && (f.sign < 0 || f.signstyle != "-")) len++;
    if(f.alternate){if(f.base == 8) len += 1; if(f.base == 16) len += 2;}
    var buffer = "";
    if(f.justify == "+" && f.filler == " ")
     for(var i = len; i < f.width; i++) buffer += " ";
    if(f.signedconv)
     if(f.sign < 0)
      buffer += "-";
     else if(f.signstyle != "-") buffer += f.signstyle;
    if(f.alternate && f.base == 8) buffer += "0";
    if(f.alternate && f.base == 16) buffer += f.uppercase ? "0X" : "0x";
    if(f.justify == "+" && f.filler == "0")
     for(var i = len; i < f.width; i++) buffer += "0";
    buffer += rawbuffer;
    if(f.justify == "-") for(var i = len; i < f.width; i++) buffer += " ";
    return caml_string_of_jsbytes(buffer);
   }
   function caml_format_float(fmt, x){
    function toFixed(x, dp){
     if(Math.abs(x) < 1.0)
      return x.toFixed(dp);
     else{
      var e = parseInt(x.toString().split("+")[1]);
      if(e > 20){
       e -= 20;
       x /= Math.pow(10, e);
       x += new Array(e + 1).join("0");
       if(dp > 0) x = x + "." + new Array(dp + 1).join("0");
       return x;
      }
      else
       return x.toFixed(dp);
     }
    }
    var s, f = caml_parse_format(fmt), prec = f.prec < 0 ? 6 : f.prec;
    if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1; x = - x;}
    if(isNaN(x)){
     s = "nan";
     f.filler = " ";
    }
    else if(! isFinite(x)){
     s = "inf";
     f.filler = " ";
    }
    else
     switch(f.conv){
       case "e":
        var s = x.toExponential(prec), i = s.length;
        if(s.charAt(i - 3) == "e")
         s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
        break;
       case "f":
        s = toFixed(x, prec); break;
       case "g":
        prec = prec ? prec : 1;
        s = x.toExponential(prec - 1);
        var j = s.indexOf("e"), exp = + s.slice(j + 1);
        if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec){
         var i = j - 1;
         while(s.charAt(i) == "0") i--;
         if(s.charAt(i) == ".") i--;
         s = s.slice(0, i + 1) + s.slice(j);
         i = s.length;
         if(s.charAt(i - 3) == "e")
          s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
         break;
        }
        else{
         var p = prec;
         if(exp < 0){
          p -= exp + 1;
          s = x.toFixed(p);
         }
         else
          while(s = x.toFixed(p), s.length > prec + 1) p--;
         if(p){
          var i = s.length - 1;
          while(s.charAt(i) == "0") i--;
          if(s.charAt(i) == ".") i--;
          s = s.slice(0, i + 1);
         }
        }
        break;
     }
    return caml_finish_formatting(f, s);
   }
   function caml_format_int(fmt, i){
    if(caml_jsbytes_of_string(fmt) == "%d")
     return caml_string_of_jsbytes("" + i);
    var f = caml_parse_format(fmt);
    if(i < 0) if(f.signedconv){f.sign = - 1; i = - i;} else i >>>= 0;
    var s = i.toString(f.base);
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - s.length;
     if(n > 0) s = caml_str_repeat(n, "0") + s;
    }
    return caml_finish_formatting(f, s);
   }
   var caml_oo_last_id = 0;
   function caml_fresh_oo_id(){return caml_oo_last_id++;}
   function caml_jsstring_of_string(s){
    if(jsoo_is_ascii(s)) return s;
    return caml_utf16_of_utf8(s);
   }
   function fs_node_supported(){
    return typeof globalThis.process !== "undefined"
           && typeof globalThis.process.versions !== "undefined"
           && typeof globalThis.process.versions.node !== "undefined";
   }
   function make_path_is_absolute(){
    function posix(path){
     if(path.charAt(0) === "/") return ["", path.substring(1)];
     return;
    }
    function win32(path){
     var
      splitDeviceRe =
        /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
      result = splitDeviceRe.exec(path),
      device = result[1] || "",
      isUnc = Boolean(device && device.charAt(1) !== ":");
     if(Boolean(result[2] || isUnc)){
      var root = result[1] || "", sep = result[2] || "";
      return [root, path.substring(root.length + sep.length)];
     }
     return;
    }
    return fs_node_supported() && globalThis.process
            && globalThis.process.platform
            ? globalThis.process.platform === "win32" ? win32 : posix
            : posix;
   }
   var path_is_absolute = make_path_is_absolute();
   function caml_trailing_slash(name){
    return name.slice(- 1) !== "/" ? name + "/" : name;
   }
   if(fs_node_supported() && globalThis.process && globalThis.process.cwd)
    var caml_current_dir = globalThis.process.cwd().replace(/\\/g, "/");
   else
    var caml_current_dir = "/static";
   caml_current_dir = caml_trailing_slash(caml_current_dir);
   function caml_make_path(name){
    name = caml_jsstring_of_string(name);
    if(! path_is_absolute(name)) name = caml_current_dir + name;
    var
     comp0 = path_is_absolute(name),
     comp = comp0[1].split("/"),
     ncomp = [];
    for(var i = 0; i < comp.length; i++)
     switch(comp[i]){
       case "..":
        if(ncomp.length > 1) ncomp.pop(); break;
       case ".": break;
       case "": break;
       default: ncomp.push(comp[i]); break;
     }
    ncomp.unshift(comp0[0]);
    ncomp.orig = name;
    return ncomp;
   }
   function caml_utf8_of_utf16(s){
    for(var b = "", t = b, c, d, i = 0, l = s.length; i < l; i++){
     c = s.charCodeAt(i);
     if(c < 0x80){
      for(var j = i + 1; j < l && (c = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     if(c < 0x800){
      t += String.fromCharCode(0xc0 | c >> 6);
      t += String.fromCharCode(0x80 | c & 0x3f);
     }
     else if(c < 0xd800 || c >= 0xdfff)
      t +=
       String.fromCharCode
        (0xe0 | c >> 12, 0x80 | c >> 6 & 0x3f, 0x80 | c & 0x3f);
     else if
      (c >= 0xdbff || i + 1 == l || (d = s.charCodeAt(i + 1)) < 0xdc00
       || d > 0xdfff)
      t += "\xef\xbf\xbd";
     else{
      i++;
      c = (c << 10) + d - 0x35fdc00;
      t +=
       String.fromCharCode
        (0xf0 | c >> 18,
         0x80 | c >> 12 & 0x3f,
         0x80 | c >> 6 & 0x3f,
         0x80 | c & 0x3f);
     }
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function caml_string_of_jsstring(s){
    return jsoo_is_ascii(s)
            ? caml_string_of_jsbytes(s)
            : caml_string_of_jsbytes(caml_utf8_of_utf16(s));
   }
   var
    unix_error =
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
   function make_unix_err_args(code, syscall, path, errno){
    var variant = unix_error.indexOf(code);
    if(variant < 0){if(errno == null) errno = - 9999; variant = [0, errno];}
    var
     args =
       [variant,
        caml_string_of_jsstring(syscall || ""),
        caml_string_of_jsstring(path || "")];
    return args;
   }
   var caml_named_values = {};
   function caml_named_value(nm){return caml_named_values[nm];}
   function caml_raise_with_args(tag, args){
    throw caml_maybe_attach_backtrace([0, tag].concat(args));
   }
   function caml_bytes_of_array(a){
    if(! (a instanceof Uint8Array)) a = new Uint8Array(a);
    return new MlBytes(4, a, a.length);
   }
   function caml_raise_sys_error(msg){
    caml_raise_with_string(caml_global_data.Sys_error, msg);
   }
   function caml_raise_no_such_file(name){
    caml_raise_sys_error(name + ": No such file or directory");
   }
   function caml_uint8_array_of_bytes(s){
    if(s.t != 4) caml_convert_bytes_to_array(s);
    return s.c;
   }
   function caml_ml_bytes_length(s){return s.l;}
   function MlFile(){}
   function MlFakeFile(content){this.data = content;}
   MlFakeFile.prototype = new MlFile();
   MlFakeFile.prototype.constructor = MlFakeFile;
   MlFakeFile.prototype.truncate =
    function(len){
     var old = this.data;
     this.data = caml_create_bytes(len | 0);
     caml_blit_bytes(old, 0, this.data, 0, len);
    };
   MlFakeFile.prototype.length =
    function(){return caml_ml_bytes_length(this.data);};
   MlFakeFile.prototype.write =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen){
      var new_str = caml_create_bytes(offset + len), old_data = this.data;
      this.data = new_str;
      caml_blit_bytes(old_data, 0, this.data, 0, clen);
     }
     caml_blit_bytes(caml_bytes_of_array(buf), pos, this.data, offset, len);
     return 0;
    };
   MlFakeFile.prototype.read =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen) len = clen - offset;
     if(len){
      var data = caml_create_bytes(len | 0);
      caml_blit_bytes(this.data, offset, data, 0, len);
      buf.set(caml_uint8_array_of_bytes(data), pos);
     }
     return len;
    };
   function MlFakeFd(name, file, flags){
    this.file = file;
    this.name = name;
    this.flags = flags;
   }
   MlFakeFd.prototype.err_closed =
    function(){
     caml_raise_sys_error(this.name + ": file descriptor already closed");
    };
   MlFakeFd.prototype.length =
    function(){if(this.file) return this.file.length(); this.err_closed();};
   MlFakeFd.prototype.write =
    function(offset, buf, pos, len){
     if(this.file) return this.file.write(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.read =
    function(offset, buf, pos, len){
     if(this.file) return this.file.read(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.close = function(){this.file = undefined;};
   function MlFakeDevice(root, f){
    this.content = {};
    this.root = root;
    this.lookupFun = f;
   }
   MlFakeDevice.prototype.nm = function(name){return this.root + name;};
   MlFakeDevice.prototype.create_dir_if_needed =
    function(name){
     var comp = name.split("/"), res = "";
     for(var i = 0; i < comp.length - 1; i++){
      res += comp[i] + "/";
      if(this.content[res]) continue;
      this.content[res] = Symbol("directory");
     }
    };
   MlFakeDevice.prototype.slash =
    function(name){return /\/$/.test(name) ? name : name + "/";};
   MlFakeDevice.prototype.lookup =
    function(name){
     if(! this.content[name] && this.lookupFun){
      var
       res =
         this.lookupFun
          (caml_string_of_jsbytes(this.root), caml_string_of_jsbytes(name));
      if(res !== 0){
       this.create_dir_if_needed(name);
       this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]));
      }
     }
    };
   MlFakeDevice.prototype.exists =
    function(name){
     if(name == "") return 1;
     var name_slash = this.slash(name);
     if(this.content[name_slash]) return 1;
     this.lookup(name);
     return this.content[name] ? 1 : 0;
    };
   MlFakeDevice.prototype.isFile =
    function(name){return this.exists(name) && ! this.is_dir(name) ? 1 : 0;};
   MlFakeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     var unix_error = raise_unix && caml_named_value("Unix.Unix_error");
     if(this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("EEXIST", "mkdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": File exists");
     var parent = /^(.*)\/[^/]+/.exec(name);
     parent = parent && parent[1] || "";
     if(! this.exists(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": No such file or directory");
     if(! this.is_dir(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": Not a directory");
     this.create_dir_if_needed(this.slash(name));
    };
   MlFakeDevice.prototype.rmdir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      name_slash = name == "" ? "" : this.slash(name),
      r = new RegExp("^" + name_slash + "([^/]+)");
     if(! this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": Not a directory");
     for(var n in this.content)
      if(n.match(r))
       if(unix_error)
        caml_raise_with_args
         (unix_error, make_unix_err_args("ENOTEMPTY", "rmdir", this.nm(name)));
       else
        caml_raise_sys_error(this.nm(name) + ": Directory not empty");
     delete this.content[name_slash];
    };
   MlFakeDevice.prototype.readdir =
    function(name){
     var name_slash = name == "" ? "" : this.slash(name);
     if(! this.exists(name))
      caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name)) caml_raise_sys_error(name + ": Not a directory");
     var r = new RegExp("^" + name_slash + "([^/]+)"), seen = {}, a = [];
     for(var n in this.content){
      var m = n.match(r);
      if(m && ! seen[m[1]]){seen[m[1]] = true; a.push(m[1]);}
     }
     return a;
    };
   MlFakeDevice.prototype.opendir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      a = this.readdir(name),
      c = false,
      i = 0;
     return {readSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              if(i == a.length) return null;
              var entry = a[i];
              i++;
              return {name: entry};
             },
             closeSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              c = true;
              a = [];
             }};
    };
   MlFakeDevice.prototype.is_dir =
    function(name){
     if(name == "") return true;
     var name_slash = this.slash(name);
     return this.content[name_slash] ? 1 : 0;
    };
   MlFakeDevice.prototype.unlink =
    function(name){
     var ok = this.content[name] ? true : false;
     delete this.content[name];
     return ok;
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.register =
    function(name, content){
     var file;
     if(this.content[name])
      caml_raise_sys_error(this.nm(name) + " : file already exists");
     if(caml_is_ml_bytes(content)) file = new MlFakeFile(content);
     if(caml_is_ml_string(content))
      file = new MlFakeFile(caml_bytes_of_string(content));
     else if(content instanceof Array)
      file = new MlFakeFile(caml_bytes_of_array(content));
     else if(typeof content === "string")
      file = new MlFakeFile(caml_bytes_of_jsbytes(content));
     else if(content.toString){
      var
       bytes =
         caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
      file = new MlFakeFile(bytes);
     }
     if(file){
      this.create_dir_if_needed(name);
      this.content[name] = file;
     }
     else
      caml_raise_sys_error
       (this.nm(name) + " : registering file with invalid content type");
    };
   MlFakeDevice.prototype.constructor = MlFakeDevice;
   function caml_ml_string_length(s){return s.length;}
   function caml_string_unsafe_get(s, i){return s.charCodeAt(i);}
   function caml_uint8_array_of_string(s){
    var l = caml_ml_string_length(s), a = new Array(l), i = 0;
    for(; i < l; i++) a[i] = caml_string_unsafe_get(s, i);
    return a;
   }
   function MlNodeFd(fd, flags){
    this.fs = require("fs");
    this.fd = fd;
    this.flags = flags;
   }
   MlNodeFd.prototype = new MlFile();
   MlNodeFd.prototype.constructor = MlNodeFd;
   MlNodeFd.prototype.truncate =
    function(len){
     try{this.fs.ftruncateSync(this.fd, len | 0);}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.length =
    function(){
     try{return this.fs.fstatSync(this.fd).size;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.write =
    function(offset, buf, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       this.fs.writeSync(this.fd, buf, buf_offset, len);
      else
       this.fs.writeSync(this.fd, buf, buf_offset, len, offset);
     }
     catch(err){caml_raise_sys_error(err.toString());}
     return 0;
    };
   MlNodeFd.prototype.read =
    function(offset, a, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       var read = this.fs.readSync(this.fd, a, buf_offset, len);
      else
       var read = this.fs.readSync(this.fd, a, buf_offset, len, offset);
      return read;
     }
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.close =
    function(){
     try{this.fs.closeSync(this.fd); return 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   function MlNodeDevice(root){this.fs = require("fs"); this.root = root;}
   MlNodeDevice.prototype.nm = function(name){return this.root + name;};
   MlNodeDevice.prototype.exists =
    function(name){
     try{return this.fs.existsSync(this.nm(name)) ? 1 : 0;}
     catch(err){return 0;}
    };
   MlNodeDevice.prototype.isFile =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isFile() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     try{this.fs.mkdirSync(this.nm(name), {mode: mode}); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rmdir =
    function(name, raise_unix){
     try{this.fs.rmdirSync(this.nm(name)); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readdir =
    function(name, raise_unix){
     try{return this.fs.readdirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.is_dir =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isDirectory() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.unlink =
    function(name, raise_unix){
     try{
      var b = this.fs.existsSync(this.nm(name)) ? 1 : 0;
      this.fs.unlinkSync(this.nm(name));
      return b;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.open =
    function(name, f, raise_unix){
     var consts = require("constants"), res = 0;
     for(var key in f)
      switch(key){
        case "rdonly":
         res |= consts.O_RDONLY; break;
        case "wronly":
         res |= consts.O_WRONLY; break;
        case "append":
         res |= consts.O_WRONLY | consts.O_APPEND; break;
        case "create":
         res |= consts.O_CREAT; break;
        case "truncate":
         res |= consts.O_TRUNC; break;
        case "excl":
         res |= consts.O_EXCL; break;
        case "binary":
         res |= consts.O_BINARY; break;
        case "text":
         res |= consts.O_TEXT; break;
        case "nonblock":
         res |= consts.O_NONBLOCK; break;
      }
     try{
      var
       fd = this.fs.openSync(this.nm(name), res),
       isCharacterDevice =
         this.fs.lstatSync(this.nm(name)).isCharacterDevice();
      f.isCharacterDevice = isCharacterDevice;
      return new MlNodeFd(fd, f);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rename =
    function(o, n, raise_unix){
     try{this.fs.renameSync(this.nm(o), this.nm(n));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.stat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.statSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.lstat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.lstatSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.symlink =
    function(to_dir, target, path, raise_unix){
     try{
      this.fs.symlinkSync
       (this.nm(target), this.nm(path), to_dir ? "dir" : "file");
      return 0;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readlink =
    function(name, raise_unix){
     try{
      var link = this.fs.readlinkSync(this.nm(name), "utf8");
      return caml_string_of_jsstring(link);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.opendir =
    function(name, raise_unix){
     try{return this.fs.opendirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.raise_nodejs_error =
    function(err, raise_unix){
     var unix_error = caml_named_value("Unix.Unix_error");
     if(raise_unix && unix_error){
      var
       args = make_unix_err_args(err.code, err.syscall, err.path, err.errno);
      caml_raise_with_args(unix_error, args);
     }
     else
      caml_raise_sys_error(err.toString());
    };
   MlNodeDevice.prototype.stats_from_js =
    function(js_stats){
     var file_kind;
     if(js_stats.isFile())
      file_kind = 0;
     else if(js_stats.isDirectory())
      file_kind = 1;
     else if(js_stats.isCharacterDevice())
      file_kind = 2;
     else if(js_stats.isBlockDevice())
      file_kind = 3;
     else if(js_stats.isSymbolicLink())
      file_kind = 4;
     else if(js_stats.isFIFO())
      file_kind = 5;
     else if(js_stats.isSocket()) file_kind = 6;
     return [0,
             js_stats.dev,
             js_stats.ino,
             file_kind,
             js_stats.mode,
             js_stats.nlink,
             js_stats.uid,
             js_stats.gid,
             js_stats.rdev,
             js_stats.size,
             js_stats.atimeMs,
             js_stats.mtimeMs,
             js_stats.ctimeMs];
    };
   MlNodeDevice.prototype.constructor = MlNodeDevice;
   function caml_get_root(path){
    var x = path_is_absolute(path);
    if(! x) return;
    return x[0] + "/";
   }
   var
    caml_root =
      caml_get_root(caml_current_dir)
      || caml_failwith("unable to compute caml_root"),
    jsoo_mount_point = [];
   if(fs_node_supported())
    jsoo_mount_point.push
     ({path: caml_root, device: new MlNodeDevice(caml_root)});
   else
    jsoo_mount_point.push
     ({path: caml_root, device: new MlFakeDevice(caml_root)});
   jsoo_mount_point.push
    ({path: "/static/", device: new MlFakeDevice("/static/")});
   function resolve_fs_device(name){
    var
     path = caml_make_path(name),
     name = path.join("/"),
     name_slash = caml_trailing_slash(name),
     res;
    for(var i = 0; i < jsoo_mount_point.length; i++){
     var m = jsoo_mount_point[i];
     if
      (name_slash.search(m.path) == 0
       && (! res || res.path.length < m.path.length))
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
    }
    if(! res && fs_node_supported()){
     var root = caml_get_root(name);
     if(root && root.match(/^[a-zA-Z]:\/$/)){
      var m = {path: root, device: new MlNodeDevice(root)};
      jsoo_mount_point.push(m);
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
     }
    }
    if(res) return res;
    caml_raise_sys_error("no device found for " + name_slash);
   }
   function caml_create_file(name, content){
    var root = resolve_fs_device(name);
    if(! root.device.register) caml_failwith("cannot register file");
    root.device.register(root.rest, content);
    return 0;
   }
   function jsoo_create_file(name, content){
    var
     name = caml_string_of_jsbytes(name),
     content = caml_string_of_jsbytes(content);
    return caml_create_file(name, content);
   }
   function caml_fs_init(){
    var tmp = globalThis.caml_fs_tmp;
    if(tmp)
     for(var i = 0; i < tmp.length; i++)
      jsoo_create_file(tmp[i].name, tmp[i].content);
    globalThis.jsoo_create_file = jsoo_create_file;
    globalThis.caml_fs_tmp = [];
    return 0;
   }
   function caml_get_exception_raw_backtrace(){return [0];}
   function caml_greaterequal(x, y){
    return + (caml_compare_val(x, y, false) >= 0);
   }
   function caml_hash_mix_jsbytes(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w =
      s.charCodeAt(i) | s.charCodeAt(i + 1) << 8 | s.charCodeAt(i + 2) << 16
      | s.charCodeAt(i + 3) << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s.charCodeAt(i + 2) << 16;
      case 2:
       w |= s.charCodeAt(i + 1) << 8;
      case 1:
       w |= s.charCodeAt(i); h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_hash_mix_string(h, v){
    return caml_hash_mix_jsbytes(h, caml_jsbytes_of_string(v));
   }
   function caml_hash_mix_bytes_arr(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s[i + 2] << 16;
      case 2:
       w |= s[i + 1] << 8;
      case 1:
       w |= s[i]; h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_ml_bytes_content(s){
    switch(s.t & 6){
      default: caml_convert_string_to_bytes(s);
      case 0:
       return s.c;
      case 4:
       return s.c;
    }
   }
   function caml_hash_mix_bytes(h, v){
    var content = caml_ml_bytes_content(v);
    return typeof content === "string"
            ? caml_hash_mix_jsbytes(h, content)
            : caml_hash_mix_bytes_arr(h, content);
   }
   function caml_hash_mix_final(h){
    h ^= h >>> 16;
    h = caml_mul(h, 0x85ebca6b | 0);
    h ^= h >>> 13;
    h = caml_mul(h, 0xc2b2ae35 | 0);
    h ^= h >>> 16;
    return h;
   }
   function caml_hash(count, limit, seed, obj){
    var queue, rd, wr, sz, num, h, v, i, len;
    sz = limit;
    if(sz < 0 || sz > 256) sz = 256;
    num = count;
    h = seed;
    queue = [obj];
    rd = 0;
    wr = 1;
    while(rd < wr && num > 0){
     v = queue[rd++];
     if(v && v.caml_custom){
      if
       (caml_custom_ops[v.caml_custom] && caml_custom_ops[v.caml_custom].hash){
       var hh = caml_custom_ops[v.caml_custom].hash(v);
       h = caml_hash_mix_int(h, hh);
       num--;
      }
     }
     else if(v instanceof Array && v[0] === (v[0] | 0))
      switch(v[0]){
        case 248:
         h = caml_hash_mix_int(h, v[2]); num--; break;
        case 250:
         queue[--rd] = v[1]; break;
        default:
         if(caml_is_continuation_tag(v[0])) break;
         var tag = v.length - 1 << 10 | v[0];
         h = caml_hash_mix_int(h, tag);
         for(i = 1, len = v.length; i < len; i++){if(wr >= sz) break; queue[wr++] = v[i];
         }
         break;
      }
     else if(caml_is_ml_bytes(v)){
      h = caml_hash_mix_bytes(h, v);
      num--;
     }
     else if(caml_is_ml_string(v)){
      h = caml_hash_mix_string(h, v);
      num--;
     }
     else if(typeof v === "string"){
      h = caml_hash_mix_jsbytes(h, v);
      num--;
     }
     else if(v === (v | 0)){
      h = caml_hash_mix_int(h, v + v + 1);
      num--;
     }
     else if(typeof v === "number"){h = caml_hash_mix_float(h, v); num--;}
    }
    h = caml_hash_mix_final(h);
    return h & 0x3FFFFFFF;
   }
   function caml_hexstring_of_float(x, prec, style){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_string_of_jsstring("nan");
     return caml_string_of_jsstring(x > 0 ? "infinity" : "-infinity");
    }
    var sign = x == 0 && 1 / x == - Infinity ? 1 : x >= 0 ? 0 : 1;
    if(sign) x = - x;
    var exp = 0;
    if(x == 0)
     ;
    else if(x < 1)
     while(x < 1 && exp > - 1022){x *= 2; exp--;}
    else
     while(x >= 2){x /= 2; exp++;}
    var exp_sign = exp < 0 ? "" : "+", sign_str = "";
    if(sign)
     sign_str = "-";
    else
     switch(style){
       case 43:
        sign_str = "+"; break;
       case 32:
        sign_str = " "; break;
       default: break;
     }
    if(prec >= 0 && prec < 13){
     var cst = Math.pow(2, prec * 4);
     x = Math.round(x * cst) / cst;
    }
    var x_str = x.toString(16);
    if(prec >= 0){
     var idx = x_str.indexOf(".");
     if(idx < 0)
      x_str += "." + caml_str_repeat(prec, "0");
     else{
      var size = idx + 1 + prec;
      if(x_str.length < size)
       x_str += caml_str_repeat(size - x_str.length, "0");
      else
       x_str = x_str.substr(0, size);
     }
    }
    return caml_string_of_jsstring
            (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10));
   }
   function caml_int64_is_zero(x){return + x.isZero();}
   function caml_int64_of_int32(x){
    return new MlInt64(x & 0xffffff, x >> 24 & 0xffffff, x >> 31 & 0xffff);
   }
   function caml_int64_to_int32(x){return x.toInt();}
   function caml_int64_is_negative(x){return + x.isNeg();}
   function caml_int64_neg(x){return x.neg();}
   function caml_int64_format(fmt, x){
    var f = caml_parse_format(fmt);
    if(f.signedconv && caml_int64_is_negative(x)){f.sign = - 1; x = caml_int64_neg(x);}
    var
     buffer = "",
     wbase = caml_int64_of_int32(f.base),
     cvtbl = "0123456789abcdef";
    do{
     var p = x.udivmod(wbase);
     x = p.quotient;
     buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer;
    }
    while
     (! caml_int64_is_zero(x));
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - buffer.length;
     if(n > 0) buffer = caml_str_repeat(n, "0") + buffer;
    }
    return caml_finish_formatting(f, buffer);
   }
   function caml_int64_or(x, y){return x.or(y);}
   function caml_parse_sign_and_base(s){
    var i = 0, len = caml_ml_string_length(s), base = 10, sign = 1;
    if(len > 0)
     switch(caml_string_unsafe_get(s, i)){
       case 45:
        i++; sign = - 1; break;
       case 43:
        i++; sign = 1; break;
     }
    if(i + 1 < len && caml_string_unsafe_get(s, i) == 48)
     switch(caml_string_unsafe_get(s, i + 1)){
       case 120:
       case 88:
        base = 16; i += 2; break;
       case 111:
       case 79:
        base = 8; i += 2; break;
       case 98:
       case 66:
        base = 2; i += 2; break;
       case 117:
       case 85:
        i += 2; break;
     }
    return [i, sign, base];
   }
   function caml_parse_digit(c){
    if(c >= 48 && c <= 57) return c - 48;
    if(c >= 65 && c <= 90) return c - 55;
    if(c >= 97 && c <= 122) return c - 87;
    return - 1;
   }
   function caml_int_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     len = caml_ml_string_length(s),
     threshold = - 1 >>> 0,
     c = i < len ? caml_string_unsafe_get(s, i) : 0,
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("int_of_string");
    var res = d;
    for(i++; i < len; i++){
     c = caml_string_unsafe_get(s, i);
     if(c == 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     res = base * res + d;
     if(res > threshold) caml_failwith("int_of_string");
    }
    if(i != len) caml_failwith("int_of_string");
    res = sign * res;
    if(base == 10 && (res | 0) != res) caml_failwith("int_of_string");
    return res | 0;
   }
   function caml_js_call(f, o, args){
    return f.apply(o, caml_js_from_array(args));
   }
   function caml_js_get_console(){
    var
     c = console,
     m =
       ["log",
        "debug",
        "info",
        "warn",
        "error",
        "assert",
        "dir",
        "dirxml",
        "trace",
        "group",
        "groupCollapsed",
        "groupEnd",
        "time",
        "timeEnd"];
    function f(){}
    for(var i = 0; i < m.length; i++) if(! c[m[i]]) c[m[i]] = f;
    return c;
   }
   function caml_js_on_ie(){
    var
     ua =
       globalThis.navigator && globalThis.navigator.userAgent
        ? globalThis.navigator.userAgent
        : "";
    return ua.indexOf("MSIE") != - 1 && ua.indexOf("Opera") != 0;
   }
   var caml_callback = caml_call_gen;
   function caml_js_wrap_callback(f){
    return function(){
     var len = arguments.length;
     if(len > 0){
      var args = new Array(len);
      for(var i = 0; i < len; i++) args[i] = arguments[i];
     }
     else
      args = [undefined];
     var res = caml_callback(f, args);
     return res instanceof Function ? caml_js_wrap_callback(res) : res;};
   }
   function caml_js_function_arity(f){return f.l >= 0 ? f.l : f.l = f.length;}
   function caml_js_wrap_callback_unsafe(f){
    return function(){
     var len = caml_js_function_arity(f), args = new Array(len);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_js_wrap_meth_callback(f){
    return function(){
     var len = arguments.length, args = new Array(len + 1);
     args[0] = this;
     for(var i = 0; i < len; i++) args[i + 1] = arguments[i];
     var res = caml_callback(f, args);
     return res instanceof Function ? caml_js_wrap_callback(res) : res;};
   }
   function caml_obj_update_tag(b, o, n){
    if(b[0] == o){b[0] = n; return 1;}
    return 0;
   }
   function caml_lazy_reset_to_lazy(o){
    caml_obj_update_tag(o, 244, 246);
    return 0;
   }
   function caml_lazy_update_to_forcing(o){
    return o instanceof Array && o[0] == o[0] >>> 0
            && caml_obj_update_tag(o, 246, 244)
            ? 0
            : 1;
   }
   function caml_lazy_update_to_forward(o){
    caml_obj_update_tag(o, 244, 250);
    return 0;
   }
   function caml_lessequal(x, y){
    return + (caml_compare_val(x, y, false) <= 0);
   }
   function caml_new_string(s){return caml_string_of_jsbytes(s);}
   function caml_int64_add(x, y){return x.add(y);}
   function caml_int64_mul(x, y){return x.mul(y);}
   function caml_int64_ult(x, y){return x.ucompare(y) < 0;}
   function caml_int64_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     base64 = caml_int64_of_int32(base),
     threshold =
       new MlInt64(0xffffff, 0xfffffff, 0xffff).udivmod(base64).quotient,
     c = caml_string_unsafe_get(s, i),
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("int_of_string");
    var res = caml_int64_of_int32(d);
    for(;;){
     i++;
     c = caml_string_unsafe_get(s, i);
     if(c == 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     if(caml_int64_ult(threshold, res)) caml_failwith("int_of_string");
     d = caml_int64_of_int32(d);
     res = caml_int64_add(caml_int64_mul(base64, res), d);
     if(caml_int64_ult(res, d)) caml_failwith("int_of_string");
    }
    if(i != caml_ml_string_length(s)) caml_failwith("int_of_string");
    if(base == 10 && caml_int64_ult(new MlInt64(0, 0, 0x8000), res))
     caml_failwith("int_of_string");
    if(sign < 0) res = caml_int64_neg(res);
    return res;
   }
   function caml_ba_get_1(ba, i0){return ba.get(ba.offset(i0));}
   function caml_int64_xor(x, y){return x.xor(y);}
   function caml_int64_shift_right_unsigned(x, s){return x.shift_right_unsigned(s);
   }
   function caml_int64_shift_left(x, s){return x.shift_left(s);}
   function caml_lxm_next(v){
    function shift_l(x, k){return caml_int64_shift_left(x, k);}
    function shift_r(x, k){return caml_int64_shift_right_unsigned(x, k);}
    function or(a, b){return caml_int64_or(a, b);}
    function xor(a, b){return caml_int64_xor(a, b);}
    function add(a, b){return caml_int64_add(a, b);}
    function mul(a, b){return caml_int64_mul(a, b);}
    function rotl(x, k){return or(shift_l(x, k), shift_r(x, 64 - k));}
    function get(a, i){return caml_ba_get_1(a, i);}
    function set(a, i, x){return caml_ba_set_1(a, i, x);}
    var
     M = caml_int64_of_string(caml_new_string("0xd1342543de82ef95")),
     daba = caml_int64_of_string(caml_new_string("0xdaba0b6eb09322e3")),
     z,
     q0,
     q1,
     st = v,
     a = get(st, 0),
     s = get(st, 1),
     x0 = get(st, 2),
     x1 = get(st, 3);
    z = add(s, x0);
    z = mul(xor(z, shift_r(z, 32)), daba);
    z = mul(xor(z, shift_r(z, 32)), daba);
    z = xor(z, shift_r(z, 32));
    set(st, 1, add(mul(s, M), a));
    var q0 = x0, q1 = x1;
    q1 = xor(q1, q0);
    q0 = rotl(q0, 24);
    q0 = xor(xor(q0, q1), shift_l(q1, 16));
    q1 = rotl(q1, 37);
    set(st, 2, q0);
    set(st, 3, q1);
    return z;
   }
   function caml_make_vect(len, init){
    if(len < 0) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 0;
    for(var i = 1; i < len; i++) b[i] = init;
    return b;
   }
   function caml_MD5Init(){
    var
     buffer = new ArrayBuffer(64),
     b32 = new Uint32Array(buffer),
     b8 = new Uint8Array(buffer);
    return {len: 0,
            w:
            new Uint32Array([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476]),
            b32: b32,
            b8: b8};
   }
   var
    caml_MD5Transform =
      function(){
        function add(x, y){return x + y | 0;}
        function xx(q, a, b, x, s, t){
         a = add(add(a, q), add(x, t));
         return add(a << s | a >>> 32 - s, b);
        }
        function ff(a, b, c, d, x, s, t){
         return xx(b & c | ~ b & d, a, b, x, s, t);
        }
        function gg(a, b, c, d, x, s, t){
         return xx(b & d | c & ~ d, a, b, x, s, t);
        }
        function hh(a, b, c, d, x, s, t){return xx(b ^ c ^ d, a, b, x, s, t);}
        function ii(a, b, c, d, x, s, t){
         return xx(c ^ (b | ~ d), a, b, x, s, t);
        }
        return function(w, buffer){
         var a = w[0], b = w[1], c = w[2], d = w[3];
         a = ff(a, b, c, d, buffer[0], 7, 0xD76AA478);
         d = ff(d, a, b, c, buffer[1], 12, 0xE8C7B756);
         c = ff(c, d, a, b, buffer[2], 17, 0x242070DB);
         b = ff(b, c, d, a, buffer[3], 22, 0xC1BDCEEE);
         a = ff(a, b, c, d, buffer[4], 7, 0xF57C0FAF);
         d = ff(d, a, b, c, buffer[5], 12, 0x4787C62A);
         c = ff(c, d, a, b, buffer[6], 17, 0xA8304613);
         b = ff(b, c, d, a, buffer[7], 22, 0xFD469501);
         a = ff(a, b, c, d, buffer[8], 7, 0x698098D8);
         d = ff(d, a, b, c, buffer[9], 12, 0x8B44F7AF);
         c = ff(c, d, a, b, buffer[10], 17, 0xFFFF5BB1);
         b = ff(b, c, d, a, buffer[11], 22, 0x895CD7BE);
         a = ff(a, b, c, d, buffer[12], 7, 0x6B901122);
         d = ff(d, a, b, c, buffer[13], 12, 0xFD987193);
         c = ff(c, d, a, b, buffer[14], 17, 0xA679438E);
         b = ff(b, c, d, a, buffer[15], 22, 0x49B40821);
         a = gg(a, b, c, d, buffer[1], 5, 0xF61E2562);
         d = gg(d, a, b, c, buffer[6], 9, 0xC040B340);
         c = gg(c, d, a, b, buffer[11], 14, 0x265E5A51);
         b = gg(b, c, d, a, buffer[0], 20, 0xE9B6C7AA);
         a = gg(a, b, c, d, buffer[5], 5, 0xD62F105D);
         d = gg(d, a, b, c, buffer[10], 9, 0x02441453);
         c = gg(c, d, a, b, buffer[15], 14, 0xD8A1E681);
         b = gg(b, c, d, a, buffer[4], 20, 0xE7D3FBC8);
         a = gg(a, b, c, d, buffer[9], 5, 0x21E1CDE6);
         d = gg(d, a, b, c, buffer[14], 9, 0xC33707D6);
         c = gg(c, d, a, b, buffer[3], 14, 0xF4D50D87);
         b = gg(b, c, d, a, buffer[8], 20, 0x455A14ED);
         a = gg(a, b, c, d, buffer[13], 5, 0xA9E3E905);
         d = gg(d, a, b, c, buffer[2], 9, 0xFCEFA3F8);
         c = gg(c, d, a, b, buffer[7], 14, 0x676F02D9);
         b = gg(b, c, d, a, buffer[12], 20, 0x8D2A4C8A);
         a = hh(a, b, c, d, buffer[5], 4, 0xFFFA3942);
         d = hh(d, a, b, c, buffer[8], 11, 0x8771F681);
         c = hh(c, d, a, b, buffer[11], 16, 0x6D9D6122);
         b = hh(b, c, d, a, buffer[14], 23, 0xFDE5380C);
         a = hh(a, b, c, d, buffer[1], 4, 0xA4BEEA44);
         d = hh(d, a, b, c, buffer[4], 11, 0x4BDECFA9);
         c = hh(c, d, a, b, buffer[7], 16, 0xF6BB4B60);
         b = hh(b, c, d, a, buffer[10], 23, 0xBEBFBC70);
         a = hh(a, b, c, d, buffer[13], 4, 0x289B7EC6);
         d = hh(d, a, b, c, buffer[0], 11, 0xEAA127FA);
         c = hh(c, d, a, b, buffer[3], 16, 0xD4EF3085);
         b = hh(b, c, d, a, buffer[6], 23, 0x04881D05);
         a = hh(a, b, c, d, buffer[9], 4, 0xD9D4D039);
         d = hh(d, a, b, c, buffer[12], 11, 0xE6DB99E5);
         c = hh(c, d, a, b, buffer[15], 16, 0x1FA27CF8);
         b = hh(b, c, d, a, buffer[2], 23, 0xC4AC5665);
         a = ii(a, b, c, d, buffer[0], 6, 0xF4292244);
         d = ii(d, a, b, c, buffer[7], 10, 0x432AFF97);
         c = ii(c, d, a, b, buffer[14], 15, 0xAB9423A7);
         b = ii(b, c, d, a, buffer[5], 21, 0xFC93A039);
         a = ii(a, b, c, d, buffer[12], 6, 0x655B59C3);
         d = ii(d, a, b, c, buffer[3], 10, 0x8F0CCC92);
         c = ii(c, d, a, b, buffer[10], 15, 0xFFEFF47D);
         b = ii(b, c, d, a, buffer[1], 21, 0x85845DD1);
         a = ii(a, b, c, d, buffer[8], 6, 0x6FA87E4F);
         d = ii(d, a, b, c, buffer[15], 10, 0xFE2CE6E0);
         c = ii(c, d, a, b, buffer[6], 15, 0xA3014314);
         b = ii(b, c, d, a, buffer[13], 21, 0x4E0811A1);
         a = ii(a, b, c, d, buffer[4], 6, 0xF7537E82);
         d = ii(d, a, b, c, buffer[11], 10, 0xBD3AF235);
         c = ii(c, d, a, b, buffer[2], 15, 0x2AD7D2BB);
         b = ii(b, c, d, a, buffer[9], 21, 0xEB86D391);
         w[0] = add(a, w[0]);
         w[1] = add(b, w[1]);
         w[2] = add(c, w[2]);
         w[3] = add(d, w[3]);};
       }
       ();
   function caml_MD5Update(ctx, input, input_len){
    var in_buf = ctx.len & 0x3f, input_pos = 0;
    ctx.len += input_len;
    if(in_buf){
     var missing = 64 - in_buf;
     if(input_len < missing){
      ctx.b8.set(input.subarray(0, input_len), in_buf);
      return;
     }
     ctx.b8.set(input.subarray(0, missing), in_buf);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= missing;
     input_pos += missing;
    }
    while(input_len >= 64){
     ctx.b8.set(input.subarray(input_pos, input_pos + 64), 0);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= 64;
     input_pos += 64;
    }
    if(input_len)
     ctx.b8.set(input.subarray(input_pos, input_pos + input_len), 0);
   }
   function caml_MD5Final(ctx){
    var in_buf = ctx.len & 0x3f;
    ctx.b8[in_buf] = 0x80;
    in_buf++;
    if(in_buf > 56){
     for(var j = in_buf; j < 64; j++) ctx.b8[j] = 0;
     caml_MD5Transform(ctx.w, ctx.b32);
     for(var j = 0; j < 56; j++) ctx.b8[j] = 0;
    }
    else
     for(var j = in_buf; j < 56; j++) ctx.b8[j] = 0;
    ctx.b32[14] = ctx.len << 3;
    ctx.b32[15] = ctx.len >> 29 & 0x1FFFFFFF;
    caml_MD5Transform(ctx.w, ctx.b32);
    var t = new Uint8Array(16);
    for(var i = 0; i < 4; i++)
     for(var j = 0; j < 4; j++) t[i * 4 + j] = ctx.w[i] >> 8 * j & 0xFF;
    return t;
   }
   function caml_string_of_array(a){
    return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a, 0, a.length));
   }
   function caml_md5_bytes(s, ofs, len){
    var ctx = caml_MD5Init(), a = caml_uint8_array_of_bytes(s);
    caml_MD5Update(ctx, a.subarray(ofs, ofs + len), len);
    return caml_string_of_array(caml_MD5Final(ctx));
   }
   function caml_md5_string(s, ofs, len){
    return caml_md5_bytes(caml_bytes_of_string(s), ofs, len);
   }
   function caml_ml_debug_info_status(){return 0;}
   var caml_ml_channels = new Array();
   function caml_ml_flush(chanid){
    var chan = caml_ml_channels[chanid];
    if(! chan.opened) caml_raise_sys_error("Cannot flush a closed channel");
    if(! chan.buffer || chan.buffer_curr == 0) return 0;
    if(chan.output)
     chan.output(caml_subarray_to_jsbytes(chan.buffer, 0, chan.buffer_curr));
    else
     chan.file.write(chan.offset, chan.buffer, 0, chan.buffer_curr);
    chan.offset += chan.buffer_curr;
    chan.buffer_curr = 0;
    return 0;
   }
   function caml_sys_open_for_node(fd, flags){
    if(flags.name)
     try{
      var fs = require("fs"), fd2 = fs.openSync(flags.name, "rs");
      return new MlNodeFd(fd2, flags);
     }
     catch(e){}
    return new MlNodeFd(fd, flags);
   }
   var caml_sys_fds = new Array(3);
   function MlFakeFd_out(fd, flags){
    MlFakeFile.call(this, caml_create_bytes(0));
    this.log = function(s){return 0;};
    if(fd == 1 && typeof console.log == "function")
     this.log = console.log;
    else if(fd == 2 && typeof console.error == "function")
     this.log = console.error;
    else if(typeof console.log == "function") this.log = console.log;
    this.flags = flags;
   }
   MlFakeFd_out.prototype.length = function(){return 0;};
   MlFakeFd_out.prototype.write =
    function(offset, buf, pos, len){
     if(this.log){
      if
       (len > 0 && pos >= 0 && pos + len <= buf.length
        && buf[pos + len - 1] == 10)
       len--;
      var src = caml_create_bytes(len);
      caml_blit_bytes(caml_bytes_of_array(buf), pos, src, 0, len);
      this.log(src.toUtf16());
      return 0;
     }
     caml_raise_sys_error(this.fd + ": file descriptor already closed");
    };
   MlFakeFd_out.prototype.read =
    function(offset, buf, pos, len){
     caml_raise_sys_error(this.fd + ": file descriptor is write only");
    };
   MlFakeFd_out.prototype.close = function(){this.log = undefined;};
   function caml_sys_open_internal(file, idx){
    if(idx == undefined) idx = caml_sys_fds.length;
    caml_sys_fds[idx] = file;
    return idx | 0;
   }
   function caml_sys_open(name, flags, _perms){
    var f = {};
    while(flags){
     switch(flags[1]){
       case 0:
        f.rdonly = 1; break;
       case 1:
        f.wronly = 1; break;
       case 2:
        f.append = 1; break;
       case 3:
        f.create = 1; break;
       case 4:
        f.truncate = 1; break;
       case 5:
        f.excl = 1; break;
       case 6:
        f.binary = 1; break;
       case 7:
        f.text = 1; break;
       case 8:
        f.nonblock = 1; break;
     }
     flags = flags[2];
    }
    if(f.rdonly && f.wronly)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_rdonly and Open_wronly are not compatible");
    if(f.text && f.binary)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_text and Open_binary are not compatible");
    var root = resolve_fs_device(name), file = root.device.open(root.rest, f);
    return caml_sys_open_internal(file, undefined);
   }
   (function(){
      function file(fd, flags){
       return fs_node_supported()
               ? caml_sys_open_for_node(fd, flags)
               : new MlFakeFd_out(fd, flags);
      }
      caml_sys_open_internal
       (file(0, {rdonly: 1, altname: "/dev/stdin", isCharacterDevice: true}),
        0);
      caml_sys_open_internal
       (file(1, {buffered: 2, wronly: 1, isCharacterDevice: true}), 1);
      caml_sys_open_internal
       (file(2, {buffered: 2, wronly: 1, isCharacterDevice: true}), 2);
     }
     ());
   function caml_ml_open_descriptor_in(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.wronly) caml_raise_sys_error("fd " + fd + " is writeonly");
    var
     refill = null,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: false,
        buffer_curr: 0,
        buffer_max: 0,
        buffer: new Uint8Array(65536),
        refill: refill};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_ml_open_descriptor_out(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.rdonly) caml_raise_sys_error("fd " + fd + " is readonly");
    var
     buffered = file.flags.buffered !== undefined ? file.flags.buffered : 1,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: true,
        buffer_curr: 0,
        buffer: new Uint8Array(65536),
        buffered: buffered};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_ml_out_channels_list(){
    var l = 0;
    for(var c = 0; c < caml_ml_channels.length; c++)
     if
      (caml_ml_channels[c] && caml_ml_channels[c].opened
       && caml_ml_channels[c].out)
      l = [0, caml_ml_channels[c].fd, l];
    return l;
   }
   function caml_string_of_bytes(s){
    s.t & 6 && caml_convert_string_to_bytes(s);
    return caml_string_of_jsbytes(s.c);
   }
   function caml_ml_output_bytes(chanid, buffer, offset, len){
    var chan = caml_ml_channels[chanid];
    if(! chan.opened)
     caml_raise_sys_error("Cannot output to a closed channel");
    var buffer = caml_uint8_array_of_bytes(buffer);
    buffer = buffer.subarray(offset, offset + len);
    if(chan.buffer_curr + buffer.length > chan.buffer.length){
     var b = new Uint8Array(chan.buffer_curr + buffer.length);
     b.set(chan.buffer);
     chan.buffer = b;
    }
    switch(chan.buffered){
      case 0:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       caml_ml_flush(chanid);
       break;
      case 1:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       break;
      case 2:
       var id = buffer.lastIndexOf(10);
       if(id < 0){
        chan.buffer.set(buffer, chan.buffer_curr);
        chan.buffer_curr += buffer.length;
        if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       }
       else{
        chan.buffer.set(buffer.subarray(0, id + 1), chan.buffer_curr);
        chan.buffer_curr += id + 1;
        caml_ml_flush(chanid);
        chan.buffer.set(buffer.subarray(id + 1), chan.buffer_curr);
        chan.buffer_curr += buffer.length - id - 1;
       }
       break;
    }
    return 0;
   }
   function caml_ml_output(chanid, buffer, offset, len){
    return caml_ml_output_bytes
            (chanid, caml_bytes_of_string(buffer), offset, len);
   }
   function caml_ml_output_char(chanid, c){
    var s = caml_string_of_jsbytes(String.fromCharCode(c));
    caml_ml_output(chanid, s, 0, 1);
    return 0;
   }
   function caml_notequal(x, y){
    return + (caml_compare_val(x, y, false) != 0);
   }
   function caml_obj_tag(x){
    if(x instanceof Array && x[0] == x[0] >>> 0)
     return x[0];
    else if(caml_is_ml_bytes(x))
     return 252;
    else if(caml_is_ml_string(x))
     return 252;
    else if(x instanceof Function || typeof x == "function")
     return 247;
    else if(x && x.caml_custom) return 255; else return 1000;
   }
   function caml_read_file_content(name){
    var
     name = typeof name == "string" ? caml_string_of_jsbytes(name) : name,
     root = resolve_fs_device(name);
    if(root.device.exists(root.rest)){
     var
      file = root.device.open(root.rest, {rdonly: 1}),
      len = file.length(),
      buf = new Uint8Array(len);
     file.read(0, buf, 0, len);
     return caml_string_of_array(buf);
    }
    caml_raise_no_such_file(caml_jsbytes_of_string(name));
   }
   function caml_build_symbols(toc){
    var symb;
    while(toc)
     if(caml_jsstring_of_string(toc[1][1]) == "SYJS"){symb = toc[1][2]; break;}
     else
      toc = toc[2];
    var r = {};
    if(symb)
     for(var i = 1; i < symb.length; i++)
      r[caml_jsstring_of_string(symb[i][1])] = symb[i][2];
    return r;
   }
   function caml_register_global(n, v, name_opt){
    if(name_opt){
     var name = name_opt;
     if(globalThis.toplevelReloc)
      n = caml_callback(globalThis.toplevelReloc, [name]);
     else if(caml_global_data.toc){
      if(! caml_global_data.symbols)
       caml_global_data.symbols = caml_build_symbols(caml_global_data.toc);
      var nid = caml_global_data.symbols[name];
      if(nid >= 0)
       n = nid;
      else
       caml_failwith("caml_register_global: cannot locate " + name);
     }
    }
    caml_global_data[n + 1] = v;
    if(name_opt) caml_global_data[name_opt] = v;
   }
   function caml_register_named_value(nm, v){
    caml_named_values[caml_jsbytes_of_string(nm)] = v;
    return 0;
   }
   function caml_string_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_string_get(s, i){
    if(i >>> 0 >= caml_ml_string_length(s)) caml_string_bound_error();
    return caml_string_unsafe_get(s, i);
   }
   function caml_string_equal(s1, s2){if(s1 === s2) return 1; return 0;}
   function caml_string_notequal(s1, s2){
    return 1 - caml_string_equal(s1, s2);
   }
   function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0;}
   function caml_sys_exit(code){
    if(globalThis.quit) globalThis.quit(code);
    if(globalThis.process && globalThis.process.exit)
     globalThis.process.exit(code);
    caml_invalid_argument("Function 'exit' not implemented");
   }
   function caml_raise_not_found(){
    caml_raise_constant(caml_global_data.Not_found);
   }
   function caml_sys_getenv(name){
    var r = jsoo_sys_getenv(caml_jsstring_of_string(name));
    if(r === undefined) caml_raise_not_found();
    return caml_string_of_jsstring(r);
   }
   function caml_sys_random_seed(){
    if(globalThis.crypto)
     if(globalThis.crypto.getRandomValues){
      var a = globalThis.crypto.getRandomValues(new Int32Array(4));
      return [0, a[0], a[1], a[2], a[3]];
     }
     else if(globalThis.crypto.randomBytes){
      var a = new Int32Array(globalThis.crypto.randomBytes(16).buffer);
      return [0, a[0], a[1], a[2], a[3]];
     }
    var now = new Date().getTime(), x = now ^ 0xffffffff * Math.random();
    return [0, x];
   }
   function caml_trampoline(res){
    var c = 1;
    while(res && res.joo_tramp){
     res = res.joo_tramp.apply(null, res.joo_args);
     c++;
    }
    return res;
   }
   function caml_trampoline_return(f, args){return {joo_tramp: f, joo_args: args};
   }
   function caml_update_dummy(x, y){
    if(y.fun){x.fun = y.fun; return 0;}
    if(typeof y === "function"){x.fun = y; return 0;}
    var i = y.length;
    while(i--) x[i] = y[i];
    return 0;
   }
   function caml_wrap_exception(e){
    {
     if(e instanceof Array) return e;
     var exn;
     if
      (globalThis.RangeError && e instanceof globalThis.RangeError
       && e.message
       && e.message.match(/maximum call stack/i))
      exn = caml_global_data.Stack_overflow;
     else if
      (globalThis.InternalError && e instanceof globalThis.InternalError
       && e.message
       && e.message.match(/too much recursion/i))
      exn = caml_global_data.Stack_overflow;
     else if(e instanceof globalThis.Error && caml_named_value("jsError"))
      exn = [0, caml_named_value("jsError"), e];
     else
      exn = [0, caml_global_data.Failure, caml_string_of_jsstring(String(e))];
     if(e instanceof globalThis.Error) exn.js_error = e;
     return exn;
    }
   }
   function caml_xmlhttprequest_create(unit){
    if(typeof globalThis.XMLHttpRequest !== "undefined")
     try{return new globalThis.XMLHttpRequest;}catch(e){}
    if(typeof globalThis.activeXObject !== "undefined"){
     try{return new globalThis.activeXObject("Msxml2.XMLHTTP");}catch(e){}
     try{return new globalThis.activeXObject("Msxml3.XMLHTTP");}catch(e){}
     try{return new globalThis.activeXObject("Microsoft.XMLHTTP");}catch(e){}
    }
    caml_failwith("Cannot create a XMLHttpRequest");
   }
   function caml_is_special_exception(exn){
    switch(exn[2]){case - 8:case - 11:case - 12: return 1;default: return 0;
    }
   }
   function caml_format_exception(exn){
    var r = "";
    if(exn[0] == 0){
     r += exn[1][1];
     if
      (exn.length == 3 && exn[2][0] == 0 && caml_is_special_exception(exn[1]))
      var bucket = exn[2], start = 1;
     else
      var start = 2, bucket = exn;
     r += "(";
     for(var i = start; i < bucket.length; i++){
      if(i > start) r += ", ";
      var v = bucket[i];
      if(typeof v == "number")
       r += v.toString();
      else if(v instanceof MlBytes)
       r += '"' + v.toString() + '"';
      else if(typeof v == "string")
       r += '"' + v.toString() + '"';
      else
       r += "_";
     }
     r += ")";
    }
    else if(exn[0] == 248) r += exn[1];
    return r;
   }
   function caml_fatal_uncaught_exception(err){
    if(err instanceof Array && (err[0] == 0 || err[0] == 248)){
     var handler = caml_named_value("Printexc.handle_uncaught_exception");
     if(handler)
      caml_callback(handler, [err, false]);
     else{
      var
       msg = caml_format_exception(err),
       at_exit = caml_named_value("Pervasives.do_at_exit");
      if(at_exit) caml_callback(at_exit, [0]);
      console.error("Fatal error: exception " + msg + "\n");
      if(err.js_error) throw err.js_error;
     }
    }
    else
     throw err;
   }
   function caml_setup_uncaught_exception_handler(){
    var process = globalThis.process;
    if(process && process.on)
     process.on
      ("uncaughtException",
       function(err, origin){
        caml_fatal_uncaught_exception(err);
        process.exit(2);
       });
    else if(globalThis.addEventListener)
     globalThis.addEventListener
      ("error",
       function(event){
        if(event.error) caml_fatal_uncaught_exception(event.error);
       });
   }
   caml_setup_uncaught_exception_handler();
   var
    cst$2 = "",
    cst_Li = "%Li",
    cst_d = "%d",
    cst_i = "%i",
    cst_li = "%li",
    cst_ni = "%ni",
    cst_u = "%u",
    cst$3 = "+",
    cst_characters = ", characters ",
    cst = ".",
    cst_jpg = ".jpg",
    cst_0 = "0",
    cst_0px = "0px",
    cst_100 = "100%",
    cst_2d = "2d",
    cst_2px = "2px",
    cst_36px = "36px",
    cst_38px = "38px",
    cst_48px = "48px",
    cst_80 = "80%",
    cst$1 = "@[",
    cst$0 = "@{",
    cst_Assert_failure = "Assert_failure",
    cst_Division_by_zero = "Division_by_zero",
    cst_End_of_file = "End_of_file",
    cst_Failure = "Failure",
    cst_Fatal_error_exception = "Fatal error: exception ",
    cst_Fatal_error_exception_s = "Fatal error: exception %s\n",
    cst_In_English = "In English",
    cst_Invalid_argument = "Invalid_argument",
    cst_Lwt = "Lwt.",
    cst_Lwt_s = "Lwt.%s",
    cst_Match_failure = "Match_failure",
    cst_Not_found = "Not_found",
    cst_Out_of_memory = "Out_of_memory",
    cst_Stack_overflow = "Stack_overflow",
    cst_Sys_blocked_io = "Sys_blocked_io",
    cst_Sys_error = "Sys_error",
    cst_Undefined_recursive_module = "Undefined_recursive_module",
    cst_blank = "_blank",
    cst_absolute = "absolute",
    cst_auto = "auto",
    cst_block = "block",
    cst_button = "button",
    cst_camlinternalFormat_ml = "camlinternalFormat.ml",
    cst_center = "center",
    cst_commons_38_png = "commons-38.png",
    cst_draw = "draw",
    cst_en = "en",
    cst_false = "false",
    cst_g = "g",
    cst_globe_38_png = "globe-38.png",
    cst_hidden = "hidden",
    cst_hyp_lang = "hyp_lang",
    cst_info_38_png = "info-38.png",
    cst_meeting_point_38_png = "meeting-point-38.png",
    cst_middle = "middle",
    cst_move = "move",
    cst_nowrap = "nowrap",
    cst_ocsigen_powered_png = "ocsigen-powered.png",
    cst_off = "off",
    cst_on = "on",
    cst_overlay = "overlay",
    cst_pointer = "pointer",
    cst_px = "px",
    cst_table = "table",
    cst_table_cell = "table-cell",
    cst_text = "text",
    cst_text_on = "text on",
    cst_transform = "transform",
    cst_true = "true",
    cst_wikipedia_38_png = "wikipedia-38.png";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   jsoo_create_file
    ("/static/image_info.json",
     '[0,[0,"ovibos","Ovibos_moschatus_attackierend2_.jpg","By BS Thurner Hof [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a>]",800,489,[0,[0,"Ovibovini","fr",""],[0,"B\xc5\x93uf musqu\xc3\xa9","fr","B%C5%93uf_musqu%C3%A9"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Ovibos_moschatus_attackierend2_.jpg/800px-Ovibos_moschatus_attackierend2_.jpg"]],[0,"capra","Saanenziege.jpg","Author information on Wikimedia Commons [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/2.5-2.0-1.0\\">CC-BY-SA-2.5-2.0-1.0<\/a>]",332,257,[0,[0,"Tan (goat pattern)","en","Tan_(goat_pattern)"],[0,"Saanen goat","en","Saanen_goat"],[0,"Saanen (race caprine)","fr","Saanen_(race_caprine)"],[0,"Ch\xc3\xa8vre","fr","Ch%C3%A8vre"],[0,"P\xc3\xa9lardon","fr","P%C3%A9lardon"],[0,"Rocamadour (fromage)","fr","Rocamadour_(fromage)"]],[0,"http://upload.wikimedia.org/wikipedia/commons/f/f5/Saanenziege.jpg"]],[0,"rupicapra","Rupicapra_rupicapra_0.jpg","By Andreas Tille [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0-2.5-2.0-1.0<\/a>]",800,640,[0,[0,"Rupicapra","en",""],[0,"Alps","en",""],[0,"Lac du Crachet","fr","Lac_du_Crachet"],[0,"Val Trupchun","fr","Val_Trupchun"],[0,"Chamois","fr",""],[0,"Alpes","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/f/f1/Rupicapra_rupicapra_0.jpg/800px-Rupicapra_rupicapra_0.jpg"]],[0,"mouton","Schaf_bei_Woodhenge1.jpg","Author information on Wikimedia Commons [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a>]",800,600,[0,[0,"Ovis","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Schaf_bei_Woodhenge1.jpg/800px-Schaf_bei_Woodhenge1.jpg"]],[0,"mouflon","Mouflon_2.jpg","<a target=\\"_blank\\" href=\\"http://en.wikipedia.org/wiki/User:Jdennett77\\">Jdennett77<\/a> [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by/2.5\\">CC-BY-2.5<\/a>]",800,598,[0,[0,"Ovis","en",""],[0,"Mouflon","en",""],[0,"Ovina","fr",""],[0,"Ovis orientalis","fr","Ovis_orientalis"],[0,"Ovis","fr",""],[0,"Mouflon m\xc3\xa9diterran\xc3\xa9en","fr","Mouflon_m%C3%A9diterran%C3%A9en"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/7/74/Mouflon_2.jpg/800px-Mouflon_2.jpg"]],[0,"connochaetes","Wildebeest_Steve_Evans.jpg","By Steve Evans from Citizen of the World (South Africa) [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by/2.0\\">CC-BY-2.0<\/a>]",800,533,[0,[0,"Gnou","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Wildebeest_Steve_Evans.jpg/800px-Wildebeest_Steve_Evans.jpg"]],[0,"oryx","Oryx_samburu.jpg","By \\"Daniel Fafard (Dreamdan)\\" (Auteur) [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0-2.5-2.0-1.0<\/a>]",800,545,[0,[0,"Oryx","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/1/1d/Oryx_samburu.jpg/800px-Oryx_samburu.jpg"]],[0,"aepyceros","Serengeti_Impala3.jpg","By Ikiwaner [<a target=\\"_blank\\" href =\\"http://www.gnu.org/licenses/old-licenses/fdl-1.2.html\\">GFDL 1.2<\/a>]",800,800,[0,[0,"Impala","en",""],[0,"Parc national de l\'\xc3\xaele Ndere","fr","Parc_national_de_l%27%C3%AEle_Ndere"],[0,"Impala","fr",""],[0,"Gazelle","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/3/34/Serengeti_Impala3.jpg/800px-Serengeti_Impala3.jpg"]],[0,"bison","Bison_bison_009.jpg","By Donnie from WV, USA (VAC2010 1236\\nUploaded by berichard) [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/2.0\\">CC-BY-SA-2.0<\/a>]",800,506,[0,[0,"Bison d\'Am\xc3\xa9rique du Nord","fr","Bison_d%27Am%C3%A9rique_du_Nord"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/Bison_bison_009.jpg/800px-Bison_bison_009.jpg"]],[0,"bos","Kuh_in_transkei.jpg","By Amada44 [Public domain]",800,532,[0,[0,"Afrikaner cattle","en","Afrikaner_cattle"],[0,"\xc3\x89levage bovin en Afrique du Sud","fr","%C3%89levage_bovin_en_Afrique_du_Sud"],[0,"Sanga (rameau)","fr","Sanga_(rameau)"],[0,"Afrikaner (race bovine)","fr","Afrikaner_(race_bovine)"],[0,"Bos taurus","fr","Bos_taurus"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/a/a5/Kuh_in_transkei.jpg/800px-Kuh_in_transkei.jpg"]],[0,"syncerus","Syncerus_caffer.jpg","By PaulRae\\nderivative work: Berichard (talk)\\n\\n (African_Buffalo.JPG) [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by/2.5\\">CC-BY-2.5<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a> or <a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a>]",800,697,[0,[0,"Buffle d\'Afrique","fr","Buffle_d%27Afrique"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/2/25/Syncerus_caffer.jpg/800px-Syncerus_caffer.jpg"]],[0,"cervus","Cervus_elaphus_Luc_Viatour_6.jpg","By Lviatour [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0<\/a>]",800,533,[0,[0,"Cerf \xc3\xa9laphe","fr","Cerf_%C3%A9laphe"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/4/4b/Cervus_elaphus_Luc_Viatour_6.jpg/800px-Cervus_elaphus_Luc_Viatour_6.jpg"]],[0,"alces","Moose-Gustav.jpg","Author information on Wikimedia Commons [Attribution or <a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by/2.5\\">CC-BY-2.5<\/a>]",600,450,[0,[0,"Red Marsh Nature Reserve","en","Red_Marsh_Nature_Reserve"],[0,"Wolves and moose on Isle Royale","en","Wolves_and_moose_on_Isle_Royale"],[0,"Alces alces","fr","Alces_alces"]],[0,"http://upload.wikimedia.org/wikipedia/commons/c/c9/Moose-Gustav.jpg"]],[0,"capreolus","Chevreuil_repos.jpg","By Asabengurtza [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0-2.5-2.0-1.0<\/a>]",800,600,[0,[0,"Felix Salten","fr","Felix_Salten"],[0,"Chevreuil","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/3/33/Chevreuil_repos.jpg/800px-Chevreuil_repos.jpg"]],[0,"okapia","Okapi2.jpg","Author information on Wikimedia Commons [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a>]",800,695,[0,[0,"Donodon","en",""],[0,"Dorsetodon","en",""],[0,"Drescheratherium","en",""],[0,"Henkelotherium","en",""],[0,"Brancatherulum","en",""],[0,"Tragulina","en",""],[0,"Harbor seal","en","Harbor_seal"],[0,"Manzano Mountain Cottontail","en","Manzano_Mountain_Cottontail"],[0,"Mixodectidae","en",""],[0,"Robust Cottontail","en","Robust_Cottontail"],[0,"Euthlastus","en",""],[0,"Comotherium","en",""],[0,"Dryolestes","en",""],[0,"Laolestes","en",""],[0,"Miccylotyrans","en",""],[0,"Parcs nationaux congolais (RDC)","fr","Parcs_nationaux_congolais_(RDC)"],[0,"1901 en science","fr","1901_en_science"],[0,"G\xc3\xa9ographie de la R\xc3\xa9publique d\xc3\xa9mocratique du Congo","fr","G%C3%A9ographie_de_la_R%C3%A9publique_d%C3%A9mocratique_du_Congo"],[0,"Okapi","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/1/18/Okapi2.jpg/800px-Okapi2.jpg"]],[0,"giraffa","Giraffa_camelopardalis_angolensis.jpg","<p>\xc2\xa9 Hans Hillewaert\xc2\xa0/\xc2\xa0<a target=\\"_blank\\" href=\\"http://creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a><\/p>",800,1067,[0,[0,"Giraffe","en",""],[0,"Oshikoto","fr",""],[0,"Girafe","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/e/e0/Giraffa_camelopardalis_angolensis.jpg/800px-Giraffa_camelopardalis_angolensis.jpg"]],[0,"hippopotamus","Hippo_pod_edit.jpg","By Paul Maritz [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a>]",800,533,[0,[0,"Mammalia in the 10th edition of Systema Naturae","en","Mammalia_in_the_10th_edition_of_Systema_Naturae"],[0,"Largest organisms","en","Largest_organisms"],[0,"Wildlife of Zambia","en","Wildlife_of_Zambia"],[0,"Cetruminantia","en",""],[0,"Whippomorpha","en",""],[0,"Kasungu National Park","en","Kasungu_National_Park"],[0,"South Luangwa National Park","en","South_Luangwa_National_Park"],[0,"Democratic Republic of the Congo","en","Democratic_Republic_of_the_Congo"],[0,"Hippopotamidae","en",""],[0,"Hippopotamus","en",""],[0,"Mammif\xc3\xa8re aquatique","fr","Mammif%C3%A8re_aquatique"],[0,"Gabon","fr",""],[0,"Hippopotamus amphibius","fr","Hippopotamus_amphibius"],[0,"Hippopotamidae","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/a/a3/Hippo_pod_edit.jpg/800px-Hippo_pod_edit.jpg"]],[0,"orcinus","Killerwhales_jumping.jpg","By Pittman [Public domain]",450,313,[0,[0,"Mammals of Olympic National Park","en","Mammals_of_Olympic_National_Park"],[0,"Captive killer whales","en","Captive_killer_whales"],[0,"Life (BBC TV series)","en","Life_(BBC_TV_series)"],[0,"Flora and fauna of Greenland","en","Flora_and_fauna_of_Greenland"],[0,"Mammals of Antarctica","en","Mammals_of_Antarctica"],[0,"Bluespotted stingray","en","Bluespotted_stingray"],[0,"Cosmopolitan distribution","en","Cosmopolitan_distribution"],[0,"Megafauna","en",""],[0,"Killer whale","en","Killer_whale"],[0,"Dolphin","en",""],[0,"Orientation bibliographique en zoologie (taxinomie)","fr","Orientation_bibliographique_en_zoologie_(taxinomie)"],[0,"Superpr\xc3\xa9dateur","fr","Superpr%C3%A9dateur"],[0,"Parc national Olympique","fr","Parc_national_Olympique"],[0,"Orque","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/3/37/Killerwhales_jumping.jpg"]],[0,"phocoena","Daan_Close_Up.PNG","By AVampireTear [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a>]",675,583,[0,[0,"Harbour porpoise","en","Harbour_porpoise"],[0,"Marsouin commun","fr","Marsouin_commun"],[0,"Phocoenidae","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/2/28/Daan_Close_Up.PNG"]],[0,"monodon","Narwhals_breach.jpg","By Glenn Williams (National Institute of Standards and Technology) [Public domain]",800,509,[0,[0,"Ivory trade","en","Ivory_trade"],[0,"Tusk","en",""],[0,"Narwhal","en",""],[0,"Corne de licorne","fr","Corne_de_licorne"],[0,"D\xc3\xa9fense (dent)","fr","D%C3%A9fense_(dent)"],[0,"Narval","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/Narwhals_breach.jpg/800px-Narwhals_breach.jpg"]],[0,"delphinapterus","Delphinapterus_leucas_head_3.jpg","<a target=\\"_blank\\" href=\\"http://commons.wikimedia.org/wiki/User:Stan_Shebs\\">Stan Shebs<\/a> [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/2.5\\">CC-BY-SA-2.5<\/a>]",800,573,[0,[0,"B\xc3\xa9luga (baleine)","fr","B%C3%A9luga_(baleine)"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Delphinapterus_leucas_head_3.jpg/800px-Delphinapterus_leucas_head_3.jpg"]],[0,"balaenoptera","Humpback_stellwagen_edit.jpg","By Whit Welles Wwelles14 [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by/3.0\\">CC-BY-3.0<\/a>]",800,453,[0,[0,"Silas D. Alben","en","Silas_D._Alben"],[0,"Stellwagen Bank National Marine Sanctuary","en","Stellwagen_Bank_National_Marine_Sanctuary"],[0,"National Recording Registry","en","National_Recording_Registry"],[0,"Cetartiodactyla","en",""],[0,"Cetology","en",""],[0,"Whale surfacing behaviour","en","Whale_surfacing_behaviour"],[0,"Whale watching","en","Whale_watching"],[0,"Humpback whale","en","Humpback_whale"],[0,"Baleen whale","en","Baleen_whale"],[0,"Whale","en",""],[0,"Cetacea","en",""],[0,"Baleine \xc3\xa0 bosse","fr","Baleine_%C3%A0_bosse"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Humpback_stellwagen_edit.jpg/800px-Humpback_stellwagen_edit.jpg"]],[0,"phacochoerus","Tarangire_Warzenschwein1.jpg","By Ikiwaner [<a target=\\"_blank\\" href =\\"http://www.gnu.org/licenses/old-licenses/fdl-1.2.html\\">GFDL 1.2<\/a>]",800,600,[0,[0,"Warthog","en",""],[0,"Phacoch\xc3\xa8re","fr","Phacoch%C3%A8re"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/0/01/Tarangire_Warzenschwein1.jpg/800px-Tarangire_Warzenschwein1.jpg"]],[0,"sus","WildZwijn_cropped.jpg","By nl:User:GerardM (Image:WildZwijn.jpg) [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a>]",800,606,[0,[0,"Sanglier","fr",""],[0,"Fenouill\xc3\xa8des","fr","Fenouill%C3%A8des"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/6/61/WildZwijn_cropped.jpg/800px-WildZwijn_cropped.jpg"]],[0,"camel","07._Camel_Profile,_near_Silverton,_NSW,_07.07.2007.jpg","By Jjron [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a>]",800,985,[0,[0,"Mandora Marsh","en","Mandora_Marsh"],[0,"Australian feral camel","en","Australian_feral_camel"],[0,"Taboo food and drink","en","Taboo_food_and_drink"],[0,"Invasive species in Australia","en","Invasive_species_in_Australia"],[0,"Dromedary","en",""],[0,"Camelid","en",""],[0,"Tylopoda","en",""],[0,"Camel","en",""],[0,"Dromadaire australien","fr","Dromadaire_australien"],[0,"Dromadaire","fr",""],[0,"Camelidae","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/4/43/07._Camel_Profile%2C_near_Silverton%2C_NSW%2C_07.07.2007.jpg/800px-07._Camel_Profile%2C_near_Silverton%2C_NSW%2C_07.07.2007.jpg"]],[0,"lama","Lama_animal.jpg","Author information on Wikimedia Commons [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/2.5\\">CC-BY-SA-2.5<\/a>]",800,600,[0,[0,"Lama (animal)","fr","Lama_(animal)"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Lama_animal.jpg/800px-Lama_animal.jpg"]],[0,"lutra","Loutre_des_pyrenees_baronnies_2004.jpg","Author information on Wikimedia Commons [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a>]",594,394,[0,[0,"Lac Arpi","fr","Lac_Arpi"],[0,"Petite Amazonie des Pyr\xc3\xa9n\xc3\xa9es","fr","Petite_Amazonie_des_Pyr%C3%A9n%C3%A9es"],[0,"G\xc3\xa9ographie de la Charente","fr","G%C3%A9ographie_de_la_Charente"],[0,"Vis (rivi\xc3\xa8re)","fr","Vis_(rivi%C3%A8re)"],[0,"Lutra","fr",""],[0,"Loutre d\'Europe","fr","Loutre_d%27Europe"],[0,"Loutre","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/c/c3/Loutre_des_pyrenees_baronnies_2004.jpg"]],[0,"procyon","Procyon_lotor_1.jpg","Author information on Wikimedia Commons [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a>]",800,927,[0,[0,"Procyonidae","fr",""],[0,"Am\xc3\xa9rique du Nord","fr","Am%C3%A9rique_du_Nord"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Procyon_lotor_1.jpg/800px-Procyon_lotor_1.jpg"]],[0,"simocyon","Red_Panda.JPG","By User Bernard Landgraf on de.wikipedia.org [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a>]",800,534,[0,[0,"Wildlife of India","en","Wildlife_of_India"],[0,"Red panda","en","Red_panda"],[0,"Ailuridae","fr",""],[0,"Petit panda","fr","Petit_panda"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/c/c6/Red_Panda.JPG/800px-Red_Panda.JPG"]],[0,"mephitis","Striped_skunk.jpg","Author information on Wikimedia Commons [Public domain]",300,437,[0,[0,"Mammals of the Indiana Dunes","en","Mammals_of_the_Indiana_Dunes"],[0,"Mammals of New England","en","Mammals_of_New_England"],[0,"P\xc3\xa9p\xc3\xa9 le putois","fr","P%C3%A9p%C3%A9_le_putois"],[0,"Mouffette","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/6/63/Striped_skunk.jpg"]],[0,"mirounga","Mirounga_leonina_male.JPG","By B.navez (self-made (scan of paper photo)) [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0-2.5-2.0-1.0<\/a>]",800,544,[0,[0,"Southern elephant seal","en","Southern_elephant_seal"],[0,"Largest organisms","en","Largest_organisms"],[0,"Elephant seal","en","Elephant_seal"],[0,"Carnivora","en",""],[0,"\xc3\x89l\xc3\xa9phant de mer du sud","fr","%C3%89l%C3%A9phant_de_mer_du_sud"],[0,"Province de Santa Cruz","fr","Province_de_Santa_Cruz"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/e/ed/Mirounga_leonina_male.JPG/800px-Mirounga_leonina_male.JPG"]],[0,"arctocephalus","Arctocephalus_galapagoensis2.jpg","By Kelly J. Kane [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by/3.0\\">CC-BY-3.0<\/a>]",800,800,[0,[0,"Gal\xc3\xa1pagos Sea Lion","en","Gal%C3%A1pagos_Sea_Lion"],[0,"Arctocephalus galapagoensis","fr","Arctocephalus_galapagoensis"],[0,"Nageoire","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/f/f9/Arctocephalus_galapagoensis2.jpg/800px-Arctocephalus_galapagoensis2.jpg"]],[0,"odobenus","Noaa-walrus30.jpg","Author information on Wikimedia Commons [Public domain]",700,455,[0,[0,"Odobenus","fr",""],[0,"Odobenidae","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/d/de/Noaa-walrus30.jpg"]],[0,"ursus","Polar_Bear_2004-11-15.jpg","By Ansgar Walk [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/2.5\\">CC-BY-SA-2.5<\/a>]",800,606,[0,[0,"Nordic countries","en","Nordic_countries"],[0,"Polar seas","en","Polar_seas"],[0,"Wapusk National Park","en","Wapusk_National_Park"],[0,"Polar region","en","Polar_region"],[0,"Megafauna","en",""],[0,"Bear","en",""],[0,"Parcs nationaux du Canada","fr","Parcs_nationaux_du_Canada"],[0,"Embl\xc3\xa8mes des provinces et territoires du Canada","fr","Embl%C3%A8mes_des_provinces_et_territoires_du_Canada"],[0,"Parc national Wapusk","fr","Parc_national_Wapusk"],[0,"Ours blanc","fr","Ours_blanc"],[0,"Oc\xc3\xa9an Arctique","fr","Oc%C3%A9an_Arctique"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Polar_Bear_2004-11-15.jpg/800px-Polar_Bear_2004-11-15.jpg"]],[0,"tremarctos","Spectacled_Bear_-_Houston_Zoo.jpg","By en:User:Cburnett [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a>]",800,728,[0,[0,"Ichigkat muja \xe2\x80\x93 Cordillera del Condor National Park","en","Ichigkat_muja_%E2%80%93_Cordillera_del_Condor_National_Park"],[0,"Serran\xc3\xada de los Churumbelos","en","Serran%C3%ADa_de_los_Churumbelos"],[0,"Tremarctos","en",""],[0,"Spectacled bear","en","Spectacled_bear"],[0,"Ours \xc3\xa0 lunettes","fr","Ours_%C3%A0_lunettes"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Spectacled_Bear_-_Houston_Zoo.jpg/800px-Spectacled_Bear_-_Houston_Zoo.jpg"]],[0,"ailuropoda","Grosser_Panda.JPG","By J. Patrick Fischer [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0<\/a>]",800,533,[0,[0,"World Wide Fund for Nature","en","World_Wide_Fund_for_Nature"],[0,"Giant panda","en","Giant_panda"],[0,"Panda g\xc3\xa9ant","fr","Panda_g%C3%A9ant"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Grosser_Panda.JPG/800px-Grosser_Panda.JPG"]],[0,"canis","Wolf._bei_Eekholt.jpg","By Volker.G [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by/3.0\\">CC-BY-3.0<\/a>]",800,600,[0,[0,"B\xc3\xaate du G\xc3\xa9vaudan","fr","B%C3%AAte_du_G%C3%A9vaudan"],[0,"Loup","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Wolf._bei_Eekholt.jpg/800px-Wolf._bei_Eekholt.jpg"]],[0,"vulpes","R%C3%B8d_r%C3%A6v_%28Vulpes_vulpes%29.jpg","I, <a target=\\"_blank\\" href=\\"http://commons.wikimedia.org/wiki/User:Malene\\">Malene<\/a> [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by/2.5\\">CC-BY-2.5<\/a>]",800,560,[0,[0,"Burns Inquiry","en","Burns_Inquiry"],[0,"Fox hunting","en","Fox_hunting"],[0,"Renard roux","fr","Renard_roux"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/e/ef/R%C3%B8d_r%C3%A6v_%28Vulpes_vulpes%29.jpg/800px-R%C3%B8d_r%C3%A6v_%28Vulpes_vulpes%29.jpg"]],[0,"suricata","Suricata_suricatta18082009b.jpg","By Sylfred1977 [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0-2.5-2.0-1.0<\/a>]",800,1198,[0,[0,"Suricate","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Suricata_suricatta18082009b.jpg/800px-Suricata_suricatta18082009b.jpg"]],[0,"parahyaena","Parahyaena_brunnea_3.jpg","By http://www.pistoleros.no (http://www.pistoleros.no) [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a>]",300,221,[0,[0,"Hy\xc3\xa8ne brune","fr","Hy%C3%A8ne_brune"],[0,"Parahyaena","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/0/04/Parahyaena_brunnea_3.jpg"]],[0,"neofelis","Neofelis_nebulosa.jpg","Author information on Wikimedia Commons [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a>]",432,252,[0,[0,"Kameng Elephant Reserve","en","Kameng_Elephant_Reserve"],[0,"Neofelis","en",""],[0,"Clouded leopard","en","Clouded_leopard"],[0,"Neofelis","fr",""],[0,"Panth\xc3\xa8re n\xc3\xa9buleuse","fr","Panth%C3%A8re_n%C3%A9buleuse"],[0,"Pardofelis","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/7/7d/Neofelis_nebulosa.jpg"]],[0,"panthera","Lion_waiting_in_Namibia.jpg","By yaaaay (Originally posted on Flickr at The King.) [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by/2.0\\">CC-BY-2.0<\/a>]",800,600,[0,[0,"Lion (color)","en","Lion_(color)"],[0,"Lion","en",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Lion_waiting_in_Namibia.jpg/800px-Lion_waiting_in_Namibia.jpg"]],[0,"felis","WhiteCat.jpg","By Icebooter at en.wikipedia Later versions were uploaded by JamesWeb, Pd THOR, Bean2020, Balls187, Persian Poet Gal at en.wikipedia. [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a> or <a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a>]",348,326,[0,[0,"Feline hip replacement","en","Feline_hip_replacement"],[0,"Kass","en",""],[0,"Cat","en",""],[0,"Carnivora","en",""],[0,"Chat","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/b/b2/WhiteCat.jpg"]],[0,"lynx","Linces10.jpg","By (c)\\"Programa de Conservaci\xc3\xb3n Ex-situ del Lince Ib\xc3\xa9rico www.lynxexsitu.es\\" [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by/2.5\\">CC-BY-2.5<\/a>]",294,420,[0,[0,"Genetic monitoring","en","Genetic_monitoring"],[0,"Lynx","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/f/f5/Linces10.jpg"]],[0,"acinonyx","TheCheethcat.jpg","By James Temple [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by/2.0\\">CC-BY-2.0<\/a>]",800,1200,[0,[0,"Cheetah","en",""],[0,"Mammal","en",""],[0,"Gu\xc3\xa9pard","fr","Gu%C3%A9pard"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/0/09/TheCheethcat.jpg/800px-TheCheethcat.jpg"]],[0,"ceratotherium","Rhinoc%C3%A9ros_blanc_JHE.jpg","By Coralie [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0-2.5-2.0-1.0<\/a>]",800,434,[0,[0,"Rhinoc\xc3\xa9ros","fr","Rhinoc%C3%A9ros"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/3/38/Rhinoc%C3%A9ros_blanc_JHE.jpg/800px-Rhinoc%C3%A9ros_blanc_JHE.jpg"]],[0,"equus_grevyi","Zebra_zoo-leipzig.jpg","By Thomas Lersch [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/2.5\\">CC-BY-SA-2.5<\/a>]",800,600,[0,[0,"Equus (genus)","en","Equus_(genus)"],[0,"Z\xc3\xa8bre de Gr\xc3\xa9vy","fr","Z%C3%A8bre_de_Gr%C3%A9vy"],[0,"Equidae","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/0/0a/Zebra_zoo-leipzig.jpg/800px-Zebra_zoo-leipzig.jpg"]],[0,"equus_asinus","Equus_asinus_Kadzid%C5%82owo_002.jpg","By Lilly M [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0-2.5-2.0-1.0<\/a>]",800,516,[0,[0,"Asses\' milk (Donkey\'s milk)","en","Asses%27_milk_(Donkey%27s_milk)"],[0,"Lait d\'\xc3\xa2nesse","fr","Lait_d%27%C3%A2nesse"],[0,"Equidae","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Equus_asinus_Kadzid%C5%82owo_002.jpg/800px-Equus_asinus_Kadzid%C5%82owo_002.jpg"]],[0,"equus_caballus","Pferde_im_Galopp.jpg","Author information on Wikimedia Commons [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/2.5\\">CC-BY-SA-2.5<\/a>]",800,371,[0,[0,"Equine coat color","en","Equine_coat_color"],[0,"Cheval","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Pferde_im_Galopp.jpg/800px-Pferde_im_Galopp.jpg"]],[0,"plecotus","Plecotus_auritus_01.jpg","Author information on Wikimedia Commons [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/2.0\\">CC-BY-SA-2.0<\/a>]",800,600,[0,[0,"Mother Ludlam\'s Cave","en","Mother_Ludlam%27s_Cave"],[0,"Norfolk Roadside Nature Reserve","en","Norfolk_Roadside_Nature_Reserve"],[0,"Plecotus","en",""],[0,"Brown long-eared bat","en","Brown_long-eared_bat"],[0,"Chiroptera (classification phylog\xc3\xa9n\xc3\xa9tique)","fr","Chiroptera_(classification_phylog%C3%A9n%C3%A9tique)"],[0,"Plecotus auritus","fr","Plecotus_auritus"],[0,"For\xc3\xaat de Soignes","fr","For%C3%AAt_de_Soignes"],[0,"Oreillard","fr",""],[0,"Vespertilionidae","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/8/8b/Plecotus_auritus_01.jpg/800px-Plecotus_auritus_01.jpg"]],[0,"rhinolophus","Grand_Rhinolophe.jpg","By Marie Jullion [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0-2.5-2.0-1.0<\/a>]",800,600,[0,[0,"Greater Horseshoe Bat","en","Greater_Horseshoe_Bat"],[0,"Plateau d\'Albion","fr","Plateau_d%27Albion"],[0,"Alpes dinariques","fr","Alpes_dinariques"],[0,"Rhinolophus ferrumequinum","fr","Rhinolophus_ferrumequinum"],[0,"Biosp\xc3\xa9ologie","fr","Biosp%C3%A9ologie"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/0/0a/Grand_Rhinolophe.jpg/800px-Grand_Rhinolophe.jpg"]],[0,"talpa","Talpa_europaea_hg.jpg","By Hannes Grobe, Hgrobe 21:20, 4 July 2006 (UTC) [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/2.5\\">CC-BY-SA-2.5<\/a>]",800,571,[0,[0,"European Mole","en","European_Mole"],[0,"Taupe d\'Europe","fr","Taupe_d%27Europe"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Talpa_europaea_hg.jpg/800px-Talpa_europaea_hg.jpg"]],[0,"erinaceus","Erinaceus_europaeus_LC0119.jpg","I, <a target=\\"_blank\\" href=\\"http://commons.wikimedia.org/wiki/User:LC-de\\">J\xc3\xb6rg Hempel<\/a> [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/2.0/de/deed.en\\">CC-BY-SA-2.0-de<\/a>]",800,599,[0,[0,"Erinaceus europaeus","fr","Erinaceus_europaeus"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/Erinaceus_europaeus_LC0119.jpg/800px-Erinaceus_europaeus_LC0119.jpg"]],[0,"sorex","Common_Shrew.jpg","By Sjonge at en.wikipedia [Public domain]",800,600,[0,[0,"Common Shrew","en","Common_Shrew"],[0,"Raasay","fr",""],[0,"Musaraigne","fr",""],[0,"Sorex araneus","fr","Sorex_araneus"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Common_Shrew.jpg/800px-Common_Shrew.jpg"]],[0,"homo","Infant_smile.jpg","By Mehregan Javanmard [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by/2.5\\">CC-BY-2.5<\/a>]",800,1237,[0,[0,"Homo sapiens","fr","Homo_sapiens"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Infant_smile.jpg/800px-Infant_smile.jpg"]],[0,"pan","Schimpanse_zoo-leipig.jpg","By Thomas Lersch [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by/2.5\\">CC-BY-2.5<\/a>]",800,600,[0,[0,"Chimpanzee","en",""],[0,"Common chimpanzee","en","Common_chimpanzee"],[0,"Gabon","fr",""],[0,"Chimpanz\xc3\xa9","fr","Chimpanz%C3%A9"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/8/8b/Schimpanse_zoo-leipig.jpg/800px-Schimpanse_zoo-leipig.jpg"]],[0,"gorilla","Gorilla_gorilla_gorilla8.jpg","Author information on Wikimedia Commons [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a>]",800,1067,[0,[0,"Gabon","fr",""],[0,"Gorille","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/6/6e/Gorilla_gorilla_gorilla8.jpg/800px-Gorilla_gorilla_gorilla8.jpg"]],[0,"pongo","Kutai_Orangutan_2008.jpg","By Neil WWW.NEILSRTW.BLOGSPOT.COM (Wild Orangutan) [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by/2.0\\">CC-BY-2.0<\/a>]",800,977,[0,[0,"Kutai National Park","en","Kutai_National_Park"],[0,"Orang-outan de Born\xc3\xa9o","fr","Orang-outan_de_Born%C3%A9o"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Kutai_Orangutan_2008.jpg/800px-Kutai_Orangutan_2008.jpg"]],[0,"macaca","JapaneseMacaque1_CincinnatiZoo.jpg","By Ltshears [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0<\/a> or <a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a>]",800,650,[0,[0,"Macaque japonais","fr","Macaque_japonais"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/9/9e/JapaneseMacaque1_CincinnatiZoo.jpg/800px-JapaneseMacaque1_CincinnatiZoo.jpg"]],[0,"callitrix","Wei%C3%9Fb%C3%BCschelaffe_%28Callithrix_jacchus%29.jpg","<p>\xc2\xa9 Raimond Spekking\xc2\xa0/\xc2\xa0<a target=\\"_blank\\" href=\\"http://creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a><\/p>",800,620,[0,[0,"Common marmoset","en","Common_marmoset"],[0,"Ouistiti","fr",""],[0,"Simiiformes","fr",""],[0,"Callithrix","fr",""],[0,"Callithrix jacchus","fr","Callithrix_jacchus"],[0,"Primates","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Wei%C3%9Fb%C3%BCschelaffe_%28Callithrix_jacchus%29.jpg/800px-Wei%C3%9Fb%C3%BCschelaffe_%28Callithrix_jacchus%29.jpg"]],[0,"ateles","Ateles_fusciceps_robustus_moving.JPG","By Patrick M\xc3\xbcller [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a>]",800,533,[0,[0,"At\xc3\xa8le \xc3\xa0 t\xc3\xaate brune","fr","At%C3%A8le_%C3%A0_t%C3%AAte_brune"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/Ateles_fusciceps_robustus_moving.JPG/800px-Ateles_fusciceps_robustus_moving.JPG"]],[0,"tarsius","Tarsier_Hugs_Mossy_Branch.jpg","By Kok Leng Yeo [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by/2.0\\">CC-BY-2.0<\/a>]",800,1067,[0,[0,"Wildlife of the Philippines","en","Wildlife_of_the_Philippines"],[0,"Philippine tarsier","en","Philippine_tarsier"],[0,"Tarsiiformes","en",""],[0,"Primate","en",""],[0,"Philippines","fr",""],[0,"Tarsius","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Tarsier_Hugs_Mossy_Branch.jpg/800px-Tarsier_Hugs_Mossy_Branch.jpg"]],[0,"lemur","Knuthenborg_Safaripark_-_en_lemur.jpg","By Hubertus45 [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0<\/a> or <a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a>]",800,737,[0,[0,"Fourr\xc3\xa9 \xc3\xa9pineux de Madagascar","fr","Fourr%C3%A9_%C3%A9pineux_de_Madagascar"],[0,"L\xc3\xa9mur catta","fr","L%C3%A9mur_catta"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/a/ae/Knuthenborg_Safaripark_-_en_lemur.jpg/800px-Knuthenborg_Safaripark_-_en_lemur.jpg"]],[0,"platacanthomys","Malabar_spiny_dormouse.jpg","By Kalyanvarma [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0<\/a>]",800,527,[0,[0,"Malabar Spiny Dormouse","en","Malabar_Spiny_Dormouse"],[0,"Platacanthomyidae","en",""],[0,"Loir \xc3\xa9pineux","fr","Loir_%C3%A9pineux"],[0,"Platacanthomyinae","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/6/61/Malabar_spiny_dormouse.jpg"]],[0,"synaptomys","Synaptomys_cooperi.jpg","By PaulT [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0-2.5-2.0-1.0<\/a>]",800,611,[0,[0,"Synaptomys cooperi","fr","Synaptomys_cooperi"],[0,"Campagnol","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Synaptomys_cooperi.jpg/800px-Synaptomys_cooperi.jpg"]],[0,"mesocricetus","Hamster_im_Gras.jpg","By Tux [Public domain or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/2.0/de/deed.en\\">CC-BY-SA-2.0-de<\/a>]",800,600,[0,[0,"Hamster dor\xc3\xa9","fr","Hamster_dor%C3%A9"],[0,"Mesocricetus","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/0/01/Hamster_im_Gras.jpg/800px-Hamster_im_Gras.jpg"]],[0,"mus","Mouse-19-Dec-2004.jpg","Author information on Wikimedia Commons [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a>]",800,484,[0,[0,"Stockage des c\xc3\xa9r\xc3\xa9ales","fr","Stockage_des_c%C3%A9r%C3%A9ales"],[0,"Souris","fr",""],[0,"Sibylline","fr",""],[0,"Mus (genre)","fr","Mus_(genre)"],[0,"Gris","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Mouse-19-Dec-2004.jpg/800px-Mouse-19-Dec-2004.jpg"]],[0,"castor","Beaver_pho34.jpg","By Per Harald Olsen (User made.) [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/2.5-2.0-1.0\\">CC-BY-SA-2.5-2.0-1.0<\/a>]",711,554,[0,[0,"Fauna of Scotland","en","Fauna_of_Scotland"],[0,"Dyke Marsh","en","Dyke_Marsh"],[0,"Waitoreke","en",""],[0,"Eurasian Beaver","en","Eurasian_Beaver"],[0,"Beaver","en",""],[0,"Monts d\'Arr\xc3\xa9e","fr","Monts_d%27Arr%C3%A9e"],[0,"Faune de l\'\xc3\x89cosse","fr","Faune_de_l%27%C3%89cosse"],[0,"Virenque","fr",""],[0,"Parc national de Fulufj\xc3\xa4llet","fr","Parc_national_de_Fulufj%C3%A4llet"],[0,"Castor fiber","fr","Castor_fiber"],[0,"Saint-Rambert-en-Bugey","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/c/cc/Beaver_pho34.jpg"]],[0,"eliomys","L%C3%A9rot.jpg","By Jctramasure [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0<\/a>]",800,600,[0,[0,"Eliomys quercinus","fr","Eliomys_quercinus"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/0/08/L%C3%A9rot.jpg/800px-L%C3%A9rot.jpg"]],[0,"marmota","Marmotte_des_Pyr%C3%A9n%C3%A9es.jpg","By Sylvouille at fr.wikipedia [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/1.0\\">CC-BY-SA-1.0<\/a>]",800,533,[0,[0,"Alpine marmot","en","Alpine_marmot"],[0,"Marmota marmota","fr","Marmota_marmota"],[0,"Marmotte","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Marmotte_des_Pyr%C3%A9n%C3%A9es.jpg/800px-Marmotte_des_Pyr%C3%A9n%C3%A9es.jpg"]],[0,"sciurus","Red_Squirrel_-_Lazienki.JPG","By Pawel Ryszawa [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/2.5-2.0-1.0\\">CC-BY-SA-2.5-2.0-1.0<\/a>]",800,639,[0,[0,"\xc3\x89cureuil roux","fr","%C3%89cureuil_roux"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/Red_Squirrel_-_Lazienki.JPG/800px-Red_Squirrel_-_Lazienki.JPG"]],[0,"hystrix","Westafrikanisches_Stachelschwein.jpg","By C-8 [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0-2.5-2.0-1.0<\/a>]",800,537,[0,[0,"Crested Porcupine","en","Crested_Porcupine"],[0,"Hystrix cristata","fr","Hystrix_cristata"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/3/37/Westafrikanisches_Stachelschwein.jpg/800px-Westafrikanisches_Stachelschwein.jpg"]],[0,"lepus","Li%C3%A8vre_en_%C3%A9t%C3%A9.jpg","Author information on Wikimedia Commons [<a target=\\"_blank\\" href =\\"http://www.artlibre.org/licence/lal/en\\">FAL<\/a>]",753,1013,[0,[0,"Li\xc3\xa8vres dans la Bible","fr","Li%C3%A8vres_dans_la_Bible"],[0,"Usagi","fr",""],[0,"Li\xc3\xa8vre","fr","Li%C3%A8vre"]],[0,"http://upload.wikimedia.org/wikipedia/commons/4/42/Li%C3%A8vre_en_%C3%A9t%C3%A9.jpg"]],[0,"myrmecophaga","Myresluger.jpg","Author information on Wikimedia Commons [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/2.5\\">CC-BY-SA-2.5<\/a>]",350,229,[0,[0,"Pilosa","en",""],[0,"R\xc3\xado Pl\xc3\xa1tano Biosphere Reserve","en","R%C3%ADo_Pl%C3%A1tano_Biosphere_Reserve"],[0,"Pantanal","fr",""],[0,"Fourmilier","fr",""],[0,"Tamanoir","fr",""],[0,"Myrmecophagidae","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/e/e1/Myresluger.jpg"]],[0,"bradypus","9092_-_Milano_-_Museo_storia_naturale_-_Diorama_-_Bradypus_trydactilus_-_Foto_Giovanni_Dall%27Orto_22-Apr-2007.jpg","Author information on Wikimedia Commons [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/2.5/it/deed.en\\">CC-BY-SA-2.5-it<\/a>]",800,531,[0,[0,"Sloth moth","en","Sloth_moth"],[0,"Paresseux \xc3\xa0 trois doigts","fr","Paresseux_%C3%A0_trois_doigts"],[0,"Province de Salta","fr","Province_de_Salta"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/9092_-_Milano_-_Museo_storia_naturale_-_Diorama_-_Bradypus_trydactilus_-_Foto_Giovanni_Dall%27Orto_22-Apr-2007.jpg/800px-9092_-_Milano_-_Museo_storia_naturale_-_Diorama_-_Bradypus_trydactilus_-_Foto_Giovanni_Dall%27Orto_22-Apr-2007.jpg"]],[0,"priodontes","Chubut-PeninsulaValdes-Armadillo-TatuCarreta-P2230729b.jpg","Author information on Wikimedia Commons [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a>]",800,580,[0,[0,"Valdes Peninsula","en","Valdes_Peninsula"],[0,"Priodontes maximus","fr","Priodontes_maximus"],[0,"Dasypodinae","fr",""],[0,"Dasypodidae","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/f/f5/Chubut-PeninsulaValdes-Armadillo-TatuCarreta-P2230729b.jpg/800px-Chubut-PeninsulaValdes-Armadillo-TatuCarreta-P2230729b.jpg"]],[0,"loxodonta","African_Bush_Elephants.jpg","By Gorgo (Photo taken by author) [Public domain]",800,600,[0,[0,"Seismic communication","en","Seismic_communication"],[0,"African Bush Elephant","en","African_Bush_Elephant"],[0,"Addo Elephant National Park","en","Addo_Elephant_National_Park"],[0,"Parc national des \xc3\x89l\xc3\xa9phants d\'Addo","fr","Parc_national_des_%C3%89l%C3%A9phants_d%27Addo"],[0,"\xc3\x89l\xc3\xa9phant d\'Afrique","fr","%C3%89l%C3%A9phant_d%27Afrique"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/African_Bush_Elephants.jpg/800px-African_Bush_Elephants.jpg"]],[0,"lamantins","Manatee_photo.jpg","By NASA [license on Wikimedia Commons]",800,571,[0,[0,"Manatee","en",""],[0,"Gabon","fr",""],[0,"Baie de Chetumal","fr","Baie_de_Chetumal"],[0,"Lamantin","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/b/b1/Manatee_photo.jpg/800px-Manatee_photo.jpg"]],[0,"macropus","Kangaroo_and_joey03.jpg","Author information on Wikimedia Commons [<a target=\\"_blank\\" href =\\"http://www.gnu.org/licenses/old-licenses/fdl-1.2.html\\">GFDL 1.2<\/a>]",800,1200,[0,[0,"Eden Park Kangaroo Cull","en","Eden_Park_Kangaroo_Cull"],[0,"Pouch (marsupial)","en","Pouch_(marsupial)"],[0,"Theria","en",""],[0,"Eastern Grey Kangaroo","en","Eastern_Grey_Kangaroo"],[0,"Marsupial","en",""],[0,"Kangaroo","en",""],[0,"Kangourou g\xc3\xa9ant","fr","Kangourou_g%C3%A9ant"],[0,"Macropodiformes","fr",""],[0,"Marsupium","fr",""],[0,"Kangourou","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Kangaroo_and_joey03.jpg/800px-Kangaroo_and_joey03.jpg"]],[0,"koala","Koala_climbing_tree.jpg","By Diliff [<a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0\\">CC-BY-SA-3.0<\/a> or <a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a>]",800,787,[0,[0,"Symbols of Queensland","en","Symbols_of_Queensland"],[0,"Outline of Australia","en","Outline_of_Australia"],[0,"Mammals of Australia","en","Mammals_of_Australia"],[0,"Australia","en",""],[0,"Phascolarctos","en",""],[0,"Vombatiformes","en",""],[0,"Phascolarctidae","en",""],[0,"Great Otway National Park","en","Great_Otway_National_Park"],[0,"Marsupial","en",""],[0,"Australidelphia","fr",""],[0,"Koala","fr",""],[0,"Orientation bibliographique en mammalogie","fr","Orientation_bibliographique_en_mammalogie"],[0,"Riverina","fr",""],[0,"Australie","fr",""],[0,"Marsupialia (classification phylog\xc3\xa9n\xc3\xa9tique)","fr","Marsupialia_(classification_phylog%C3%A9n%C3%A9tique)"],[0,"Mammalia (classification phylog\xc3\xa9n\xc3\xa9tique)","fr","Mammalia_(classification_phylog%C3%A9n%C3%A9tique)"],[0,"Guide phylog\xc3\xa9n\xc3\xa9tique illustr\xc3\xa9 du monde animal","fr","Guide_phylog%C3%A9n%C3%A9tique_illustr%C3%A9_du_monde_animal"],[0,"Phascolarctos","fr",""],[0,"Phascolarctidae","fr",""]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/4/49/Koala_climbing_tree.jpg/800px-Koala_climbing_tree.jpg"]],[0,"ornithorynque","Platypus.jpg","By Stefan Kraft [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a>]",800,538,[0,[0,"Monotreme","en",""],[0,"Symbols of New South Wales","en","Symbols_of_New_South_Wales"],[0,"Phineas and Ferb","en","Phineas_and_Ferb"],[0,"Sydney Aquarium","en","Sydney_Aquarium"],[0,"Aquatic mammal","en","Aquatic_mammal"],[0,"Waitoreke","en",""],[0,"Artificial induction of immunity","en","Artificial_induction_of_immunity"],[0,"Electroreception","en",""],[0,"Ornithorhynchidae","en",""],[0,"Platypus","en",""],[0,"Mammif\xc3\xa8re aquatique","fr","Mammif%C3%A8re_aquatique"],[0,"Faune de l\'Australie","fr","Faune_de_l%27Australie"],[0,"Murray (fleuve)","fr","Murray_(fleuve)"],[0,"Monotremata","fr",""],[0,"Ornithorynque","fr",""],[0,"Mammif\xc3\xa8re","fr","Mammif%C3%A8re"]],[0,"http://upload.wikimedia.org/wikipedia/commons/f/f2/Platypus.jpg"]],[0,"echidne","Short-beaked_Echidna_Tasmania.jpg","I, <a target=\\"_blank\\" href=\\"http://commons.wikimedia.org/wiki/User:KeresH\\">KeresH<\/a> [<a target=\\"_blank\\" href =\\"http://www.gnu.org/copyleft/fdl.html\\">GFDL<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/3.0/\\">CC-BY-SA-3.0<\/a> or <a target=\\"_blank\\" href =\\"http://www.creativecommons.org/licenses/by-sa/2.5-2.0-1.0\\">CC-BY-SA-2.5-2.0-1.0<\/a>]",800,523,[0,[0,"\xc3\x89chidn\xc3\xa9 \xc3\xa0 nez court","fr","%C3%89chidn%C3%A9_%C3%A0_nez_court"]],[0,"http://upload.wikimedia.org/wikipedia/commons/thumb/8/80/Short-beaked_Echidna_Tasmania.jpg/800px-Short-beaked_Echidna_Tasmania.jpg"]]]');
   jsoo_create_file
    ("/static/messages.json",
     '{\n"fr":\n{"info": "Informations",\n "recenter": "Recentrer",\n "close": "Cliquez n\'importe o\xc3\xb9 pour retourner \xc3\xa0 l\'arbre",\n "wikimediaCommons": "Voir la description de l\'image sur Wikimedia Commons",\n "language": "En fran\xc3\xa7ais",\n "noRef": "Aucune r\xc3\xa9f\xc3\xa9rence disponible.",\n "languages": "Langues",\n "ok": "OK"\n}\n}\n');
   jsoo_create_file
    ("/static/tree.json",
     '[0,[0,"Mammalia",[0,[0,"Monotremata",[0,[0,"|echidne",[0]],[0,"|ornithorynque",[0]]]],[0,"",[0,[0,"Marsupialia",[0,[0,"|koala",[0]],[0,"|macropus",[0]]]],[0,"",[0,[0,"",[0,[0,"|lamantins",[0]],[0,"|loxodonta",[0]]]],[0,"",[0,[0,"",[0,[0,"|priodontes",[0]],[0,"",[0,[0,"|bradypus",[0]],[0,"|myrmecophaga",[0]]]]]],[0,"",[0,[0,"",[0,[0,"",[0,[0,"|lepus",[0]],[0,"Rodentia",[0,[0,"|hystrix",[0]],[0,"",[0,[0,"",[0,[0,"|sciurus",[0]],[0,"|marmota",[0]]]],[0,"",[0,[0,"|eliomys",[0]],[0,"",[0,[0,"|castor",[0]],[0,"",[0,[0,"|mus",[0]],[0,"",[0,[0,"|mesocricetus",[0]],[0,"|synaptomys",[0]],[0,"|platacanthomys",[0]]]]]]]]]]]]]]]],[0,"Primates",[0,[0,"|lemur",[0]],[0,"",[0,[0,"|tarsius",[0]],[0,"",[0,[0,"",[0,[0,"|ateles",[0]],[0,"|callitrix",[0]]]],[0,"",[0,[0,"|macaca",[0]],[0,"",[0,[0,"|pongo",[0]],[0,"",[0,[0,"|gorilla",[0]],[0,"",[0,[0,"|pan",[0]],[0,"|homo",[0]]]]]]]]]]]]]]]]]],[0,"",[0,[0,"",[0,[0,"|sorex",[0]],[0,"",[0,[0,"|erinaceus",[0]],[0,"|talpa",[0]]]]]],[0,"",[0,[0,"Chiroptera",[0,[0,"|rhinolophus",[0]],[0,"|plecotus",[0]]]],[0,"",[0,[0,"",[0,[0,"",[0,[0,"",[0,[0,"|equus_caballus",[0]],[0,"|equus_asinus",[0]],[0,"|equus_grevyi",[0]]]],[0,"|ceratotherium",[0]]]],[0,"Carnivora",[0,[0,"",[0,[0,"Felidae",[0,[0,"|acinonyx",[0]],[0,"",[0,[0,"",[0,[0,"|lynx",[0]],[0,"|felis",[0]]]],[0,"",[0,[0,"|panthera",[0]],[0,"|neofelis",[0]]]]]]]],[0,"",[0,[0,"|parahyaena",[0]],[0,"|suricata",[0]]]]]],[0,"",[0,[0,"Canidae",[0,[0,"|vulpes",[0]],[0,"|canis",[0]]]],[0,"",[0,[0,"",[0,[0,"|ailuropoda",[0]],[0,"",[0,[0,"|tremarctos",[0]],[0,"|ursus",[0]]]]]],[0,"",[0,[0,"",[0,[0,"",[0,[0,"|odobenus",[0]],[0,"|arctocephalus",[0]]]],[0,"|mirounga",[0]]]],[0,"",[0,[0,"|mephitis",[0]],[0,"|simocyon",[0]],[0,"",[0,[0,"|procyon",[0]],[0,"|lutra",[0]]]]]]]]]]]]]]]],[0,"",[0,[0,"",[0,[0,"|lama",[0]],[0,"|camel",[0]]]],[0,"",[0,[0,"|sus",[0]],[0,"|phacochoerus",[0]]]],[0,"",[0,[0,"",[0,[0,"Cetacea",[0,[0,"|balaenoptera",[0]],[0,"",[0,[0,"",[0,[0,"|delphinapterus",[0]],[0,"|monodon",[0]]]],[0,"",[0,[0,"|phocoena",[0]],[0,"|orcinus",[0]]]]]]]],[0,"|hippopotamus",[0]]]],[0,"Ruminantia",[0,[0,"",[0,[0,"|giraffa",[0]],[0,"|okapia",[0]]]],[0,"",[0,[0,"Cervidae",[0,[0,"",[0,[0,"|capreolus",[0]],[0,"|alces",[0]]]],[0,"|cervus",[0]]]],[0,"Bovidae",[0,[0,"",[0,[0,"|syncerus",[0]],[0,"",[0,[0,"|bos",[0]],[0,"|bison",[0]]]]]],[0,"",[0,[0,"|aepyceros",[0]],[0,"",[0,[0,"",[0,[0,"|oryx",[0]],[0,"|connochaetes",[0]]]],[0,"",[0,[0,"",[0,[0,"",[0,[0,"|mouflon",[0]],[0,"|mouton",[0]]]],[0,"",[0,[0,"|rupicapra",[0]],[0,"|capra",[0]]]]]],[0,"|ovibos",[0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[0,[0,"fr",[0,[0,"<TITLE>","Les mammif\xc3\xa8res"],[0,"Mammalia","Mammif\xc3\xa8res"],[0,"Monotremata","Monotr\xc3\xa8mes"],[0,"Marsupialia","Marsupiaux"],[0,"Rodentia","Rongeurs"],[0,"Primates","Primates"],[0,"Chiroptera","Chiropt\xc3\xa8res"],[0,"Carnivora","Carnivores"],[0,"Felidae","F\xc3\xa9lins"],[0,"Canidae","Canid\xc3\xa9s"],[0,"Cetacea","C\xc3\xa9tac\xc3\xa9s"],[0,"Ruminantia","Ruminants"],[0,"Cervidae","Cervid\xc3\xa9s"],[0,"Bovidae","Bovid\xc3\xa9s"]],"<h1>Un arbre des animaux<\/h1>\\n\\nCet <a target=\\"_blank\\"\\nhref=\\"http://fr.wikipedia.org/wiki/Arbre_phylog%C3%A9n%C3%A9tique\\">\\narbre <em>phylog\xc3\xa9n\xc3\xa9tique<\/em><\/a> repr\xc3\xa9sente les liens de parent\xc3\xa9\\nentre animaux.\\n\\n<h2>Utilisation<\/h2>\\n\\nParcourez l\'arbre en le faisant glisser avec la souris.  Cliquez\\nsur une image pour l\'afficher en grand.\\n\\n<h2>Cr\xc3\xa9dits<\/h2>\\n\\nCe logiciel et les images qu\'il utilise sont sous des licences libres.\\nLes images proviennent de <a target=\\"_blank\\"\\nhref=\\"http://commons.wikimedia.org/wiki/Main_Page?uselang=fr\\">Wikimedia\\nCommons<\/a>.  Vous pouvez cliquer sur chaque image pour plus de\\nd\xc3\xa9tails. Le logiciel a \xc3\xa9t\xc3\xa9 \xc3\xa9crit par J\xc3\xa9r\xc3\xb4me Vouillon (CNRS)."],[0,"en",[0,[0,"<TITLE>","Mammals"],[0,"Mammalia","Mammals"],[0,"Monotremata","Monotremes"],[0,"Marsupialia","Marsupials"],[0,"Rodentia","Rodents"],[0,"Primates","Primates"],[0,"Chiroptera","Bats"],[0,"Carnivora","Carnivorans"],[0,"Felidae","Felids"],[0,"Canidae","Canids"],[0,"Cetacea","Cetaceans"],[0,"Ruminantia","Ruminants"],[0,"Cervidae","Deer"],[0,"Bovidae","Bovids"]],"<h1>A Tree of Animals<\/h1>\\n\\nThis <a target=\\"_blank\\"\\nhref=\\"http://en.wikipedia.org/wiki/Phylogenetic_tree\\">\\n<em>phylogenetic<\/em> tree<\/a> displays the relationships among\\nanimals.\\n\\n<h2>Usage<\/h2>\\n\\nBrowse the tree by dragging it with the mouse. Click on any image to\\ndisplay a larger version.\\n\\n<h2>Credits<\/h2>\\n\\nThis software and the images it uses are under free licenses.  Images\\nare from <a target=\\"_blank\\"\\nhref=\\"http://commons.wikimedia.org/wiki/Main_Page\\">Wikimedia\\nCommons<\/a>.  You can click on each image for details.  The software\\nhas been written by J\xc3\xa9r\xc3\xb4me Vouillon (CNRS)."]]]');
   caml_fs_init();
   var
    Out_of_memory = [248, cst_Out_of_memory, -1],
    Sys_error = [248, cst_Sys_error, -2],
    Failure = [248, cst_Failure, -3],
    Invalid_argument = [248, cst_Invalid_argument, -4],
    End_of_file = [248, cst_End_of_file, -5],
    Division_by_zero = [248, cst_Division_by_zero, -6],
    Not_found = [248, cst_Not_found, -7],
    Match_failure = [248, cst_Match_failure, -8],
    Stack_overflow = [248, cst_Stack_overflow, -9],
    Sys_blocked_io = [248, cst_Sys_blocked_io, -10],
    Assert_failure = [248, cst_Assert_failure, -11],
    Undefined_recursive_module = [248, cst_Undefined_recursive_module, -12],
    s = "Buffer.add: cannot grow buffer",
    opt = [0, 103],
    partial = [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]],
    locfmt =
      [0,
       [11,
        'File "',
        [2,
         0,
         [11,
          '", line ',
          [4,
           0,
           0,
           0,
           [11,
            cst_characters,
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, ": ", [2, 0, 0]]]]]]]]]],
       'File "%s", line %d, characters %d-%d: %s'],
    elt = cst_button,
    s$1 = "5.4.0",
    git_version = "2b429e5",
    languages =
      [0, [0, "Fran\xc3\xa7ais", "fr"], [0, [0, "English", cst_en], 0]],
    z0 = [254, 0., 0.],
    z1 = [254, 0.1, 0.],
    z0$0 = [254, 0., 0.],
    z1$0 = [254, 0., 0.1],
    z0$1 = [254, 0., 0.],
    z1$1 = [254, -0.1, 0.],
    z0$2 = [254, 0., 0.],
    z1$2 = [254, 0., -0.1],
    a$0 = [254, 0.25, 0.],
    icons =
      [0,
       cst_commons_38_png,
       [0,
        cst_wikipedia_38_png,
        [0,
         cst_info_38_png,
         [0,
          cst_meeting_point_38_png,
          [0, cst_globe_38_png, [0, cst_ocsigen_powered_png, 0]]]]]],
    one = [254, 1., 0.],
    zero = [254, 0., 0.],
    tree_url = "tree.json";
   caml_register_global
    (11, Undefined_recursive_module, cst_Undefined_recursive_module);
   caml_register_global(10, Assert_failure, cst_Assert_failure);
   caml_register_global(9, Sys_blocked_io, cst_Sys_blocked_io);
   caml_register_global(8, Stack_overflow, cst_Stack_overflow);
   caml_register_global(7, Match_failure, cst_Match_failure);
   caml_register_global(6, Not_found, cst_Not_found);
   caml_register_global(5, Division_by_zero, cst_Division_by_zero);
   caml_register_global(4, End_of_file, cst_End_of_file);
   caml_register_global(3, Invalid_argument, cst_Invalid_argument);
   caml_register_global(2, Failure, cst_Failure);
   caml_register_global(1, Sys_error, cst_Sys_error);
   caml_register_global(0, Out_of_memory, cst_Out_of_memory);
   var
    _c_ = cst,
    _a_ = cst_true,
    _b_ = cst_false,
    _d_ = "CamlinternalLazy.Undefined",
    _e_ = "\\\\",
    _f_ = "\\'",
    _g_ = "\\b",
    _h_ = "\\t",
    _i_ = "\\n",
    _j_ = "\\r",
    _m_ = "String.blit / Bytes.blit_string",
    _l_ = "Bytes.blit",
    _k_ = "String.sub / Bytes.sub",
    _o_ = "String.contains_from / Bytes.contains_from",
    _n_ = "String.index_from / Bytes.index_from",
    _r_ = "Array.blit",
    _s_ = "Stdlib.Queue.Empty",
    _B_ = "%c",
    _C_ = "%s",
    _D_ = cst_i,
    _E_ = cst_li,
    _F_ = cst_ni,
    _G_ = cst_Li,
    _H_ = "%f",
    _I_ = "%B",
    _J_ = "%{",
    _K_ = "%}",
    _L_ = "%(",
    _M_ = "%)",
    _N_ = "%a",
    _O_ = "%t",
    _P_ = "%?",
    _Q_ = "%r",
    _R_ = "%_r",
    _S_ = [0, cst_camlinternalFormat_ml, 850, 23],
    _ac_ = [0, cst_camlinternalFormat_ml, 814, 21],
    _W_ = [0, cst_camlinternalFormat_ml, 815, 21],
    _ad_ = [0, cst_camlinternalFormat_ml, 818, 21],
    _X_ = [0, cst_camlinternalFormat_ml, 819, 21],
    _ae_ = [0, cst_camlinternalFormat_ml, 822, 19],
    _Y_ = [0, cst_camlinternalFormat_ml, 823, 19],
    _af_ = [0, cst_camlinternalFormat_ml, 826, 22],
    _Z_ = [0, cst_camlinternalFormat_ml, 827, 22],
    _ag_ = [0, cst_camlinternalFormat_ml, 831, 30],
    ___ = [0, cst_camlinternalFormat_ml, 832, 30],
    _aa_ = [0, cst_camlinternalFormat_ml, 836, 26],
    _U_ = [0, cst_camlinternalFormat_ml, 837, 26],
    _ab_ = [0, cst_camlinternalFormat_ml, 846, 28],
    _V_ = [0, cst_camlinternalFormat_ml, 847, 28],
    _$_ = [0, cst_camlinternalFormat_ml, 851, 23],
    _ba_ = [0, cst_camlinternalFormat_ml, 1558, 4],
    _bb_ = "Printf: bad conversion %[",
    _bc_ = [0, cst_camlinternalFormat_ml, 1626, 39],
    _bd_ = [0, cst_camlinternalFormat_ml, 1649, 31],
    _be_ = [0, cst_camlinternalFormat_ml, 1650, 31],
    _bf_ = "Printf: bad conversion %_",
    _bg_ = cst$0,
    _bh_ = cst$1,
    _bi_ = cst$0,
    _bj_ = cst$1,
    _a$_ = "nan",
    _a9_ = "neg_infinity",
    _a__ = "infinity",
    _a8_ = cst,
    _aW_ = "%+nd",
    _aX_ = "% nd",
    _aZ_ = "%+ni",
    _a0_ = "% ni",
    _a1_ = "%nx",
    _a2_ = "%#nx",
    _a3_ = "%nX",
    _a4_ = "%#nX",
    _a5_ = "%no",
    _a6_ = "%#no",
    _aV_ = "%nd",
    _aY_ = cst_ni,
    _a7_ = "%nu",
    _aJ_ = "%+ld",
    _aK_ = "% ld",
    _aM_ = "%+li",
    _aN_ = "% li",
    _aO_ = "%lx",
    _aP_ = "%#lx",
    _aQ_ = "%lX",
    _aR_ = "%#lX",
    _aS_ = "%lo",
    _aT_ = "%#lo",
    _aI_ = "%ld",
    _aL_ = cst_li,
    _aU_ = "%lu",
    _aw_ = "%+Ld",
    _ax_ = "% Ld",
    _az_ = "%+Li",
    _aA_ = "% Li",
    _aB_ = "%Lx",
    _aC_ = "%#Lx",
    _aD_ = "%LX",
    _aE_ = "%#LX",
    _aF_ = "%Lo",
    _aG_ = "%#Lo",
    _av_ = "%Ld",
    _ay_ = cst_Li,
    _aH_ = "%Lu",
    _aj_ = "%+d",
    _ak_ = "% d",
    _am_ = "%+i",
    _an_ = "% i",
    _ao_ = "%x",
    _ap_ = "%#x",
    _aq_ = "%X",
    _ar_ = "%#X",
    _as_ = "%o",
    _at_ = "%#o",
    _ai_ = cst_d,
    _al_ = cst_i,
    _au_ = cst_u,
    _t_ = "@]",
    _u_ = "@}",
    _v_ = "@?",
    _w_ = "@\n",
    _x_ = "@.",
    _y_ = "@@",
    _z_ = "@%",
    _A_ = "@",
    _ah_ = "CamlinternalFormat.Type_mismatch",
    _bn_ = cst$2,
    _bo_ = [0, [11, ", ", [2, 0, [2, 0, 0]]], ", %s%s"],
    _bK_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _bL_ =
      [0,
       [11,
        "Fatal error in uncaught exception handler: exception ",
        [2, 0, [12, 10, 0]]],
       "Fatal error in uncaught exception handler: exception %s\n"],
    _bJ_ = "Fatal error: out of memory in uncaught exception handler",
    _bI_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _bG_ = [0, [2, 0, [12, 10, 0]], "%s\n"],
    _by_ = "Raised at",
    _bz_ = "Re-raised at",
    _bA_ = "Raised by primitive operation at",
    _bB_ = "Called from",
    _bC_ = " (inlined)",
    _bE_ = cst$2,
    _bD_ =
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           ' in file "',
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11, ", line ", [4, 0, 0, 0, [11, cst_characters, partial]]]]]]]]]],
       '%s %s in file "%s"%s, line %d, characters %d-%d'],
    _bF_ = [0, [2, 0, [11, " unknown location", 0]], "%s unknown location"],
    _bt_ = "Out of memory",
    _bu_ = "Stack overflow",
    _bv_ = "Pattern matching failed",
    _bw_ = "Assertion failed",
    _bx_ = "Undefined recursive module",
    _bp_ = [0, [12, 40, [2, 0, [2, 0, [12, 41, 0]]]], "(%s%s)"],
    _bq_ = cst$2,
    _br_ = cst$2,
    _bs_ = [0, [12, 40, [2, 0, [12, 41, 0]]], "(%s)"],
    _bm_ = [0, [4, 0, 0, 0, 0], cst_d],
    _bk_ = [0, [3, 0, 0], "%S"],
    _bl_ = "_",
    _bH_ =
      [0,
       cst$2,
       "(Cannot print locations:\n bytecode executable program file not found)",
       "(Cannot print locations:\n bytecode executable program file appears to be corrupt)",
       "(Cannot print locations:\n bytecode executable program file has wrong magic number)",
       "(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)"],
    _bR_ = caml_int64_create_lo_mi_hi(14371852, 15349651, 22696),
    _bS_ = caml_int64_create_lo_mi_hi(12230193, 11438743, 35013),
    _bT_ = caml_int64_create_lo_mi_hi(1424933, 15549263, 2083),
    _bU_ = caml_int64_create_lo_mi_hi(9492471, 4696708, 43520),
    _bM_ = caml_int64_create_lo_mi_hi(1, 0, 0),
    _bN_ = caml_int64_create_lo_mi_hi(0, 0, 0),
    _bQ_ = caml_int64_create_lo_mi_hi(1, 0, 0),
    _bO_ = caml_int64_create_lo_mi_hi(0, 0, 0),
    _bP_ = caml_int64_create_lo_mi_hi(2, 0, 0),
    _bZ_ = "Hashtbl: unsupported hash table format",
    _bX_ = cst$2,
    _b0_ = "Jsoo_runtime.Error.Exn",
    _b__ = "canvas",
    _b8_ = "dt",
    _b7_ = "dd",
    _b6_ = "img",
    _b5_ = "a",
    _b4_ = "div",
    _b3_ = "li",
    _b2_ = "dl",
    _b1_ = "ul",
    _b9_ = "Js_of_ocaml__Dom_html.Canvas_not_available",
    _b$_ = "[\\][()\\\\|+*.?{}^$]",
    _ca_ = "Js_of_ocaml__Url.Local_exn",
    _c5_ = cst$3,
    _co_ = [0, 0],
    _cp_ = [0, 1],
    _cm_ = [0, 0],
    _cn_ = [0, 1],
    _ck_ = [0, 0],
    _cl_ = [0, 0],
    _cj_ = "wakeup_exn",
    _ci_ = "wakeup",
    _cf_ = [0, [11, cst_Lwt, [2, 0, 0]], cst_Lwt_s],
    _cg_ = [0, [11, cst_Lwt, [2, 0, 0]], cst_Lwt_s],
    _ch_ = [0, 0],
    _cd_ = cst_Fatal_error_exception,
    _ce_ = "Lwt.Resolution_loop.Canceled",
    _cs_ = cst$2,
    _cr_ = "Js_of_ocaml_lwt__Lwt_xmlHttpRequest.Wrong_headers",
    _ct_ = "Exception during Lwt.async: ",
    _c1_ = cst_info_38_png,
    _c2_ = cst_globe_38_png,
    _c3_ = cst_meeting_point_38_png,
    _c4_ = cst_ocsigen_powered_png,
    _cW_ = ".wikipedia.org/wiki/",
    _cX_ = "http://",
    _cR_ = cst_px,
    _cZ_ = cst_jpg,
    _c0_ = "images/",
    _cS_ = cst$2,
    _cY_ = "?uselang=",
    _cT_ = "http://commons.wikimedia.org/wiki/File:",
    _cU_ = cst_commons_38_png,
    _cV_ = cst_wikipedia_38_png,
    _cK_ = cst_px,
    _cL_ = "px 3px",
    _cM_ = "px 3px ",
    _cN_ = cst_on,
    _cP_ = cst_off,
    _cO_ = "filled_button ",
    _cQ_ = cst_px,
    _cI_ = cst_on,
    _cJ_ = cst_off,
    _cH_ = "image_info.json",
    _cD_ = [0, 0, 0, 0.],
    _cE_ = [254, -1., 0.],
    _cC_ = [0, "examples/hyperbolic/hypertree.ml", 968, 2],
    _cB_ = "<TITLE>",
    _cA_ = cst$2,
    _cy_ = cst_jpg,
    _cz_ = "thumbnails/",
    _cx_ = "messages.json",
    _cu_ = "icons/";
   function erase_rel(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, erase_rel(rest)];
      case 1:
       var rest$0 = param[1]; return [1, erase_rel(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, erase_rel(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, erase_rel(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, erase_rel(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, erase_rel(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, erase_rel(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, erase_rel(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1];
       return [8, ty, erase_rel(rest$7)];
      case 9:
       var rest$8 = param[3], ty1 = param[1];
       return [9, ty1, ty1, erase_rel(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, erase_rel(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, erase_rel(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, erase_rel(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, erase_rel(rest$12)];
      default: var rest$13 = param[1]; return [14, erase_rel(rest$13)];
    }
   }
   function concat_fmtty(fmtty1, fmtty2){
    if(typeof fmtty1 === "number") return fmtty2;
    switch(fmtty1[0]){
      case 0:
       var rest = fmtty1[1]; return [0, concat_fmtty(rest, fmtty2)];
      case 1:
       var rest$0 = fmtty1[1]; return [1, concat_fmtty(rest$0, fmtty2)];
      case 2:
       var rest$1 = fmtty1[1]; return [2, concat_fmtty(rest$1, fmtty2)];
      case 3:
       var rest$2 = fmtty1[1]; return [3, concat_fmtty(rest$2, fmtty2)];
      case 4:
       var rest$3 = fmtty1[1]; return [4, concat_fmtty(rest$3, fmtty2)];
      case 5:
       var rest$4 = fmtty1[1]; return [5, concat_fmtty(rest$4, fmtty2)];
      case 6:
       var rest$5 = fmtty1[1]; return [6, concat_fmtty(rest$5, fmtty2)];
      case 7:
       var rest$6 = fmtty1[1]; return [7, concat_fmtty(rest$6, fmtty2)];
      case 8:
       var rest$7 = fmtty1[2], ty = fmtty1[1];
       return [8, ty, concat_fmtty(rest$7, fmtty2)];
      case 9:
       var rest$8 = fmtty1[3], ty2 = fmtty1[2], ty1 = fmtty1[1];
       return [9, ty1, ty2, concat_fmtty(rest$8, fmtty2)];
      case 10:
       var rest$9 = fmtty1[1]; return [10, concat_fmtty(rest$9, fmtty2)];
      case 11:
       var rest$10 = fmtty1[1]; return [11, concat_fmtty(rest$10, fmtty2)];
      case 12:
       var rest$11 = fmtty1[1]; return [12, concat_fmtty(rest$11, fmtty2)];
      case 13:
       var rest$12 = fmtty1[1]; return [13, concat_fmtty(rest$12, fmtty2)];
      default:
       var rest$13 = fmtty1[1]; return [14, concat_fmtty(rest$13, fmtty2)];
    }
   }
   function concat_fmt(fmt1, fmt2){
    if(typeof fmt1 === "number") return fmt2;
    switch(fmt1[0]){
      case 0:
       var rest = fmt1[1]; return [0, concat_fmt(rest, fmt2)];
      case 1:
       var rest$0 = fmt1[1]; return [1, concat_fmt(rest$0, fmt2)];
      case 2:
       var rest$1 = fmt1[2], pad = fmt1[1];
       return [2, pad, concat_fmt(rest$1, fmt2)];
      case 3:
       var rest$2 = fmt1[2], pad$0 = fmt1[1];
       return [3, pad$0, concat_fmt(rest$2, fmt2)];
      case 4:
       var rest$3 = fmt1[4], prec = fmt1[3], pad$1 = fmt1[2], iconv = fmt1[1];
       return [4, iconv, pad$1, prec, concat_fmt(rest$3, fmt2)];
      case 5:
       var
        rest$4 = fmt1[4],
        prec$0 = fmt1[3],
        pad$2 = fmt1[2],
        iconv$0 = fmt1[1];
       return [5, iconv$0, pad$2, prec$0, concat_fmt(rest$4, fmt2)];
      case 6:
       var
        rest$5 = fmt1[4],
        prec$1 = fmt1[3],
        pad$3 = fmt1[2],
        iconv$1 = fmt1[1];
       return [6, iconv$1, pad$3, prec$1, concat_fmt(rest$5, fmt2)];
      case 7:
       var
        rest$6 = fmt1[4],
        prec$2 = fmt1[3],
        pad$4 = fmt1[2],
        iconv$2 = fmt1[1];
       return [7, iconv$2, pad$4, prec$2, concat_fmt(rest$6, fmt2)];
      case 8:
       var
        rest$7 = fmt1[4],
        prec$3 = fmt1[3],
        pad$5 = fmt1[2],
        fconv = fmt1[1];
       return [8, fconv, pad$5, prec$3, concat_fmt(rest$7, fmt2)];
      case 9:
       var rest$8 = fmt1[2], pad$6 = fmt1[1];
       return [9, pad$6, concat_fmt(rest$8, fmt2)];
      case 10:
       var rest$9 = fmt1[1]; return [10, concat_fmt(rest$9, fmt2)];
      case 11:
       var rest$10 = fmt1[2], str = fmt1[1];
       return [11, str, concat_fmt(rest$10, fmt2)];
      case 12:
       var rest$11 = fmt1[2], chr = fmt1[1];
       return [12, chr, concat_fmt(rest$11, fmt2)];
      case 13:
       var rest$12 = fmt1[3], fmtty = fmt1[2], pad$7 = fmt1[1];
       return [13, pad$7, fmtty, concat_fmt(rest$12, fmt2)];
      case 14:
       var rest$13 = fmt1[3], fmtty$0 = fmt1[2], pad$8 = fmt1[1];
       return [14, pad$8, fmtty$0, concat_fmt(rest$13, fmt2)];
      case 15:
       var rest$14 = fmt1[1]; return [15, concat_fmt(rest$14, fmt2)];
      case 16:
       var rest$15 = fmt1[1]; return [16, concat_fmt(rest$15, fmt2)];
      case 17:
       var rest$16 = fmt1[2], fmting_lit = fmt1[1];
       return [17, fmting_lit, concat_fmt(rest$16, fmt2)];
      case 18:
       var rest$17 = fmt1[2], fmting_gen = fmt1[1];
       return [18, fmting_gen, concat_fmt(rest$17, fmt2)];
      case 19:
       var rest$18 = fmt1[1]; return [19, concat_fmt(rest$18, fmt2)];
      case 20:
       var rest$19 = fmt1[3], char_set = fmt1[2], width_opt = fmt1[1];
       return [20, width_opt, char_set, concat_fmt(rest$19, fmt2)];
      case 21:
       var rest$20 = fmt1[2], counter = fmt1[1];
       return [21, counter, concat_fmt(rest$20, fmt2)];
      case 22:
       var rest$21 = fmt1[1]; return [22, concat_fmt(rest$21, fmt2)];
      case 23:
       var rest$22 = fmt1[2], ign = fmt1[1];
       return [23, ign, concat_fmt(rest$22, fmt2)];
      default:
       var rest$23 = fmt1[3], f = fmt1[2], arity = fmt1[1];
       return [24, arity, f, concat_fmt(rest$23, fmt2)];
    }
   }
   function invalid_arg(s){
    throw caml_maybe_attach_backtrace([0, Invalid_argument, s], 1);
   }
   function min(x, y){return caml_lessequal(x, y) ? x : y;}
   function max(x, y){return caml_greaterequal(x, y) ? x : y;}
   function abs(x){return 0 <= x ? x : - x | 0;}
   function symbol(s1, s2){
    var
     l1 = caml_ml_string_length(s1),
     l2 = caml_ml_string_length(s2),
     s = caml_create_bytes(l1 + l2 | 0);
    caml_blit_string(s1, 0, s, 0, l1);
    caml_blit_string(s2, 0, s, l1, l2);
    return caml_string_of_bytes(s);
   }
   function string_of_bool(b){return b ? _a_ : _b_;}
   caml_ml_open_descriptor_in(0);
   caml_ml_open_descriptor_out(1);
   var stderr = caml_ml_open_descriptor_out(2);
   function flush_all(param){
    var param$0 = caml_ml_out_channels_list(0);
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1];
     try{caml_ml_flush(a);}
     catch(_ik_){
      var _ij_ = caml_wrap_exception(_ik_);
      if(_ij_[1] !== Sys_error) throw caml_maybe_attach_backtrace(_ij_, 0);
     }
     var param$0 = l;
    }
   }
   function output_string(oc, s){
    return caml_ml_output(oc, s, 0, caml_ml_string_length(s));
   }
   function prerr_string(s){return output_string(stderr, s);}
   function prerr_endline(s){
    output_string(stderr, s);
    caml_ml_output_char(stderr, 10);
    return caml_ml_flush(stderr);
   }
   var
    exit_function = [0, flush_all],
    do_domain_local_at_exit = [0, function(param){return 0;}];
   function do_at_exit(param){
    caml_call1(do_domain_local_at_exit[1], 0);
    return caml_call1(caml_atomic_load(exit_function), 0);
   }
   caml_register_named_value("Pervasives.do_at_exit", do_at_exit);
   var
    max_array_length = caml_sys_const_max_wosize(0),
    max_string_length = (4 * max_array_length | 0) - 1 | 0,
    Undefined = [248, _d_, caml_fresh_oo_id(0)];
   function force_lazy_block(blk){
    if(0 !== caml_lazy_update_to_forcing(blk))
     throw caml_maybe_attach_backtrace(Undefined, 1);
    var closure = blk[1];
    blk[1] = 0;
    try{
     var result = caml_call1(closure, 0);
     blk[1] = result;
     caml_lazy_update_to_forward(blk);
     return result;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     blk[1] = function(param){throw caml_maybe_attach_backtrace(e, 0);};
     caml_lazy_reset_to_lazy(blk);
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   function iter(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1];
     caml_call1(f, a);
     var param$0 = l;
    }
   }
   function assq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Not_found, 1);
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(a === x) return b;
     var param$0 = l;
    }
   }
   function make(n, c){
    var s = caml_create_bytes(n);
    caml_fill_bytes(s, 0, n, c);
    return s;
   }
   function sub(s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs){
     var r = caml_create_bytes(len);
     caml_blit_bytes(s, ofs, r, 0, len);
     return r;
    }
    return invalid_arg(_k_);
   }
   function sub_string(b, ofs, len){
    return caml_string_of_bytes(sub(b, ofs, len));
   }
   function blit(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_bytes_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
     return caml_blit_bytes(s1, ofs1, s2, ofs2, len);
    return invalid_arg(_l_);
   }
   function blit_string(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_string_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
     return caml_blit_string(s1, ofs1, s2, ofs2, len);
    return invalid_arg(_m_);
   }
   function make$0(n, c){return caml_string_of_bytes(make(n, c));}
   function sub$0(s, ofs, len){
    return caml_string_of_bytes(sub(caml_bytes_of_string(s), ofs, len));
   }
   function index_rec(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) throw caml_maybe_attach_backtrace(Not_found, 1);
     if(caml_string_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 + 1 | 0, i$0 = i$1;
    }
   }
   function get_int64_le(s, i){
    return caml_bytes_get64(caml_bytes_of_string(s), i);
   }
   function iter$0(f, a){
    var _ih_ = a.length - 1 - 1 | 0, _ig_ = 0;
    if(_ih_ >= 0){
     var i = _ig_;
     for(;;){
      caml_call1(f, a[1 + i]);
      var _ii_ = i + 1 | 0;
      if(_ih_ === i) break;
      var i = _ii_;
     }
    }
    return 0;
   }
   function map(f, a){
    var l = a.length - 1;
    if(0 === l) return [0];
    var
     r = caml_make_vect(l, caml_call1(f, a[1])),
     _ie_ = l - 1 | 0,
     _id_ = 1;
    if(_ie_ >= 1){
     var i = _id_;
     for(;;){
      r[1 + i] = caml_call1(f, a[1 + i]);
      var _if_ = i + 1 | 0;
      if(_ie_ === i) break;
      var i = _if_;
     }
    }
    return r;
   }
   function to_list(a){
    var i$1 = a.length - 1 - 1 | 0, i = i$1, res = 0;
    for(;;){
     if(0 > i) return res;
     var res$0 = [0, a[1 + i], res], i$0 = i - 1 | 0, i = i$0, res = res$0;
    }
   }
   function fold_left(f, x, a){
    var r = [0, x], _ib_ = a.length - 1 - 1 | 0, _ia_ = 0;
    if(_ib_ >= 0){
     var i = _ia_;
     for(;;){
      r[1] = caml_call2(f, r[1], a[1 + i]);
      var _ic_ = i + 1 | 0;
      if(_ib_ === i) break;
      var i = _ic_;
     }
    }
    return r[1];
   }
   var Empty = [248, _s_, caml_fresh_oo_id(0)];
   function add(x, q){
    var cell = [0, x, 0], match = q[3];
    return match
            ? (q[1] = q[1] + 1 | 0, match[2] = cell, q[3] = cell, 0)
            : (q[1] = 1, q[2] = cell, q[3] = cell, 0);
   }
   function resize(b, more){
    var old_pos = b[2], old_len = b[1][2], new_len = [0, old_len];
    for(;;){
     if(new_len[1] >= (old_pos + more | 0)){
      if(max_string_length < new_len[1]){
       if((old_pos + more | 0) > max_string_length)
        throw caml_maybe_attach_backtrace([0, Failure, s], 1);
       new_len[1] = max_string_length;
      }
      var new_buffer = caml_create_bytes(new_len[1]);
      blit(b[1][1], 0, new_buffer, 0, b[2]);
      b[1] = [0, new_buffer, new_len[1]];
      return 0;
     }
     new_len[1] = 2 * new_len[1] | 0;
    }
   }
   function add_string(b, s){
    var
     len = caml_ml_string_length(s),
     position = b[2],
     match = b[1],
     length = match[2],
     buffer = match[1],
     new_position = b[2] + len | 0;
    if(length < new_position){
     resize(b, len);
     blit_string(s, 0, b[1][1], b[2], len);
    }
    else
     caml_blit_string(s, 0, buffer, position, len);
    b[2] = new_position;
    return 0;
   }
   var unique_value = [0, 0], st = caml_make_vect(8, unique_value);
   caml_domain_dls_set(st);
   var key_counter = [0, 0], parent_keys = [0, 0];
   function new_key(split_from_parent, init_orphan){
    var
     idx = caml_atomic_fetch_add(key_counter, 1),
     k = [0, idx, init_orphan];
    if(split_from_parent){
     var split = split_from_parent[1], ki = [0, k, split];
     for(;;){
      var l = caml_atomic_load(parent_keys);
      if(! (1 - caml_atomic_cas(parent_keys, l, [0, ki, l]))) break;
     }
    }
    return k;
   }
   function get(param){
    var
     init = param[2],
     idx = param[1],
     st = caml_domain_dls_get(0),
     len = st.length - 1;
    if(idx < len)
     var st$0 = st;
    else{
     var new_sz = len;
     for(;;){
      if(idx < new_sz){
       var new_st = caml_make_vect(new_sz, unique_value);
       a:
       {
        if
         (0 <= len
          &&
           (st.length - 1 - len | 0) >= 0
           && (new_st.length - 1 - len | 0) >= 0){
         caml_array_blit(st, 0, new_st, 0, len);
         break a;
        }
        invalid_arg(_r_);
       }
       caml_domain_dls_set(new_st);
       var st$0 = new_st;
       break;
      }
      var s = 2 * new_sz | 0, new_sz = s;
     }
    }
    var v = caml_check_bound(st$0, idx)[1 + idx];
    if(v !== unique_value) return v;
    var v$0 = caml_call1(init, 0);
    caml_check_bound(st$0, idx)[1 + idx] = v$0;
    return v$0;
   }
   var at_exit_key = new_key(0, function(param, _h$_){return 0;});
   function do_at_exit$0(param){
    var f = get(at_exit_key);
    return caml_call1(f, 0);
   }
   do_domain_local_at_exit[1] = do_at_exit$0;
   function default_float_precision(fconv){return 5 === fconv[2] ? 12 : -6;}
   function buffer_create(init_size){
    return [0, 0, caml_create_bytes(init_size)];
   }
   function buffer_check_size(buf, overhead){
    var
     len = caml_ml_bytes_length(buf[2]),
     min_len = buf[1] + overhead | 0,
     _h9_ = len < min_len ? 1 : 0;
    if(_h9_){
     var
      x = len * 2 | 0,
      new_len = min_len <= x ? x : min_len,
      new_str = caml_create_bytes(new_len);
     blit(buf[2], 0, new_str, 0, len);
     buf[2] = new_str;
     var _h__ = 0;
    }
    else
     var _h__ = _h9_;
    return _h__;
   }
   function buffer_add_char(buf, c){
    buffer_check_size(buf, 1);
    caml_bytes_set(buf[2], buf[1], c);
    buf[1] = buf[1] + 1 | 0;
    return 0;
   }
   function buffer_add_string(buf, s){
    var str_len = caml_ml_string_length(s);
    buffer_check_size(buf, str_len);
    blit_string(s, 0, buf[2], buf[1], str_len);
    buf[1] = buf[1] + str_len | 0;
    return 0;
   }
   function buffer_contents(buf){return sub_string(buf[2], 0, buf[1]);}
   function string_of_formatting_lit(formatting_lit){
    if(typeof formatting_lit === "number")
     switch(formatting_lit){
       case 0:
        return _t_;
       case 1:
        return _u_;
       case 2:
        return _v_;
       case 3:
        return _w_;
       case 4:
        return _x_;
       case 5:
        return _y_;
       default: return _z_;
     }
    switch(formatting_lit[0]){
      case 0:
       var str = formatting_lit[1]; return str;
      case 1:
       var str$0 = formatting_lit[1]; return str$0;
      default: var c = formatting_lit[1]; return symbol(_A_, make$0(1, c));
    }
   }
   function bprint_fmtty(buf, fmtty){
    var fmtty$0 = fmtty;
    for(;;){
     if(typeof fmtty$0 === "number") return 0;
     switch(fmtty$0[0]){
       case 0:
        var fmtty$1 = fmtty$0[1];
        buffer_add_string(buf, _B_);
        var fmtty$0 = fmtty$1;
        break;
       case 1:
        var fmtty$2 = fmtty$0[1];
        buffer_add_string(buf, _C_);
        var fmtty$0 = fmtty$2;
        break;
       case 2:
        var fmtty$3 = fmtty$0[1];
        buffer_add_string(buf, _D_);
        var fmtty$0 = fmtty$3;
        break;
       case 3:
        var fmtty$4 = fmtty$0[1];
        buffer_add_string(buf, _E_);
        var fmtty$0 = fmtty$4;
        break;
       case 4:
        var fmtty$5 = fmtty$0[1];
        buffer_add_string(buf, _F_);
        var fmtty$0 = fmtty$5;
        break;
       case 5:
        var fmtty$6 = fmtty$0[1];
        buffer_add_string(buf, _G_);
        var fmtty$0 = fmtty$6;
        break;
       case 6:
        var fmtty$7 = fmtty$0[1];
        buffer_add_string(buf, _H_);
        var fmtty$0 = fmtty$7;
        break;
       case 7:
        var fmtty$8 = fmtty$0[1];
        buffer_add_string(buf, _I_);
        var fmtty$0 = fmtty$8;
        break;
       case 8:
        var fmtty$9 = fmtty$0[2], sub_fmtty = fmtty$0[1];
        buffer_add_string(buf, _J_);
        bprint_fmtty(buf, sub_fmtty);
        buffer_add_string(buf, _K_);
        var fmtty$0 = fmtty$9;
        break;
       case 9:
        var fmtty$10 = fmtty$0[3], sub_fmtty$0 = fmtty$0[1];
        buffer_add_string(buf, _L_);
        bprint_fmtty(buf, sub_fmtty$0);
        buffer_add_string(buf, _M_);
        var fmtty$0 = fmtty$10;
        break;
       case 10:
        var fmtty$11 = fmtty$0[1];
        buffer_add_string(buf, _N_);
        var fmtty$0 = fmtty$11;
        break;
       case 11:
        var fmtty$12 = fmtty$0[1];
        buffer_add_string(buf, _O_);
        var fmtty$0 = fmtty$12;
        break;
       case 12:
        var fmtty$13 = fmtty$0[1];
        buffer_add_string(buf, _P_);
        var fmtty$0 = fmtty$13;
        break;
       case 13:
        var fmtty$14 = fmtty$0[1];
        buffer_add_string(buf, _Q_);
        var fmtty$0 = fmtty$14;
        break;
       default:
        var fmtty$15 = fmtty$0[1];
        buffer_add_string(buf, _R_);
        var fmtty$0 = fmtty$15;
     }
    }
   }
   function symm(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, symm(rest)];
      case 1:
       var rest$0 = param[1]; return [1, symm(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, symm(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, symm(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, symm(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, symm(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, symm(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, symm(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1]; return [8, ty, symm(rest$7)];
      case 9:
       var rest$8 = param[3], ty2 = param[2], ty1 = param[1];
       return [9, ty2, ty1, symm(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, symm(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, symm(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, symm(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, symm(rest$12)];
      default: var rest$13 = param[1]; return [14, symm(rest$13)];
    }
   }
   function fmtty_rel_det(param){
    if(typeof param !== "number")
     switch(param[0]){
       case 0:
        var
         rest = param[1],
         match = fmtty_rel_det(rest),
         de = match[4],
         ed = match[3],
         af = match[2],
         fa = match[1],
         _hO_ = function(param){af(0); return 0;};
        return [0, function(param){fa(0); return 0;}, _hO_, ed, de];
       case 1:
        var
         rest$0 = param[1],
         match$0 = fmtty_rel_det(rest$0),
         de$0 = match$0[4],
         ed$0 = match$0[3],
         af$0 = match$0[2],
         fa$0 = match$0[1],
         _hP_ = function(param){af$0(0); return 0;};
        return [0, function(param){fa$0(0); return 0;}, _hP_, ed$0, de$0];
       case 2:
        var
         rest$1 = param[1],
         match$1 = fmtty_rel_det(rest$1),
         de$1 = match$1[4],
         ed$1 = match$1[3],
         af$1 = match$1[2],
         fa$1 = match$1[1],
         _hQ_ = function(param){af$1(0); return 0;};
        return [0, function(param){fa$1(0); return 0;}, _hQ_, ed$1, de$1];
       case 3:
        var
         rest$2 = param[1],
         match$2 = fmtty_rel_det(rest$2),
         de$2 = match$2[4],
         ed$2 = match$2[3],
         af$2 = match$2[2],
         fa$2 = match$2[1],
         _hR_ = function(param){af$2(0); return 0;};
        return [0, function(param){fa$2(0); return 0;}, _hR_, ed$2, de$2];
       case 4:
        var
         rest$3 = param[1],
         match$3 = fmtty_rel_det(rest$3),
         de$3 = match$3[4],
         ed$3 = match$3[3],
         af$3 = match$3[2],
         fa$3 = match$3[1],
         _hS_ = function(param){af$3(0); return 0;};
        return [0, function(param){fa$3(0); return 0;}, _hS_, ed$3, de$3];
       case 5:
        var
         rest$4 = param[1],
         match$4 = fmtty_rel_det(rest$4),
         de$4 = match$4[4],
         ed$4 = match$4[3],
         af$4 = match$4[2],
         fa$4 = match$4[1],
         _hT_ = function(param){af$4(0); return 0;};
        return [0, function(param){fa$4(0); return 0;}, _hT_, ed$4, de$4];
       case 6:
        var
         rest$5 = param[1],
         match$5 = fmtty_rel_det(rest$5),
         de$5 = match$5[4],
         ed$5 = match$5[3],
         af$5 = match$5[2],
         fa$5 = match$5[1],
         _hU_ = function(param){af$5(0); return 0;};
        return [0, function(param){fa$5(0); return 0;}, _hU_, ed$5, de$5];
       case 7:
        var
         rest$6 = param[1],
         match$6 = fmtty_rel_det(rest$6),
         de$6 = match$6[4],
         ed$6 = match$6[3],
         af$6 = match$6[2],
         fa$6 = match$6[1],
         _hV_ = function(param){af$6(0); return 0;};
        return [0, function(param){fa$6(0); return 0;}, _hV_, ed$6, de$6];
       case 8:
        var
         rest$7 = param[2],
         match$7 = fmtty_rel_det(rest$7),
         de$7 = match$7[4],
         ed$7 = match$7[3],
         af$7 = match$7[2],
         fa$7 = match$7[1],
         _hW_ = function(param){af$7(0); return 0;};
        return [0, function(param){fa$7(0); return 0;}, _hW_, ed$7, de$7];
       case 9:
        var
         rest$8 = param[3],
         ty2 = param[2],
         ty1 = param[1],
         match$8 = fmtty_rel_det(rest$8),
         de$8 = match$8[4],
         ed$8 = match$8[3],
         af$8 = match$8[2],
         fa$8 = match$8[1],
         ty = trans(symm(ty1), ty2),
         match$9 = fmtty_rel_det(ty),
         jd = match$9[4],
         dj = match$9[3],
         ga = match$9[2],
         ag = match$9[1],
         _hX_ = function(param){jd(0); de$8(0); return 0;},
         _hY_ = function(param){ed$8(0); dj(0); return 0;},
         _hZ_ = function(param){ga(0); af$8(0); return 0;};
        return [0,
                function(param){fa$8(0); ag(0); return 0;},
                _hZ_,
                _hY_,
                _hX_];
       case 10:
        var
         rest$9 = param[1],
         match$10 = fmtty_rel_det(rest$9),
         de$9 = match$10[4],
         ed$9 = match$10[3],
         af$9 = match$10[2],
         fa$9 = match$10[1],
         _h0_ = function(param){af$9(0); return 0;};
        return [0, function(param){fa$9(0); return 0;}, _h0_, ed$9, de$9];
       case 11:
        var
         rest$10 = param[1],
         match$11 = fmtty_rel_det(rest$10),
         de$10 = match$11[4],
         ed$10 = match$11[3],
         af$10 = match$11[2],
         fa$10 = match$11[1],
         _h1_ = function(param){af$10(0); return 0;};
        return [0, function(param){fa$10(0); return 0;}, _h1_, ed$10, de$10];
       case 12:
        var
         rest$11 = param[1],
         match$12 = fmtty_rel_det(rest$11),
         de$11 = match$12[4],
         ed$11 = match$12[3],
         af$11 = match$12[2],
         fa$11 = match$12[1],
         _h2_ = function(param){af$11(0); return 0;};
        return [0, function(param){fa$11(0); return 0;}, _h2_, ed$11, de$11];
       case 13:
        var
         rest$12 = param[1],
         match$13 = fmtty_rel_det(rest$12),
         de$12 = match$13[4],
         ed$12 = match$13[3],
         af$12 = match$13[2],
         fa$12 = match$13[1],
         _h3_ = function(param){de$12(0); return 0;},
         _h4_ = function(param){ed$12(0); return 0;},
         _h5_ = function(param){af$12(0); return 0;};
        return [0, function(param){fa$12(0); return 0;}, _h5_, _h4_, _h3_];
       default:
        var
         rest$13 = param[1],
         match$14 = fmtty_rel_det(rest$13),
         de$13 = match$14[4],
         ed$13 = match$14[3],
         af$13 = match$14[2],
         fa$13 = match$14[1],
         _h6_ = function(param){de$13(0); return 0;},
         _h7_ = function(param){ed$13(0); return 0;},
         _h8_ = function(param){af$13(0); return 0;};
        return [0, function(param){fa$13(0); return 0;}, _h8_, _h7_, _h6_];
     }
    function _hL_(param){return 0;}
    function _hM_(param){return 0;}
    function _hN_(param){return 0;}
    return [0, function(param){return 0;}, _hN_, _hM_, _hL_];
   }
   function trans(ty1, ty2){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           if(typeof ty1 !== "number"){
            switch(ty1[0]){
              case 0:
               var rest1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 0:
                   var rest2 = ty2[1]; return [0, trans(rest1, rest2)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 1:
               var rest1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 1:
                   var rest2$0 = ty2[1]; return [1, trans(rest1$0, rest2$0)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 2:
               var rest1$1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 2:
                   var rest2$1 = ty2[1]; return [2, trans(rest1$1, rest2$1)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 3:
               var rest1$2 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 3:
                   var rest2$2 = ty2[1]; return [3, trans(rest1$2, rest2$2)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 4:
               var rest1$3 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 4:
                   var rest2$3 = ty2[1]; return [4, trans(rest1$3, rest2$3)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 5:
               var rest1$4 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 5:
                   var rest2$4 = ty2[1]; return [5, trans(rest1$4, rest2$4)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 6:
               var rest1$5 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 6:
                   var rest2$5 = ty2[1]; return [6, trans(rest1$5, rest2$5)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 7:
               var rest1$6 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 7:
                   var rest2$6 = ty2[1]; return [7, trans(rest1$6, rest2$6)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 8:
               var rest1$7 = ty1[2], ty1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   var
                    rest2$7 = ty2[2],
                    ty2$0 = ty2[1],
                    _hK_ = trans(rest1$7, rest2$7);
                   return [8, trans(ty1$0, ty2$0), _hK_];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aa_], 1);
              case 9:
               var rest1$8 = ty1[3], ty12 = ty1[2], ty11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   break f;
                  case 9:
                   var
                    rest2$8 = ty2[3],
                    ty22 = ty2[2],
                    ty21 = ty2[1],
                    ty = trans(symm(ty12), ty21),
                    match = fmtty_rel_det(ty),
                    f4 = match[4],
                    f2 = match[2];
                   f2(0);
                   f4(0);
                   return [9, ty11, ty22, trans(rest1$8, rest2$8)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _ab_], 1);
              case 10:
               var rest1$9 = ty1[1];
               if(typeof ty2 !== "number" && 10 === ty2[0]){
                var rest2$9 = ty2[1];
                return [10, trans(rest1$9, rest2$9)];
               }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _ac_], 1);
              case 11:
               var rest1$10 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   var rest2$10 = ty2[1];
                   return [11, trans(rest1$10, rest2$10)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _ad_], 1);
              case 12:
               var rest1$11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   var rest2$11 = ty2[1];
                   return [12, trans(rest1$11, rest2$11)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _ae_], 1);
              case 13:
               var rest1$12 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   var rest2$12 = ty2[1];
                   return [13, trans(rest1$12, rest2$12)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _af_], 1);
              default:
               var rest1$13 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   var rest2$13 = ty2[1];
                   return [14, trans(rest1$13, rest2$13)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _ag_], 1);
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _$_], 1);
           }
           if(typeof ty2 === "number") return 0;
           switch(ty2[0]){
             case 10:
              break a;
             case 11:
              break b;
             case 12:
              break c;
             case 13:
              break d;
             case 14:
              break e;
             case 8:
              break f;
             case 9: break;
             default:
              throw caml_maybe_attach_backtrace([0, Assert_failure, _S_], 1);
           }
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, _V_], 1);
         }
         throw caml_maybe_attach_backtrace([0, Assert_failure, _U_], 1);
        }
        throw caml_maybe_attach_backtrace([0, Assert_failure, ___], 1);
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, _Z_], 1);
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _Y_], 1);
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _X_], 1);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _W_], 1);
   }
   var Type_mismatch = [248, _ah_, caml_fresh_oo_id(0)];
   function type_padding(pad, fmtty){
    if(typeof pad === "number") return [0, 0, fmtty];
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     return [0, [0, padty, w], fmtty];
    }
    if(typeof fmtty !== "number" && 2 === fmtty[0]){
     var rest = fmtty[1], padty$0 = pad[1];
     return [0, [1, padty$0], rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_padprec(pad, prec, fmtty){
    var match = type_padding(pad, fmtty);
    if(typeof prec !== "number"){
     var rest$1 = match[2], pad$2 = match[1], p = prec[1];
     return [0, pad$2, [0, p], rest$1];
    }
    if(! prec){
     var rest$0 = match[2], pad$1 = match[1];
     return [0, pad$1, 0, rest$0];
    }
    var match$0 = match[2];
    if(typeof match$0 !== "number" && 2 === match$0[0]){
     var rest = match$0[1], pad$0 = match[1];
     return [0, pad$0, 1, rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_ignored_param_one(ign, fmt, fmtty){
    var
     match = type_format_gen(fmt, fmtty),
     fmtty$0 = match[2],
     fmt$0 = match[1];
    return [0, [23, ign, fmt$0], fmtty$0];
   }
   function type_format_gen(fmt, fmtty0){
    if(typeof fmt === "number") return [0, 0, fmtty0];
    switch(fmt[0]){
      case 0:
       if(typeof fmtty0 !== "number" && 0 === fmtty0[0]){
        var
         fmtty_rest = fmtty0[1],
         fmt_rest = fmt[1],
         match = type_format_gen(fmt_rest, fmtty_rest),
         fmtty = match[2],
         fmt$0 = match[1];
        return [0, [0, fmt$0], fmtty];
       }
       break;
      case 1:
       if(typeof fmtty0 !== "number" && 0 === fmtty0[0]){
        var
         fmtty_rest$0 = fmtty0[1],
         fmt_rest$0 = fmt[1],
         match$0 = type_format_gen(fmt_rest$0, fmtty_rest$0),
         fmtty$0 = match$0[2],
         fmt$1 = match$0[1];
        return [0, [1, fmt$1], fmtty$0];
       }
       break;
      case 2:
       var
        fmt_rest$1 = fmt[2],
        pad = fmt[1],
        match$1 = type_padding(pad, fmtty0),
        pad$0 = match$1[1],
        match$2 = match$1[2];
       if(typeof match$2 !== "number" && 1 === match$2[0]){
        var
         fmtty_rest$1 = match$2[1],
         match$3 = type_format_gen(fmt_rest$1, fmtty_rest$1),
         fmtty$1 = match$3[2],
         fmt$2 = match$3[1];
        return [0, [2, pad$0, fmt$2], fmtty$1];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 3:
       var
        fmt_rest$2 = fmt[2],
        pad$1 = fmt[1],
        match$4 = type_padding(pad$1, fmtty0),
        pad$2 = match$4[1],
        match$5 = match$4[2];
       if(typeof match$5 !== "number" && 1 === match$5[0]){
        var
         fmtty_rest$2 = match$5[1],
         match$6 = type_format_gen(fmt_rest$2, fmtty_rest$2),
         fmtty$2 = match$6[2],
         fmt$3 = match$6[1];
        return [0, [3, pad$2, fmt$3], fmtty$2];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 4:
       var
        fmt_rest$3 = fmt[4],
        prec = fmt[3],
        pad$3 = fmt[2],
        iconv = fmt[1],
        match$7 = type_padprec(pad$3, prec, fmtty0),
        pad$4 = match$7[1],
        match$8 = match$7[3];
       if(typeof match$8 !== "number" && 2 === match$8[0]){
        var
         fmtty_rest$3 = match$8[1],
         prec$0 = match$7[2],
         match$9 = type_format_gen(fmt_rest$3, fmtty_rest$3),
         fmtty$3 = match$9[2],
         fmt$4 = match$9[1];
        return [0, [4, iconv, pad$4, prec$0, fmt$4], fmtty$3];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 5:
       var
        fmt_rest$4 = fmt[4],
        prec$1 = fmt[3],
        pad$5 = fmt[2],
        iconv$0 = fmt[1],
        match$10 = type_padprec(pad$5, prec$1, fmtty0),
        pad$6 = match$10[1],
        match$11 = match$10[3];
       if(typeof match$11 !== "number" && 3 === match$11[0]){
        var
         fmtty_rest$4 = match$11[1],
         prec$2 = match$10[2],
         match$12 = type_format_gen(fmt_rest$4, fmtty_rest$4),
         fmtty$4 = match$12[2],
         fmt$5 = match$12[1];
        return [0, [5, iconv$0, pad$6, prec$2, fmt$5], fmtty$4];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 6:
       var
        fmt_rest$5 = fmt[4],
        prec$3 = fmt[3],
        pad$7 = fmt[2],
        iconv$1 = fmt[1],
        match$13 = type_padprec(pad$7, prec$3, fmtty0),
        pad$8 = match$13[1],
        match$14 = match$13[3];
       if(typeof match$14 !== "number" && 4 === match$14[0]){
        var
         fmtty_rest$5 = match$14[1],
         prec$4 = match$13[2],
         match$15 = type_format_gen(fmt_rest$5, fmtty_rest$5),
         fmtty$5 = match$15[2],
         fmt$6 = match$15[1];
        return [0, [6, iconv$1, pad$8, prec$4, fmt$6], fmtty$5];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 7:
       var
        fmt_rest$6 = fmt[4],
        prec$5 = fmt[3],
        pad$9 = fmt[2],
        iconv$2 = fmt[1],
        match$16 = type_padprec(pad$9, prec$5, fmtty0),
        pad$10 = match$16[1],
        match$17 = match$16[3];
       if(typeof match$17 !== "number" && 5 === match$17[0]){
        var
         fmtty_rest$6 = match$17[1],
         prec$6 = match$16[2],
         match$18 = type_format_gen(fmt_rest$6, fmtty_rest$6),
         fmtty$6 = match$18[2],
         fmt$7 = match$18[1];
        return [0, [7, iconv$2, pad$10, prec$6, fmt$7], fmtty$6];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 8:
       var
        fmt_rest$7 = fmt[4],
        prec$7 = fmt[3],
        pad$11 = fmt[2],
        fconv = fmt[1],
        match$19 = type_padprec(pad$11, prec$7, fmtty0),
        pad$12 = match$19[1],
        match$20 = match$19[3];
       if(typeof match$20 !== "number" && 6 === match$20[0]){
        var
         fmtty_rest$7 = match$20[1],
         prec$8 = match$19[2],
         match$21 = type_format_gen(fmt_rest$7, fmtty_rest$7),
         fmtty$7 = match$21[2],
         fmt$8 = match$21[1];
        return [0, [8, fconv, pad$12, prec$8, fmt$8], fmtty$7];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 9:
       var
        fmt_rest$8 = fmt[2],
        pad$13 = fmt[1],
        match$22 = type_padding(pad$13, fmtty0),
        pad$14 = match$22[1],
        match$23 = match$22[2];
       if(typeof match$23 !== "number" && 7 === match$23[0]){
        var
         fmtty_rest$8 = match$23[1],
         match$24 = type_format_gen(fmt_rest$8, fmtty_rest$8),
         fmtty$8 = match$24[2],
         fmt$9 = match$24[1];
        return [0, [9, pad$14, fmt$9], fmtty$8];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 10:
       var
        fmt_rest$9 = fmt[1],
        match$25 = type_format_gen(fmt_rest$9, fmtty0),
        fmtty$9 = match$25[2],
        fmt$10 = match$25[1];
       return [0, [10, fmt$10], fmtty$9];
      case 11:
       var
        fmt_rest$10 = fmt[2],
        str = fmt[1],
        match$26 = type_format_gen(fmt_rest$10, fmtty0),
        fmtty$10 = match$26[2],
        fmt$11 = match$26[1];
       return [0, [11, str, fmt$11], fmtty$10];
      case 12:
       var
        fmt_rest$11 = fmt[2],
        chr = fmt[1],
        match$27 = type_format_gen(fmt_rest$11, fmtty0),
        fmtty$11 = match$27[2],
        fmt$12 = match$27[1];
       return [0, [12, chr, fmt$12], fmtty$11];
      case 13:
       if(typeof fmtty0 !== "number" && 8 === fmtty0[0]){
        var
         fmtty_rest$9 = fmtty0[2],
         sub_fmtty = fmtty0[1],
         fmt_rest$12 = fmt[3],
         sub_fmtty$0 = fmt[2],
         pad_opt = fmt[1];
        if(caml_notequal([0, sub_fmtty$0], [0, sub_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$28 = type_format_gen(fmt_rest$12, fmtty_rest$9),
         fmtty$12 = match$28[2],
         fmt$13 = match$28[1];
        return [0, [13, pad_opt, sub_fmtty, fmt$13], fmtty$12];
       }
       break;
      case 14:
       if(typeof fmtty0 !== "number" && 9 === fmtty0[0]){
        var
         fmtty_rest$10 = fmtty0[3],
         sub_fmtty1 = fmtty0[1],
         fmt_rest$13 = fmt[3],
         sub_fmtty$1 = fmt[2],
         pad_opt$0 = fmt[1],
         _hI_ = [0, erase_rel(sub_fmtty1)];
        if(caml_notequal([0, erase_rel(sub_fmtty$1)], _hI_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$29 = type_format_gen(fmt_rest$13, erase_rel(fmtty_rest$10)),
         fmtty$13 = match$29[2],
         fmt$14 = match$29[1];
        return [0, [14, pad_opt$0, sub_fmtty1, fmt$14], fmtty$13];
       }
       break;
      case 15:
       if(typeof fmtty0 !== "number" && 10 === fmtty0[0]){
        var
         fmtty_rest$11 = fmtty0[1],
         fmt_rest$14 = fmt[1],
         match$30 = type_format_gen(fmt_rest$14, fmtty_rest$11),
         fmtty$14 = match$30[2],
         fmt$15 = match$30[1];
        return [0, [15, fmt$15], fmtty$14];
       }
       break;
      case 16:
       if(typeof fmtty0 !== "number" && 11 === fmtty0[0]){
        var
         fmtty_rest$12 = fmtty0[1],
         fmt_rest$15 = fmt[1],
         match$31 = type_format_gen(fmt_rest$15, fmtty_rest$12),
         fmtty$15 = match$31[2],
         fmt$16 = match$31[1];
        return [0, [16, fmt$16], fmtty$15];
       }
       break;
      case 17:
       var
        fmt_rest$16 = fmt[2],
        formatting_lit = fmt[1],
        match$32 = type_format_gen(fmt_rest$16, fmtty0),
        fmtty$16 = match$32[2],
        fmt$17 = match$32[1];
       return [0, [17, formatting_lit, fmt$17], fmtty$16];
      case 18:
       var fmt_rest$17 = fmt[2], formatting_gen = fmt[1];
       if(0 === formatting_gen[0]){
        var
         match$36 = formatting_gen[1],
         str$0 = match$36[2],
         fmt1 = match$36[1],
         match$37 = type_format_gen(fmt1, fmtty0),
         fmtty2 = match$37[2],
         fmt2 = match$37[1],
         match$38 = type_format_gen(fmt_rest$17, fmtty2),
         fmtty3 = match$38[2],
         fmt3 = match$38[1];
        return [0, [18, [0, [0, fmt2, str$0]], fmt3], fmtty3];
       }
       var
        match$39 = formatting_gen[1],
        str$1 = match$39[2],
        fmt1$0 = match$39[1],
        match$40 = type_format_gen(fmt1$0, fmtty0),
        fmtty2$0 = match$40[2],
        fmt2$0 = match$40[1],
        match$41 = type_format_gen(fmt_rest$17, fmtty2$0),
        fmtty3$0 = match$41[2],
        fmt3$0 = match$41[1];
       return [0, [18, [1, [0, fmt2$0, str$1]], fmt3$0], fmtty3$0];
      case 19:
       if(typeof fmtty0 !== "number" && 13 === fmtty0[0]){
        var
         fmtty_rest$13 = fmtty0[1],
         fmt_rest$18 = fmt[1],
         match$33 = type_format_gen(fmt_rest$18, fmtty_rest$13),
         fmtty$17 = match$33[2],
         fmt$18 = match$33[1];
        return [0, [19, fmt$18], fmtty$17];
       }
       break;
      case 20:
       if(typeof fmtty0 !== "number" && 1 === fmtty0[0]){
        var
         fmtty_rest$14 = fmtty0[1],
         fmt_rest$19 = fmt[3],
         char_set = fmt[2],
         width_opt = fmt[1],
         match$34 = type_format_gen(fmt_rest$19, fmtty_rest$14),
         fmtty$18 = match$34[2],
         fmt$19 = match$34[1];
        return [0, [20, width_opt, char_set, fmt$19], fmtty$18];
       }
       break;
      case 21:
       if(typeof fmtty0 !== "number" && 2 === fmtty0[0]){
        var
         fmtty_rest$15 = fmtty0[1],
         fmt_rest$20 = fmt[2],
         counter = fmt[1],
         match$35 = type_format_gen(fmt_rest$20, fmtty_rest$15),
         fmtty$19 = match$35[2],
         fmt$20 = match$35[1];
        return [0, [21, counter, fmt$20], fmtty$19];
       }
       break;
      case 23:
       var rest = fmt[2], ign = fmt[1];
       if(typeof ign !== "number")
        switch(ign[0]){
          case 0:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 1:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 2:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 3:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 4:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 5:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 6:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 7:
           return type_ignored_param_one(ign, rest, fmtty0);
          case 8:
           var sub_fmtty$2 = ign[2], pad_opt$1 = ign[1];
           return type_ignored_param_one
                   ([8, pad_opt$1, sub_fmtty$2], rest, fmtty0);
          case 9:
           var
            sub_fmtty$3 = ign[2],
            pad_opt$2 = ign[1],
            _hJ_ = type_ignored_format_substituti(sub_fmtty$3, rest, fmtty0),
            match$43 = _hJ_[2],
            fmtty$21 = match$43[2],
            fmt$22 = match$43[1],
            sub_fmtty$4 = _hJ_[1];
           return [0, [23, [9, pad_opt$2, sub_fmtty$4], fmt$22], fmtty$21];
          case 10:
           return type_ignored_param_one(ign, rest, fmtty0);
          default: return type_ignored_param_one(ign, rest, fmtty0);
        }
       switch(ign){
         case 0:
          return type_ignored_param_one(ign, rest, fmtty0);
         case 1:
          return type_ignored_param_one(ign, rest, fmtty0);
         case 2:
          if(typeof fmtty0 !== "number" && 14 === fmtty0[0]){
           var
            fmtty_rest$16 = fmtty0[1],
            match$42 = type_format_gen(rest, fmtty_rest$16),
            fmtty$20 = match$42[2],
            fmt$21 = match$42[1];
           return [0, [23, 2, fmt$21], fmtty$20];
          }
          throw caml_maybe_attach_backtrace(Type_mismatch, 1);
         default: return type_ignored_param_one(ign, rest, fmtty0);
       }
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_ignored_format_substituti(sub_fmtty, fmt, fmtty){
    if(typeof sub_fmtty === "number")
     return [0, 0, type_format_gen(fmt, fmtty)];
    switch(sub_fmtty[0]){
      case 0:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
        var
         fmtty_rest = fmtty[1],
         sub_fmtty_rest = sub_fmtty[1],
         match =
           type_ignored_format_substituti(sub_fmtty_rest, fmt, fmtty_rest),
         fmt$0 = match[2],
         sub_fmtty_rest$0 = match[1];
        return [0, [0, sub_fmtty_rest$0], fmt$0];
       }
       break;
      case 1:
       if(typeof fmtty !== "number" && 1 === fmtty[0]){
        var
         fmtty_rest$0 = fmtty[1],
         sub_fmtty_rest$1 = sub_fmtty[1],
         match$0 =
           type_ignored_format_substituti(sub_fmtty_rest$1, fmt, fmtty_rest$0),
         fmt$1 = match$0[2],
         sub_fmtty_rest$2 = match$0[1];
        return [0, [1, sub_fmtty_rest$2], fmt$1];
       }
       break;
      case 2:
       if(typeof fmtty !== "number" && 2 === fmtty[0]){
        var
         fmtty_rest$1 = fmtty[1],
         sub_fmtty_rest$3 = sub_fmtty[1],
         match$1 =
           type_ignored_format_substituti(sub_fmtty_rest$3, fmt, fmtty_rest$1),
         fmt$2 = match$1[2],
         sub_fmtty_rest$4 = match$1[1];
        return [0, [2, sub_fmtty_rest$4], fmt$2];
       }
       break;
      case 3:
       if(typeof fmtty !== "number" && 3 === fmtty[0]){
        var
         fmtty_rest$2 = fmtty[1],
         sub_fmtty_rest$5 = sub_fmtty[1],
         match$2 =
           type_ignored_format_substituti(sub_fmtty_rest$5, fmt, fmtty_rest$2),
         fmt$3 = match$2[2],
         sub_fmtty_rest$6 = match$2[1];
        return [0, [3, sub_fmtty_rest$6], fmt$3];
       }
       break;
      case 4:
       if(typeof fmtty !== "number" && 4 === fmtty[0]){
        var
         fmtty_rest$3 = fmtty[1],
         sub_fmtty_rest$7 = sub_fmtty[1],
         match$3 =
           type_ignored_format_substituti(sub_fmtty_rest$7, fmt, fmtty_rest$3),
         fmt$4 = match$3[2],
         sub_fmtty_rest$8 = match$3[1];
        return [0, [4, sub_fmtty_rest$8], fmt$4];
       }
       break;
      case 5:
       if(typeof fmtty !== "number" && 5 === fmtty[0]){
        var
         fmtty_rest$4 = fmtty[1],
         sub_fmtty_rest$9 = sub_fmtty[1],
         match$4 =
           type_ignored_format_substituti(sub_fmtty_rest$9, fmt, fmtty_rest$4),
         fmt$5 = match$4[2],
         sub_fmtty_rest$10 = match$4[1];
        return [0, [5, sub_fmtty_rest$10], fmt$5];
       }
       break;
      case 6:
       if(typeof fmtty !== "number" && 6 === fmtty[0]){
        var
         fmtty_rest$5 = fmtty[1],
         sub_fmtty_rest$11 = sub_fmtty[1],
         match$5 =
           type_ignored_format_substituti
            (sub_fmtty_rest$11, fmt, fmtty_rest$5),
         fmt$6 = match$5[2],
         sub_fmtty_rest$12 = match$5[1];
        return [0, [6, sub_fmtty_rest$12], fmt$6];
       }
       break;
      case 7:
       if(typeof fmtty !== "number" && 7 === fmtty[0]){
        var
         fmtty_rest$6 = fmtty[1],
         sub_fmtty_rest$13 = sub_fmtty[1],
         match$6 =
           type_ignored_format_substituti
            (sub_fmtty_rest$13, fmt, fmtty_rest$6),
         fmt$7 = match$6[2],
         sub_fmtty_rest$14 = match$6[1];
        return [0, [7, sub_fmtty_rest$14], fmt$7];
       }
       break;
      case 8:
       if(typeof fmtty !== "number" && 8 === fmtty[0]){
        var
         fmtty_rest$7 = fmtty[2],
         sub2_fmtty = fmtty[1],
         sub_fmtty_rest$15 = sub_fmtty[2],
         sub2_fmtty$0 = sub_fmtty[1];
        if(caml_notequal([0, sub2_fmtty$0], [0, sub2_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$7 =
           type_ignored_format_substituti
            (sub_fmtty_rest$15, fmt, fmtty_rest$7),
         fmt$8 = match$7[2],
         sub_fmtty_rest$16 = match$7[1];
        return [0, [8, sub2_fmtty, sub_fmtty_rest$16], fmt$8];
       }
       break;
      case 9:
       if(typeof fmtty !== "number" && 9 === fmtty[0]){
        var
         fmtty_rest$8 = fmtty[3],
         sub2_fmtty$1 = fmtty[2],
         sub1_fmtty = fmtty[1],
         sub_fmtty_rest$17 = sub_fmtty[3],
         sub2_fmtty$2 = sub_fmtty[2],
         sub1_fmtty$0 = sub_fmtty[1],
         _hG_ = [0, erase_rel(sub1_fmtty)];
        if(caml_notequal([0, erase_rel(sub1_fmtty$0)], _hG_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var _hH_ = [0, erase_rel(sub2_fmtty$1)];
        if(caml_notequal([0, erase_rel(sub2_fmtty$2)], _hH_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         sub_fmtty$0 = trans(symm(sub1_fmtty), sub2_fmtty$1),
         match$8 = fmtty_rel_det(sub_fmtty$0),
         f4 = match$8[4],
         f2 = match$8[2];
        f2(0);
        f4(0);
        var
         match$9 =
           type_ignored_format_substituti
            (erase_rel(sub_fmtty_rest$17), fmt, fmtty_rest$8),
         fmt$9 = match$9[2],
         sub_fmtty_rest$18 = match$9[1];
        return [0,
                [9, sub1_fmtty, sub2_fmtty$1, symm(sub_fmtty_rest$18)],
                fmt$9];
       }
       break;
      case 10:
       if(typeof fmtty !== "number" && 10 === fmtty[0]){
        var
         fmtty_rest$9 = fmtty[1],
         sub_fmtty_rest$19 = sub_fmtty[1],
         match$10 =
           type_ignored_format_substituti
            (sub_fmtty_rest$19, fmt, fmtty_rest$9),
         fmt$10 = match$10[2],
         sub_fmtty_rest$20 = match$10[1];
        return [0, [10, sub_fmtty_rest$20], fmt$10];
       }
       break;
      case 11:
       if(typeof fmtty !== "number" && 11 === fmtty[0]){
        var
         fmtty_rest$10 = fmtty[1],
         sub_fmtty_rest$21 = sub_fmtty[1],
         match$11 =
           type_ignored_format_substituti
            (sub_fmtty_rest$21, fmt, fmtty_rest$10),
         fmt$11 = match$11[2],
         sub_fmtty_rest$22 = match$11[1];
        return [0, [11, sub_fmtty_rest$22], fmt$11];
       }
       break;
      case 13:
       if(typeof fmtty !== "number" && 13 === fmtty[0]){
        var
         fmtty_rest$11 = fmtty[1],
         sub_fmtty_rest$23 = sub_fmtty[1],
         match$12 =
           type_ignored_format_substituti
            (sub_fmtty_rest$23, fmt, fmtty_rest$11),
         fmt$12 = match$12[2],
         sub_fmtty_rest$24 = match$12[1];
        return [0, [13, sub_fmtty_rest$24], fmt$12];
       }
       break;
      case 14:
       if(typeof fmtty !== "number" && 14 === fmtty[0]){
        var
         fmtty_rest$12 = fmtty[1],
         sub_fmtty_rest$25 = sub_fmtty[1],
         match$13 =
           type_ignored_format_substituti
            (sub_fmtty_rest$25, fmt, fmtty_rest$12),
         fmt$13 = match$13[2],
         sub_fmtty_rest$26 = match$13[1];
        return [0, [14, sub_fmtty_rest$26], fmt$13];
       }
       break;
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function fix_padding(padty, width, str){
    var
     len = caml_ml_string_length(str),
     padty$0 = 0 <= width ? padty : 0,
     width$0 = abs(width);
    if(width$0 <= len) return str;
    var _hF_ = 2 === padty$0 ? 48 : 32, res = make(width$0, _hF_);
    switch(padty$0){
      case 0:
       blit_string(str, 0, res, 0, len); break;
      case 1:
       blit_string(str, 0, res, width$0 - len | 0, len); break;
      default:
       a:
       if(0 < len){
        if
         (43 !== caml_string_get(str, 0)
          && 45 !== caml_string_get(str, 0) && 32 !== caml_string_get(str, 0))
         break a;
        caml_bytes_set(res, 0, caml_string_get(str, 0));
        blit_string(str, 1, res, (width$0 - len | 0) + 1 | 0, len - 1 | 0);
        break;
       }
       a:
       if(1 < len && 48 === caml_string_get(str, 0)){
        if(120 !== caml_string_get(str, 1) && 88 !== caml_string_get(str, 1))
         break a;
        caml_bytes_set(res, 1, caml_string_get(str, 1));
        blit_string(str, 2, res, (width$0 - len | 0) + 2 | 0, len - 2 | 0);
        break;
       }
       blit_string(str, 0, res, width$0 - len | 0, len);
    }
    return caml_string_of_bytes(res);
   }
   function fix_int_precision(prec, str){
    var
     prec$0 = abs(prec),
     len = caml_ml_string_length(str),
     c = caml_string_get(str, 0);
    a:
    {
     b:
     {
      if(58 > c){
       if(32 !== c){
        if(43 > c) break a;
        switch(c - 43 | 0){
          case 5:
           c:
           if(len < (prec$0 + 2 | 0) && 1 < len){
            if
             (120 !== caml_string_get(str, 1)
              && 88 !== caml_string_get(str, 1))
             break c;
            var res$1 = make(prec$0 + 2 | 0, 48);
            caml_bytes_set(res$1, 1, caml_string_get(str, 1));
            blit_string
             (str, 2, res$1, (prec$0 - len | 0) + 4 | 0, len - 2 | 0);
            return caml_string_of_bytes(res$1);
           }
           break b;
          case 0:
          case 2: break;
          case 1:
          case 3:
          case 4:
           break a;
          default: break b;
        }
       }
       if(len >= (prec$0 + 1 | 0)) break a;
       var res$0 = make(prec$0 + 1 | 0, 48);
       caml_bytes_set(res$0, 0, c);
       blit_string(str, 1, res$0, (prec$0 - len | 0) + 2 | 0, len - 1 | 0);
       return caml_string_of_bytes(res$0);
      }
      if(71 <= c){if(5 < c - 97 >>> 0) break a;} else if(65 > c) break a;
     }
     if(len < prec$0){
      var res = make(prec$0, 48);
      blit_string(str, 0, res, prec$0 - len | 0, len);
      return caml_string_of_bytes(res);
     }
    }
    return str;
   }
   function string_to_caml_string(str$0){
    var
     b = caml_bytes_of_string(str$0),
     n = [0, 0],
     _hx_ = caml_ml_bytes_length(b) - 1 | 0,
     _hw_ = 0;
    if(_hx_ >= 0){
     var i$0 = _hw_;
     for(;;){
      var match = caml_bytes_unsafe_get(b, i$0);
      a:
      {
       b:
       {
        c:
        {
         if(32 <= match){
          var _hB_ = match - 34 | 0;
          if(58 < _hB_ >>> 0){
           if(93 <= _hB_) break c;
          }
          else if(56 < _hB_ - 1 >>> 0) break b;
          var _hC_ = 1;
          break a;
         }
         if(11 <= match){
          if(13 === match) break b;
         }
         else if(8 <= match) break b;
        }
        var _hC_ = 4;
        break a;
       }
       var _hC_ = 2;
      }
      n[1] = n[1] + _hC_ | 0;
      var _hD_ = i$0 + 1 | 0;
      if(_hx_ === i$0) break;
      var i$0 = _hD_;
     }
    }
    if(n[1] === caml_ml_bytes_length(b))
     var _hE_ = b;
    else{
     var s = caml_create_bytes(n[1]);
     n[1] = 0;
     var _hz_ = caml_ml_bytes_length(b) - 1 | 0, _hy_ = 0;
     if(_hz_ >= 0){
      var i = _hy_;
      for(;;){
       var c = caml_bytes_unsafe_get(b, i);
       a:
       {
        b:
        {
         c:
         {
          if(35 <= c){
           if(92 !== c){if(127 <= c) break c; break b;}
          }
          else{
           if(32 > c){
            if(14 <= c) break c;
            switch(c){
              case 8:
               caml_bytes_unsafe_set(s, n[1], 92);
               n[1]++;
               caml_bytes_unsafe_set(s, n[1], 98);
               break a;
              case 9:
               caml_bytes_unsafe_set(s, n[1], 92);
               n[1]++;
               caml_bytes_unsafe_set(s, n[1], 116);
               break a;
              case 10:
               caml_bytes_unsafe_set(s, n[1], 92);
               n[1]++;
               caml_bytes_unsafe_set(s, n[1], 110);
               break a;
              case 13:
               caml_bytes_unsafe_set(s, n[1], 92);
               n[1]++;
               caml_bytes_unsafe_set(s, n[1], 114);
               break a;
              default: break c;
            }
           }
           if(34 > c) break b;
          }
          caml_bytes_unsafe_set(s, n[1], 92);
          n[1]++;
          caml_bytes_unsafe_set(s, n[1], c);
          break a;
         }
         caml_bytes_unsafe_set(s, n[1], 92);
         n[1]++;
         caml_bytes_unsafe_set(s, n[1], 48 + (c / 100 | 0) | 0);
         n[1]++;
         caml_bytes_unsafe_set(s, n[1], 48 + ((c / 10 | 0) % 10 | 0) | 0);
         n[1]++;
         caml_bytes_unsafe_set(s, n[1], 48 + (c % 10 | 0) | 0);
         break a;
        }
        caml_bytes_unsafe_set(s, n[1], c);
       }
       n[1]++;
       var _hA_ = i + 1 | 0;
       if(_hz_ === i) break;
       var i = _hA_;
      }
     }
     var _hE_ = s;
    }
    var
     str = caml_string_of_bytes(_hE_),
     l = caml_ml_string_length(str),
     res = make(l + 2 | 0, 34);
    caml_blit_string(str, 0, res, 1, l);
    return caml_string_of_bytes(res);
   }
   function format_of_fconv(fconv, prec){
    var prec$0 = abs(prec), sth = opt[1];
    switch(fconv[2]){
      case 0:
       var symb = 102; break;
      case 1:
       var symb = 101; break;
      case 2:
       var symb = 69; break;
      case 3:
       var symb = 103; break;
      case 4:
       var symb = 71; break;
      case 5:
       var symb = sth; break;
      case 6:
       var symb = 104; break;
      case 7:
       var symb = 72; break;
      default: var symb = 70;
    }
    var buf = buffer_create(16);
    buffer_add_char(buf, 37);
    switch(fconv[1]){
      case 0: break;
      case 1:
       buffer_add_char(buf, 43); break;
      default: buffer_add_char(buf, 32);
    }
    if(8 <= fconv[2]) buffer_add_char(buf, 35);
    buffer_add_char(buf, 46);
    buffer_add_string(buf, "" + prec$0);
    buffer_add_char(buf, symb);
    return buffer_contents(buf);
   }
   function transform_int_alt(iconv, s){
    if(13 > iconv) return s;
    var n = [0, 0], _hr_ = caml_ml_string_length(s) - 1 | 0, _hq_ = 0;
    if(_hr_ >= 0){
     var i$0 = _hq_;
     for(;;){
      if(9 >= caml_string_unsafe_get(s, i$0) - 48 >>> 0) n[1]++;
      var _hv_ = i$0 + 1 | 0;
      if(_hr_ === i$0) break;
      var i$0 = _hv_;
     }
    }
    var
     digits = n[1],
     buf =
       caml_create_bytes
        (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
     pos = [0, 0];
    function put(c){caml_bytes_set(buf, pos[1], c); pos[1]++; return 0;}
    var
     left = [0, ((digits - 1 | 0) % 3 | 0) + 1 | 0],
     _ht_ = caml_ml_string_length(s) - 1 | 0,
     _hs_ = 0;
    if(_ht_ >= 0){
     var i = _hs_;
     for(;;){
      var c = caml_string_unsafe_get(s, i);
      if(9 < c - 48 >>> 0)
       put(c);
      else{if(0 === left[1]){put(95); left[1] = 3;} left[1] += -1; put(c);}
      var _hu_ = i + 1 | 0;
      if(_ht_ === i) break;
      var i = _hu_;
     }
    }
    return caml_string_of_bytes(buf);
   }
   function convert_int(iconv, n){
    switch(iconv){
      case 1:
       var _hp_ = _aj_; break;
      case 2:
       var _hp_ = _ak_; break;
      case 4:
       var _hp_ = _am_; break;
      case 5:
       var _hp_ = _an_; break;
      case 6:
       var _hp_ = _ao_; break;
      case 7:
       var _hp_ = _ap_; break;
      case 8:
       var _hp_ = _aq_; break;
      case 9:
       var _hp_ = _ar_; break;
      case 10:
       var _hp_ = _as_; break;
      case 11:
       var _hp_ = _at_; break;
      case 0:
      case 13:
       var _hp_ = _ai_; break;
      case 3:
      case 14:
       var _hp_ = _al_; break;
      default: var _hp_ = _au_;
    }
    return transform_int_alt(iconv, caml_format_int(_hp_, n));
   }
   function convert_int32(iconv, n){
    switch(iconv){
      case 1:
       var _ho_ = _aJ_; break;
      case 2:
       var _ho_ = _aK_; break;
      case 4:
       var _ho_ = _aM_; break;
      case 5:
       var _ho_ = _aN_; break;
      case 6:
       var _ho_ = _aO_; break;
      case 7:
       var _ho_ = _aP_; break;
      case 8:
       var _ho_ = _aQ_; break;
      case 9:
       var _ho_ = _aR_; break;
      case 10:
       var _ho_ = _aS_; break;
      case 11:
       var _ho_ = _aT_; break;
      case 0:
      case 13:
       var _ho_ = _aI_; break;
      case 3:
      case 14:
       var _ho_ = _aL_; break;
      default: var _ho_ = _aU_;
    }
    return transform_int_alt(iconv, caml_format_int(_ho_, n));
   }
   function convert_nativeint(iconv, n){
    switch(iconv){
      case 1:
       var _hn_ = _aW_; break;
      case 2:
       var _hn_ = _aX_; break;
      case 4:
       var _hn_ = _aZ_; break;
      case 5:
       var _hn_ = _a0_; break;
      case 6:
       var _hn_ = _a1_; break;
      case 7:
       var _hn_ = _a2_; break;
      case 8:
       var _hn_ = _a3_; break;
      case 9:
       var _hn_ = _a4_; break;
      case 10:
       var _hn_ = _a5_; break;
      case 11:
       var _hn_ = _a6_; break;
      case 0:
      case 13:
       var _hn_ = _aV_; break;
      case 3:
      case 14:
       var _hn_ = _aY_; break;
      default: var _hn_ = _a7_;
    }
    return transform_int_alt(iconv, caml_format_int(_hn_, n));
   }
   function convert_int64(iconv, n){
    switch(iconv){
      case 1:
       var _hm_ = _aw_; break;
      case 2:
       var _hm_ = _ax_; break;
      case 4:
       var _hm_ = _az_; break;
      case 5:
       var _hm_ = _aA_; break;
      case 6:
       var _hm_ = _aB_; break;
      case 7:
       var _hm_ = _aC_; break;
      case 8:
       var _hm_ = _aD_; break;
      case 9:
       var _hm_ = _aE_; break;
      case 10:
       var _hm_ = _aF_; break;
      case 11:
       var _hm_ = _aG_; break;
      case 0:
      case 13:
       var _hm_ = _av_; break;
      case 3:
      case 14:
       var _hm_ = _ay_; break;
      default: var _hm_ = _aH_;
    }
    return transform_int_alt(iconv, caml_int64_format(_hm_, n));
   }
   function convert_float(fconv, prec, x){
    function hex(param){
     switch(fconv[1]){
       case 0:
        var sign = 45; break;
       case 1:
        var sign = 43; break;
       default: var sign = 32;
     }
     return caml_hexstring_of_float(x, prec, sign);
    }
    function caml_special_val(str){
     var match = caml_classify_float(x);
     return 3 === match ? x < 0. ? _a9_ : _a__ : 4 <= match ? _a$_ : str;
    }
    switch(fconv[2]){
      case 5:
       var
        str = caml_format_float(format_of_fconv(fconv, prec), x),
        len = caml_ml_string_length(str),
        i$0 = 0;
       for(;;){
        if(i$0 === len)
         var _hk_ = 0;
        else{
         var _hj_ = caml_string_get(str, i$0) - 46 | 0;
         a:
         {
          if(23 < _hj_ >>> 0){
           if(55 === _hj_) break a;
          }
          else if(21 < _hj_ - 1 >>> 0) break a;
          var i$1 = i$0 + 1 | 0, i$0 = i$1;
          continue;
         }
         var _hk_ = 1;
        }
        var _hl_ = _hk_ ? str : symbol(str, _a8_);
        return caml_special_val(_hl_);
       }
      case 6:
       return hex(0);
      case 7:
       var
        s$0 = hex(0),
        s = caml_bytes_of_string(s$0),
        l = caml_ml_bytes_length(s);
       if(0 === l)
        var _hi_ = s;
       else{
        var r = caml_create_bytes(l), _hf_ = l - 1 | 0, _he_ = 0;
        if(_hf_ >= 0){
         var i = _he_;
         for(;;){
          var
           c = caml_bytes_unsafe_get(s, i),
           _hg_ = 25 < c - 97 >>> 0 ? c : c - 32 | 0;
          caml_bytes_unsafe_set(r, i, _hg_);
          var _hh_ = i + 1 | 0;
          if(_hf_ === i) break;
          var i = _hh_;
         }
        }
        var _hi_ = r;
       }
       return caml_string_of_bytes(_hi_);
      case 8:
       return caml_special_val(hex(0));
      default: return caml_format_float(format_of_fconv(fconv, prec), x);
    }
   }
   function make_int_padding_precision(k, acc, fmt, pad, prec, trans, iconv){
    if(typeof pad === "number"){
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var str = fix_int_precision(p, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = caml_call2(trans, iconv, x);
                return make_printf(k, [4, acc, str], fmt);
               };
     var p = prec[1];
     return function(x){
      var str = fix_int_precision(p, caml_call2(trans, iconv, x));
      return make_printf(k, [4, acc, str], fmt);};
    }
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var
                 str =
                   fix_padding
                    (padty,
                     w,
                     fix_int_precision(p, caml_call2(trans, iconv, x)));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = fix_padding(padty, w, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               };
     var p$0 = prec[1];
     return function(x){
      var
       str =
         fix_padding
          (padty, w, fix_int_precision(p$0, caml_call2(trans, iconv, x)));
      return make_printf(k, [4, acc, str], fmt);};
    }
    var padty$0 = pad[1];
    if(typeof prec === "number")
     return prec
             ? function
              (w, p, x){
               var
                str =
                  fix_padding
                   (padty$0,
                    w,
                    fix_int_precision(p, caml_call2(trans, iconv, x)));
               return make_printf(k, [4, acc, str], fmt);
              }
             : function
              (w, x){
               var str = fix_padding(padty$0, w, caml_call2(trans, iconv, x));
               return make_printf(k, [4, acc, str], fmt);
              };
    var p$1 = prec[1];
    return function(w, x){
     var
      str =
        fix_padding
         (padty$0, w, fix_int_precision(p$1, caml_call2(trans, iconv, x)));
     return make_printf(k, [4, acc, str], fmt);};
   }
   function make_padding(k, acc, fmt, pad, trans){
    if(typeof pad === "number")
     return function(x){
      var new_acc = [4, acc, caml_call1(trans, x)];
      return make_printf(k, new_acc, fmt);};
    if(0 === pad[0]){
     var width = pad[2], padty = pad[1];
     return function(x){
      var new_acc = [4, acc, fix_padding(padty, width, caml_call1(trans, x))];
      return make_printf(k, new_acc, fmt);};
    }
    var padty$0 = pad[1];
    return function(w, x){
     var new_acc = [4, acc, fix_padding(padty$0, w, caml_call1(trans, x))];
     return make_printf(k, new_acc, fmt);};
   }
   function make_printf$0(counter, k, acc, fmt){
    var k$0 = k, acc$0 = acc, fmt$0 = fmt;
    for(;;){
     if(typeof fmt$0 === "number") return caml_call1(k$0, acc$0);
     switch(fmt$0[0]){
       case 0:
        var rest = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest);};
       case 1:
        var rest$0 = fmt$0[1];
        return function(c){
         a:
         {
          b:
          {
           if(40 <= c){
            if(92 === c){var str = _e_; break a;}
            if(127 > c) break b;
           }
           else{
            if(32 <= c){if(39 > c) break b; var str = _f_; break a;}
            if(14 > c)
             switch(c){
               case 8:
                var str = _g_; break a;
               case 9:
                var str = _h_; break a;
               case 10:
                var str = _i_; break a;
               case 13:
                var str = _j_; break a;
             }
           }
           var s = caml_create_bytes(4);
           caml_bytes_unsafe_set(s, 0, 92);
           caml_bytes_unsafe_set(s, 1, 48 + (c / 100 | 0) | 0);
           caml_bytes_unsafe_set(s, 2, 48 + ((c / 10 | 0) % 10 | 0) | 0);
           caml_bytes_unsafe_set(s, 3, 48 + (c % 10 | 0) | 0);
           var str = caml_string_of_bytes(s);
           break a;
          }
          var s$0 = caml_create_bytes(1);
          caml_bytes_unsafe_set(s$0, 0, c);
          var str = caml_string_of_bytes(s$0);
         }
         var l = caml_ml_string_length(str), res = make(l + 2 | 0, 39);
         caml_blit_string(str, 0, res, 1, l);
         var new_acc = [4, acc$0, caml_string_of_bytes(res)];
         return make_printf(k$0, new_acc, rest$0);};
       case 2:
        var rest$1 = fmt$0[2], pad = fmt$0[1];
        return make_padding
                (k$0, acc$0, rest$1, pad, function(str){return str;});
       case 3:
        var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$2, pad$0, string_to_caml_string);
       case 4:
        var
         rest$3 = fmt$0[4],
         prec = fmt$0[3],
         pad$1 = fmt$0[2],
         iconv = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$3, pad$1, prec, convert_int, iconv);
       case 5:
        var
         rest$4 = fmt$0[4],
         prec$0 = fmt$0[3],
         pad$2 = fmt$0[2],
         iconv$0 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$4, pad$2, prec$0, convert_int32, iconv$0);
       case 6:
        var
         rest$5 = fmt$0[4],
         prec$1 = fmt$0[3],
         pad$3 = fmt$0[2],
         iconv$1 = fmt$0[1];
        return make_int_padding_precision
                (k$0,
                 acc$0,
                 rest$5,
                 pad$3,
                 prec$1,
                 convert_nativeint,
                 iconv$1);
       case 7:
        var
         rest$6 = fmt$0[4],
         prec$2 = fmt$0[3],
         pad$4 = fmt$0[2],
         iconv$2 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$6, pad$4, prec$2, convert_int64, iconv$2);
       case 8:
        var
         rest$7 = fmt$0[4],
         prec$3 = fmt$0[3],
         pad$5 = fmt$0[2],
         fconv = fmt$0[1];
        if(typeof pad$5 === "number"){
         if(typeof prec$3 === "number")
          return prec$3
                  ? function
                   (p, x){
                    var str = convert_float(fconv, p, x);
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   }
                  : function
                   (x){
                    var
                     str =
                       convert_float(fconv, default_float_precision(fconv), x);
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   };
         var p = prec$3[1];
         return function(x){
          var str = convert_float(fconv, p, x);
          return make_printf(k$0, [4, acc$0, str], rest$7);};
        }
        if(0 === pad$5[0]){
         var w = pad$5[2], padty = pad$5[1];
         if(typeof prec$3 === "number")
          return prec$3
                  ? function
                   (p, x){
                    var str = fix_padding(padty, w, convert_float(fconv, p, x));
                    return make_printf(k$0, [4, acc$0, str], rest$7);
                   }
                  : function
                   (x){
                    var
                     str =
                       convert_float(fconv, default_float_precision(fconv), x),
                     str$0 = fix_padding(padty, w, str);
                    return make_printf(k$0, [4, acc$0, str$0], rest$7);
                   };
         var p$0 = prec$3[1];
         return function(x){
          var str = fix_padding(padty, w, convert_float(fconv, p$0, x));
          return make_printf(k$0, [4, acc$0, str], rest$7);};
        }
        var padty$0 = pad$5[1];
        if(typeof prec$3 === "number")
         return prec$3
                 ? function
                  (w, p, x){
                   var
                    str = fix_padding(padty$0, w, convert_float(fconv, p, x));
                   return make_printf(k$0, [4, acc$0, str], rest$7);
                  }
                 : function
                  (w, x){
                   var
                    str =
                      convert_float(fconv, default_float_precision(fconv), x),
                    str$0 = fix_padding(padty$0, w, str);
                   return make_printf(k$0, [4, acc$0, str$0], rest$7);
                  };
        var p$1 = prec$3[1];
        return function(w, x){
         var str = fix_padding(padty$0, w, convert_float(fconv, p$1, x));
         return make_printf(k$0, [4, acc$0, str], rest$7);};
       case 9:
        var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$8, pad$6, string_of_bool);
       case 10:
        var
         rest$9 = fmt$0[1],
         acc$1 = [7, acc$0],
         acc$0 = acc$1,
         fmt$0 = rest$9;
        break;
       case 11:
        var
         rest$10 = fmt$0[2],
         str = fmt$0[1],
         acc$2 = [2, acc$0, str],
         acc$0 = acc$2,
         fmt$0 = rest$10;
        break;
       case 12:
        var
         rest$11 = fmt$0[2],
         chr = fmt$0[1],
         acc$3 = [3, acc$0, chr],
         acc$0 = acc$3,
         fmt$0 = rest$11;
        break;
       case 13:
        var rest$12 = fmt$0[3], sub_fmtty = fmt$0[2], buf = buffer_create(16);
        bprint_fmtty(buf, sub_fmtty);
        var ty = buffer_contents(buf);
        return function(str){
         return make_printf(k$0, [4, acc$0, ty], rest$12);};
       case 14:
        var rest$13 = fmt$0[3], fmtty = fmt$0[2];
        return function(param){
         var
          fmt$0 = param[1],
          fmtty$0 = erase_rel(symm(fmtty)),
          _hd_ = type_format_gen(fmt$0, fmtty$0);
         if(typeof _hd_[2] !== "number")
          throw caml_maybe_attach_backtrace(Type_mismatch, 1);
         var fmt = _hd_[1];
         return make_printf(k$0, acc$0, concat_fmt(fmt, rest$13));};
       case 15:
        var rest$14 = fmt$0[1];
        return function(f, x){
         return make_printf
                 (k$0,
                  [6, acc$0, function(o){return caml_call2(f, o, x);}],
                  rest$14);};
       case 16:
        var rest$15 = fmt$0[1];
        return function(f){return make_printf(k$0, [6, acc$0, f], rest$15);};
       case 17:
        var
         rest$16 = fmt$0[2],
         fmting_lit = fmt$0[1],
         acc$4 = [0, acc$0, fmting_lit],
         acc$0 = acc$4,
         fmt$0 = rest$16;
        break;
       case 18:
        var _hb_ = fmt$0[1];
        if(0 === _hb_[0])
         var
          rest$17 = fmt$0[2],
          fmt$1 = _hb_[1][1],
          k$3 =
            function(acc, k, rest){
             function k$0(kacc){
              return make_printf(k, [1, acc, [0, kacc]], rest);
             }
             return k$0;
            },
          k$1 = k$3(acc$0, k$0, rest$17),
          k$0 = k$1,
          acc$0 = 0,
          fmt$0 = fmt$1;
        else
         var
          rest$18 = fmt$0[2],
          fmt$2 = _hb_[1][1],
          k$4 =
            function(acc, k, rest){
             function k$0(kacc){
              return make_printf(k, [1, acc, [1, kacc]], rest);
             }
             return k$0;
            },
          k$2 = k$4(acc$0, k$0, rest$18),
          k$0 = k$2,
          acc$0 = 0,
          fmt$0 = fmt$2;
        break;
       case 19:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _ba_], 1);
       case 20:
        var rest$19 = fmt$0[3], new_acc = [8, acc$0, _bb_];
        return function(param){return make_printf(k$0, new_acc, rest$19);};
       case 21:
        var rest$20 = fmt$0[2];
        return function(n){
         var new_acc = [4, acc$0, caml_format_int(cst_u, n)];
         return make_printf(k$0, new_acc, rest$20);};
       case 22:
        var rest$21 = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest$21);};
       case 23:
        var rest$22 = fmt$0[2], ign = fmt$0[1];
        if(typeof ign === "number")
         switch(ign){
           case 0:
            if(counter >= 50)
             return caml_trampoline_return
                     (make_invalid_arg, [0, k$0, acc$0, rest$22]);
            var counter$1 = counter + 1 | 0;
            return make_invalid_arg(counter$1, k$0, acc$0, rest$22);
           case 1:
            if(counter >= 50)
             return caml_trampoline_return
                     (make_invalid_arg, [0, k$0, acc$0, rest$22]);
            var counter$2 = counter + 1 | 0;
            return make_invalid_arg(counter$2, k$0, acc$0, rest$22);
           case 2:
            throw caml_maybe_attach_backtrace([0, Assert_failure, _bc_], 1);
           default:
            if(counter >= 50)
             return caml_trampoline_return
                     (make_invalid_arg, [0, k$0, acc$0, rest$22]);
            var counter$3 = counter + 1 | 0;
            return make_invalid_arg(counter$3, k$0, acc$0, rest$22);
         }
        switch(ign[0]){
          case 0:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$4 = counter + 1 | 0;
           return make_invalid_arg(counter$4, k$0, acc$0, rest$22);
          case 1:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$5 = counter + 1 | 0;
           return make_invalid_arg(counter$5, k$0, acc$0, rest$22);
          case 2:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$6 = counter + 1 | 0;
           return make_invalid_arg(counter$6, k$0, acc$0, rest$22);
          case 3:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$7 = counter + 1 | 0;
           return make_invalid_arg(counter$7, k$0, acc$0, rest$22);
          case 4:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$8 = counter + 1 | 0;
           return make_invalid_arg(counter$8, k$0, acc$0, rest$22);
          case 5:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$9 = counter + 1 | 0;
           return make_invalid_arg(counter$9, k$0, acc$0, rest$22);
          case 6:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$10 = counter + 1 | 0;
           return make_invalid_arg(counter$10, k$0, acc$0, rest$22);
          case 7:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$11 = counter + 1 | 0;
           return make_invalid_arg(counter$11, k$0, acc$0, rest$22);
          case 8:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$12 = counter + 1 | 0;
           return make_invalid_arg(counter$12, k$0, acc$0, rest$22);
          case 9:
           var fmtty$0 = ign[2];
           if(counter >= 50)
            return caml_trampoline_return
                    (make_from_fmtty$0, [0, k$0, acc$0, fmtty$0, rest$22]);
           var counter$15 = counter + 1 | 0;
           return make_from_fmtty$0(counter$15, k$0, acc$0, fmtty$0, rest$22);
          case 10:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$13 = counter + 1 | 0;
           return make_invalid_arg(counter$13, k$0, acc$0, rest$22);
          default:
           if(counter >= 50)
            return caml_trampoline_return
                    (make_invalid_arg, [0, k$0, acc$0, rest$22]);
           var counter$14 = counter + 1 | 0;
           return make_invalid_arg(counter$14, k$0, acc$0, rest$22);
        }
       default:
        var
         rest$23 = fmt$0[3],
         f = fmt$0[2],
         arity = fmt$0[1],
         _hc_ = caml_call1(f, 0);
        if(counter >= 50)
         return caml_trampoline_return
                 (make_custom$0, [0, k$0, acc$0, rest$23, arity, _hc_]);
        var counter$0 = counter + 1 | 0;
        return make_custom$0(counter$0, k$0, acc$0, rest$23, arity, _hc_);
     }
    }
   }
   function make_from_fmtty$0(counter, k, acc, fmtty, fmt){
    if(typeof fmtty !== "number")
     switch(fmtty[0]){
       case 0:
        var rest = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest, fmt);};
       case 1:
        var rest$0 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$0, fmt);};
       case 2:
        var rest$1 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$1, fmt);};
       case 3:
        var rest$2 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$2, fmt);};
       case 4:
        var rest$3 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$3, fmt);};
       case 5:
        var rest$4 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$4, fmt);};
       case 6:
        var rest$5 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$5, fmt);};
       case 7:
        var rest$6 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$6, fmt);};
       case 8:
        var rest$7 = fmtty[2];
        return function(param){return make_from_fmtty(k, acc, rest$7, fmt);};
       case 9:
        var
         rest$8 = fmtty[3],
         ty2 = fmtty[2],
         ty1 = fmtty[1],
         ty = trans(symm(ty1), ty2);
        return function(param){
         return make_from_fmtty(k, acc, concat_fmtty(ty, rest$8), fmt);};
       case 10:
        var rest$9 = fmtty[1];
        return function(param, _ha_){
         return make_from_fmtty(k, acc, rest$9, fmt);};
       case 11:
        var rest$10 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$10, fmt);};
       case 12:
        var rest$11 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$11, fmt);};
       case 13:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bd_], 1);
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _be_], 1);
     }
    if(counter >= 50)
     return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_invalid_arg(counter$0, k, acc, fmt);
   }
   function make_invalid_arg(counter, k, acc, fmt){
    var _g$_ = [8, acc, _bf_];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _g$_, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _g$_, fmt);
   }
   function make_custom$0(counter, k, acc, rest, arity, f){
    if(arity){
     var arity$0 = arity[1];
     return function(x){
      return make_custom(k, acc, rest, arity$0, caml_call1(f, x));};
    }
    var _g__ = [4, acc, f];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _g__, rest]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _g__, rest);
   }
   function make_printf(k, acc, fmt){
    return caml_trampoline(make_printf$0(0, k, acc, fmt));
   }
   function make_from_fmtty(k, acc, fmtty, fmt){
    return caml_trampoline(make_from_fmtty$0(0, k, acc, fmtty, fmt));
   }
   function make_custom(k, acc, rest, arity, f){
    return caml_trampoline(make_custom$0(0, k, acc, rest, arity, f));
   }
   function output_acc(o, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return 0;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        output_acc(o, p);
        return output_string(o, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         output_acc(o, p$0);
         output_string(o, _bg_);
         var acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         output_acc(o, p$0);
         output_string(o, _bh_);
         var acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        output_acc(o, p$3);
        return caml_call1(f, o);
       case 7:
        var p$4 = acc$0[1]; output_acc(o, p$4); return caml_ml_flush(o);
       case 8:
        var msg = acc$0[2], p$5 = acc$0[1];
        output_acc(o, p$5);
        return invalid_arg(msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        output_acc(o, p$1);
        return output_string(o, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        output_acc(o, p$2);
        return caml_ml_output_char(o, c);
     }
    }
   }
   function strput_acc(b, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return 0;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        strput_acc(b, p);
        return add_string(b, s);
       case 1:
        var match$0 = acc$0[2], p$0 = acc$0[1];
        if(0 === match$0[0]){
         var acc$1 = match$0[1];
         strput_acc(b, p$0);
         add_string(b, _bi_);
         var acc$0 = acc$1;
        }
        else{
         var acc$2 = match$0[1];
         strput_acc(b, p$0);
         add_string(b, _bj_);
         var acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        strput_acc(b, p$3);
        return add_string(b, caml_call1(f, 0));
       case 7:
        var acc$3 = acc$0[1], acc$0 = acc$3; break;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
        strput_acc(b, p$4);
        return invalid_arg(msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        strput_acc(b, p$1);
        return add_string(b, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        strput_acc(b, p$2);
        var pos = b[2], match = b[1], length = match[2], buffer = match[1];
        if(length <= pos){
         resize(b, 1);
         caml_bytes_set(b[1][1], b[2], c);
        }
        else
         caml_bytes_unsafe_set(buffer, pos, c);
        b[2] = pos + 1 | 0;
        return 0;
     }
    }
   }
   function fprintf(oc, fmt$0){
    var fmt = fmt$0[1], _g9_ = 0;
    return make_printf
            (function(acc){output_acc(oc, acc); return 0;}, _g9_, fmt);
   }
   function eprintf(fmt){return fprintf(stderr, fmt);}
   function ksprintf(k, param){
    var fmt = param[1];
    function k$0(acc){
     var
      n$0 = 64,
      n = max_string_length < 64 ? max_string_length : n$0,
      s = caml_create_bytes(n),
      buf = [0, [0, s, n], 0, s];
     strput_acc(buf, acc);
     return caml_call1(k, sub_string(buf[1][1], 0, buf[2]));
    }
    return make_printf(k$0, 0, fmt);
   }
   function sprintf(fmt){return ksprintf(function(s){return s;}, fmt);}
   var printers = [0, 0];
   function field(x, i$1){
    var f = x[1 + i$1];
    if(! (1 - (typeof f === "number" ? 1 : 0)))
     return caml_call1(sprintf(_bm_), f);
    if(caml_obj_tag(f) === 252) return caml_call1(sprintf(_bk_), f);
    if(caml_obj_tag(f) !== 253) return _bl_;
    var
     s = caml_format_float("%.12g", f),
     l = caml_ml_string_length(s),
     i = 0;
    for(;;){
     if(l <= i) return symbol(s, _c_);
     var match = caml_string_get(s, i);
     a:
     {
      if(48 <= match){if(58 > match) break a;} else if(45 === match) break a;
      return s;
     }
     var i$0 = i + 1 | 0, i = i$0;
    }
   }
   function other_fields(x, i){
    if(x.length - 1 <= i) return _bn_;
    var _g7_ = other_fields(x, i + 1 | 0), _g8_ = field(x, i);
    return caml_call2(sprintf(_bo_), _g8_, _g7_);
   }
   function to_string(e){
    var param = caml_atomic_load(printers);
    for(;;){
     a:
     {
      if(param){
       var tl = param[2], hd = param[1];
       b:
       {
        try{var val = caml_call1(hd, e);}catch(_g6_){break b;}
        if(val){var s = val[1], match$4 = [0, s]; break a;}
       }
       var param = tl;
       continue;
      }
      var match$4 = 0;
     }
     if(match$4){var s$0 = match$4[1]; return s$0;}
     if(e === Out_of_memory) return _bt_;
     if(e === Stack_overflow) return _bu_;
     if(e[1] === Match_failure){
      var
       match$1 = e[2],
       char$0 = match$1[3],
       line = match$1[2],
       file = match$1[1];
      return caml_call5
              (sprintf(locfmt), file, line, char$0, char$0 + 5 | 0, _bv_);
     }
     if(e[1] === Assert_failure){
      var
       match$2 = e[2],
       char$1 = match$2[3],
       line$0 = match$2[2],
       file$0 = match$2[1];
      return caml_call5
              (sprintf(locfmt), file$0, line$0, char$1, char$1 + 6 | 0, _bw_);
     }
     if(e[1] === Undefined_recursive_module){
      var
       match$3 = e[2],
       char$2 = match$3[3],
       line$1 = match$3[2],
       file$1 = match$3[1];
      return caml_call5
              (sprintf(locfmt), file$1, line$1, char$2, char$2 + 6 | 0, _bx_);
     }
     if(0 === caml_obj_tag(e)){
      var constructor = e[1][1], match = e.length - 1;
      if(2 < match >>> 0)
       var
        _g2_ = other_fields(e, 2),
        _g3_ = field(e, 1),
        _g5_ = caml_call2(sprintf(_bp_), _g3_, _g2_);
      else
       switch(match){
         case 0:
          var _g5_ = _bq_; break;
         case 1:
          var _g5_ = _br_; break;
         default:
          var _g4_ = field(e, 1), _g5_ = caml_call1(sprintf(_bs_), _g4_);
       }
      var match$0 = [0, constructor, [0, _g5_]];
     }
     else
      var match$0 = [0, e[1], 0];
     var fields_opt = match$0[2], constructor$0 = match$0[1];
     if(! fields_opt) return constructor$0;
     var f = fields_opt[1];
     return symbol(constructor$0, f);
    }
   }
   function print_raw_backtrace(outchan, raw_backtrace){
    var
     a = caml_convert_raw_backtrace(raw_backtrace),
     _g0_ = a.length - 1 - 1 | 0,
     _gZ_ = 0;
    if(_g0_ >= 0){
     var pos = _gZ_;
     for(;;){
      var
       slot = caml_check_bound(a, pos)[1 + pos],
       info$0 =
         function(pos){
          function info(is_raise){
           return is_raise ? 0 === pos ? _by_ : _bz_ : 0 === pos ? _bA_ : _bB_;
          }
          return info;
         },
       info = info$0(pos);
      if(0 === slot[0])
       var
        _gR_ = slot[5],
        _gS_ = slot[4],
        _gT_ = slot[3],
        _gU_ = slot[6] ? _bC_ : _bE_,
        _gV_ = slot[2],
        _gW_ = slot[7],
        _gX_ = info(slot[1]),
        match =
          [0,
           caml_call7(sprintf(_bD_), _gX_, _gW_, _gV_, _gU_, _gT_, _gS_, _gR_)];
      else if(slot[1])
       var match = 0;
      else
       var _gY_ = info(0), match = [0, caml_call1(sprintf(_bF_), _gY_)];
      if(match){var str = match[1]; caml_call1(fprintf(outchan, _bG_), str);}
      var _g1_ = pos + 1 | 0;
      if(_g0_ === pos) break;
      var pos = _g1_;
     }
    }
    return 0;
   }
   function print_backtrace(outchan){
    return print_raw_backtrace(outchan, caml_get_exception_raw_backtrace(0));
   }
   function register_printer(fn){
    for(;;){
     var
      old_printers = caml_atomic_load(printers),
      new_printers = [0, fn, old_printers],
      success = caml_atomic_cas(printers, old_printers, new_printers),
      _gQ_ = 1 - success;
     if(! _gQ_) return _gQ_;
    }
   }
   var errors = _bH_.slice(), empty_backtrace = [0];
   function handle_uncaught_exception(exn$0, debugger_in_use){
    try{
     try{
      var
       raw_backtrace =
         debugger_in_use
          ? empty_backtrace
          : caml_get_exception_raw_backtrace(0);
      try{do_at_exit(0);}catch(_gP_){}
      try{
       var _gF_ = to_string(exn$0);
       caml_call1(eprintf(_bI_), _gF_);
       print_raw_backtrace(stderr, raw_backtrace);
       var status = caml_ml_debug_info_status(0);
       if(status < 0){
        var _gG_ = abs(status);
        prerr_endline(caml_check_bound(errors, _gG_)[1 + _gG_]);
       }
       var _gH_ = caml_ml_flush(stderr), _gL_ = _gH_;
      }
      catch(exn$1){
       var
        exn = caml_wrap_exception(exn$1),
        raw_backtrace$0 = caml_get_exception_raw_backtrace(0),
        _gJ_ = to_string(exn$0);
       caml_call1(eprintf(_bK_), _gJ_);
       print_raw_backtrace(stderr, raw_backtrace);
       var _gK_ = to_string(exn);
       caml_call1(eprintf(_bL_), _gK_);
       print_raw_backtrace(stderr, raw_backtrace$0);
       var _gL_ = caml_ml_flush(stderr);
      }
      var _gM_ = _gL_;
     }
     catch(_gO_){
      var _gI_ = caml_wrap_exception(_gO_);
      if(_gI_ !== Out_of_memory) throw caml_maybe_attach_backtrace(_gI_, 0);
      var _gM_ = prerr_endline(_bJ_);
     }
     return _gM_;
    }
    catch(_gN_){return 0;}
   }
   caml_register_named_value
    ("Printexc.handle_uncaught_exception", handle_uncaught_exception);
   function bytes(b){
    var str = caml_string_of_bytes(b);
    return caml_md5_string(str, 0, caml_ml_string_length(str));
   }
   function create(param){return caml_ba_create(7, 0, [0, 4]);}
   function set(s, i1, i2, i3, i4){
    caml_ba_set_1(s, 0, caml_int64_or(i1, _bM_));
    caml_ba_set_1(s, 1, i2);
    var i3$0 = caml_notequal(i3, _bN_) ? i3 : _bQ_;
    caml_ba_set_1(s, 2, i3$0);
    var i4$0 = caml_notequal(i4, _bO_) ? i4 : _bP_;
    return caml_ba_set_1(s, 3, i4$0);
   }
   function mk(i1, i2, i3, i4){
    var s = create(0);
    set(s, i1, i2, i3, i4);
    return s;
   }
   function make_self_init(param){
    var
     seed = caml_sys_random_seed(0),
     s = create(0),
     n = seed.length - 1,
     b = caml_create_bytes((n * 8 | 0) + 1 | 0),
     _gA_ = n - 1 | 0,
     _gz_ = 0;
    if(_gA_ >= 0){
     var i = _gz_;
     for(;;){
      caml_bytes_set64
       (b, i * 8 | 0, caml_int64_of_int32(caml_check_bound(seed, i)[1 + i]));
      var _gE_ = i + 1 | 0;
      if(_gA_ === i) break;
      var i = _gE_;
     }
    }
    caml_bytes_set(b, n * 8 | 0, 1);
    var d1 = bytes(b);
    caml_bytes_set(b, n * 8 | 0, 2);
    var
     d2 = bytes(b),
     _gB_ = get_int64_le(d2, 8),
     _gC_ = get_int64_le(d2, 0),
     _gD_ = get_int64_le(d1, 8);
    set(s, get_int64_le(d1, 0), _gD_, _gC_, _gB_);
    return s;
   }
   function split(s){
    var
     i1 = caml_lxm_next(s),
     i2 = caml_lxm_next(s),
     i3 = caml_lxm_next(s),
     i4 = caml_lxm_next(s);
    return mk(i1, i2, i3, i4);
   }
   function mk_default(param){return mk(_bU_, _bT_, _bS_, _bR_);}
   new_key([0, split], mk_default);
   try{var _c7_ = caml_sys_getenv("OCAMLRUNPARAM"), params = _c7_;}
   catch(_gx_){
    var _bV_ = caml_wrap_exception(_gx_);
    if(_bV_ !== Not_found) throw caml_maybe_attach_backtrace(_bV_, 0);
    try{var _c6_ = caml_sys_getenv("CAMLRUNPARAM"), _bY_ = _c6_;}
    catch(_gy_){
     var _bW_ = caml_wrap_exception(_gy_);
     if(_bW_ !== Not_found) throw caml_maybe_attach_backtrace(_bW_, 0);
     var _bY_ = _bX_;
    }
    var params = _bY_;
   }
   var l = caml_ml_string_length(params), c = 82, i = 0;
   if(l < 0)
    var randomized_default = invalid_arg(_o_);
   else
    try{index_rec(params, l, i, c); var _q_ = 1, randomized_default = _q_;}
    catch(_gw_){
     var _p_ = caml_wrap_exception(_gw_);
     if(_p_ !== Not_found) throw caml_maybe_attach_backtrace(_p_, 0);
     var randomized_default = 0;
    }
   var
    randomized = [0, randomized_default],
    prng_key = new_key(0, make_self_init);
   function create$0(opt, initial_size){
    if(opt)
     var sth = opt[1], random = sth;
    else
     var random = caml_atomic_load(randomized);
    var x = 16;
    for(;;){
     if(initial_size > x && max_array_length >= (x * 2 | 0)){var x$0 = x * 2 | 0, x = x$0; continue;}
     if(random)
      var
       s = get(prng_key),
       seed = caml_int64_to_int32(caml_lxm_next(s)) & 1073741823;
     else
      var seed = 0;
     return [0, 0, caml_make_vect(x, 0), seed, x];
    }
   }
   function key_index(h, key){
    return 4 <= h.length - 1
            ? caml_hash(10, 100, h[3], key) & (h[2].length - 1 - 1 | 0)
            : invalid_arg(_bZ_);
   }
   function find(h, key){
    var
     _gv_ = key_index(h, key),
     match = caml_check_bound(h[2], _gv_)[1 + _gv_];
    if(! match) throw caml_maybe_attach_backtrace(Not_found, 1);
    var k1 = match[1], d1 = match[2], next1 = match[3];
    if(0 === caml_compare(key, k1)) return d1;
    if(! next1) throw caml_maybe_attach_backtrace(Not_found, 1);
    var k2 = next1[1], d2 = next1[2], next2 = next1[3];
    if(0 === caml_compare(key, k2)) return d2;
    if(! next2) throw caml_maybe_attach_backtrace(Not_found, 1);
    var k3 = next2[1], d3 = next2[2], next3 = next2[3];
    if(0 === caml_compare(key, k3)) return d3;
    var param = next3;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Not_found, 1);
     var k = param[1], data = param[2], next = param[3];
     if(0 === caml_compare(key, k)) return data;
     var param = next;
    }
   }
   var
    Error = [248, _b0_, caml_fresh_oo_id(0)],
    exn = [0, Error, [0]],
    slot = caml_obj_tag(exn) === 248 ? exn : exn[1];
   caml_register_named_value("jsError", slot);
   (function(exn){throw exn;});
   var global = globalThis, no_handler = null, undefined$0 = undefined;
   function test(x){return 1 - (x == no_handler ? 1 : 0);}
   function iter$1(x, f){
    var _gu_ = 1 - (x == no_handler ? 1 : 0);
    return _gu_ ? caml_call1(f, x) : _gu_;
   }
   function case$0(x, f, g){
    return x == no_handler ? caml_call1(f, 0) : caml_call1(g, x);
   }
   function iter$2(x, f){
    var _gt_ = x !== undefined$0 ? 1 : 0;
    return _gt_ ? caml_call1(f, x) : _gt_;
   }
   function case$1(x, f, g){
    return x === undefined$0 ? caml_call1(f, 0) : caml_call1(g, x);
   }
   function get$0(x, f){return x === undefined$0 ? caml_call1(f, 0) : x;}
   var true$0 = true, false$0 = false;
   global.String;
   var regExp = global.RegExp;
   global.Object;
   var array_constructor = global.Array;
   global.Date;
   var math = global.Math;
   global.Error;
   global.JSON;
   register_printer
    (function(param){
      if(param[1] !== Error) return 0;
      var e = param[2];
      return [0, caml_string_of_jsstring(e.toString())];
     });
   register_printer
    (function(e){
      return e instanceof array_constructor
              ? 0
              : [0, caml_string_of_jsstring(e.toString())];
     });
   function appendChild(p, n){p.appendChild(n); return 0;}
   function removeChild(p, n){p.removeChild(n); return 0;}
   function handler(f){
    return caml_js_wrap_callback_unsafe
            (function(e){
              if(test(e)){
               var res = caml_call1(f, e);
               if(1 - (res | 0)) e.preventDefault();
               return res;
              }
              var t18 = event, res$0 = caml_call1(f, t18);
              if(1 - (res$0 | 0)) t18.returnValue = res$0;
              return res$0;
             });
   }
   function addEventListener(t28, typ, h, capt){
    var capture = [0, capt], passive = 0, once = 0;
    if(t28.addEventListener === undefined$0){
     var
      ev = cst_on.concat(typ),
      callback =
        function(e){
         var _gq_ = [0, h, e, [0]];
         return function(_gr_, _gs_){return caml_js_call(_gq_, _gr_, _gs_);};
        };
     t28.attachEvent(ev, callback);
     return function(param){return t28.detachEvent(ev, callback);};
    }
    var opts = {};
    function iter(t, f){
     if(! t) return 0;
     var b = t[1];
     return caml_call1(f, b);
    }
    iter(capture, function(t37){return opts.capture = t37;});
    iter(once, function(t39){return opts.once = t39;});
    iter(passive, function(t41){return opts.passive = t41;});
    t28.addEventListener(typ, h, opts);
    return function(param){return t28.removeEventListener(typ, h, opts);};
   }
   function removeEventListener(id){return caml_call1(id, 0);}
   global.ArrayBuffer;
   global.Int8Array;
   global.Uint8Array;
   global.Int16Array;
   global.Uint16Array;
   global.Int32Array;
   global.Uint32Array;
   global.Float32Array;
   global.Float64Array;
   global.DataView;
   global.Blob;
   global.Document;
   global.FileReader;
   var
    onIE = caml_js_on_ie(0) | 0,
    click = "click",
    mouseup = "mouseup",
    mousemove = "mousemove",
    keydown = "keydown",
    touchstart = "touchstart",
    touchmove = "touchmove",
    touchend = "touchend",
    document = global.document;
   function createElement(doc, name){
    return doc.createElement(caml_jsstring_of_string(name));
   }
   function unsafeCreateElement(doc, name){return createElement(doc, name);}
   function createUl(doc){return unsafeCreateElement(doc, _b1_);}
   function createDl(doc){return unsafeCreateElement(doc, _b2_);}
   function createLi(doc){return unsafeCreateElement(doc, _b3_);}
   function createDiv(doc){return unsafeCreateElement(doc, _b4_);}
   function createA(doc){return unsafeCreateElement(doc, _b5_);}
   function createImg(doc){return unsafeCreateElement(doc, _b6_);}
   function createDd(doc){return createElement(doc, _b7_);}
   function createDt(doc){return createElement(doc, _b8_);}
   var Canvas_not_available = [248, _b9_, caml_fresh_oo_id(0)];
   function createCanvas(doc){
    var t52 = unsafeCreateElement(doc, _b__);
    if(1 - test(t52.getContext))
     throw caml_maybe_attach_backtrace(Canvas_not_available, 1);
    return t52;
   }
   var html_element = global.HTMLElement;
   html_element === undefined$0;
   function stopPropagation(t109){
    function _go_(param){return t109.stopPropagation();}
    function _gp_(param){return t109.cancelBubble = true$0;}
    return case$1(t109.stopPropagation, _gp_, _go_);
   }
   global.FormData;
   global.FormData;
   var overflow_limit = 2147483000.;
   function regexp(s){return new regExp(caml_jsbytes_of_string(s), cst_g);}
   new regExp("[$]", cst_g);
   var quote_re = regexp(_b$_), Local_exn = [248, _ca_, caml_fresh_oo_id(0)];
   function interrupt(param){throw caml_maybe_attach_backtrace(Local_exn, 1);}
   regexp(caml_string_of_jsbytes(cst$3.replace(quote_re, "\\$&")));
   var plus_re_js_string = new regExp("\\+", cst_g);
   function urldecode_js_string_string(s$0){
    plus_re_js_string.lastIndex = 0;
    var s = s$0.replace(plus_re_js_string, " ");
    return caml_string_of_jsbytes(global.unescape(s));
   }
   new
    regExp
    ("^([Hh][Tt][Tt][Pp][Ss]?)://([0-9a-zA-Z.-]+|\\[[0-9a-zA-Z.-]+\\]|\\[[0-9A-Fa-f:.]+\\])?(:([0-9]+))?(/([^\\?#]*)(\\?([^#]*))?(#(.*))?)?$");
   new regExp("^([Ff][Ii][Ll][Ee])://([^\\?#]*)(\\?([^#]*))?(#(.*))?$");
   var x = global.location;
   if(x !== undefined$0)
    var t43 = global.location;
   else
    var
     t42 = function(param, _gn_){return 0;},
     t41 = function(param, _gm_){return 0;},
     t40 = function(param){return 0;},
     t43 =
       {href: cst$2,
        protocol: cst$2,
        host: cst$2,
        hostname: cst$2,
        port: cst$2,
        pathname: cst$2,
        search: cst$2,
        hash: cst$2,
        origin: undefined$0,
        reload: caml_js_wrap_meth_callback(t40),
        replace: caml_js_wrap_meth_callback(t41),
        assign: caml_js_wrap_meth_callback(t42)};
   urldecode_js_string_string(t43.hostname);
   urldecode_js_string_string(t43.protocol);
   try{caml_int_of_string(caml_string_of_jsbytes(t43.port));}
   catch(_gl_){
    var _cc_ = caml_wrap_exception(_gl_);
    if(_cc_[1] !== Failure) throw caml_maybe_attach_backtrace(_cc_, 0);
   }
   var
    path_string = urldecode_js_string_string(t43.pathname),
    l$0 = caml_ml_string_length(path_string);
   function aux(i){
    try{
     var l = caml_ml_string_length(path_string);
     a:
     {
      var c = 47;
      if(0 <= i && l >= i){
       var _gj_ = index_rec(path_string, l, i, c);
       break a;
      }
      var _gj_ = invalid_arg(_n_);
     }
     var j = _gj_;
    }
    catch(_gk_){
     var _gi_ = caml_wrap_exception(_gk_);
     if(_gi_ !== Not_found) throw caml_maybe_attach_backtrace(_gi_, 0);
     var j = l$0;
    }
    var word = sub$0(path_string, i, j - i | 0);
    return l$0 <= j ? [0, word, 0] : [0, word, aux(j + 1 | 0)];
   }
   var a = aux(0);
   a:
   if(a && ! caml_string_notequal(a[1], cst$2)){
    var _cb_ = a[2];
    if(! _cb_ || ! caml_string_notequal(_cb_[1], cst$2) && ! _cb_[2]) break a;
   }
   var
    s$0 = t43.search.charAt(0) === "?" ? t43.search.slice(1) : t43.search,
    arr = s$0.split(caml_jsstring_of_string(make$0(1, 38))),
    len = arr.length;
   function aux$0(acc, idx){
    var idx$0 = idx;
    for(;;){
     if(0 > idx$0) return acc;
     try{
      var
       _ga_ = idx$0 - 1 | 0,
       _gb_ =
         function(s){
          function _gg_(param){
           var
            y = param[2],
            x = param[1],
            _gh_ = urldecode_js_string_string(y);
           return [0, urldecode_js_string_string(x), _gh_];
          }
          var index = s.indexOf(caml_jsstring_of_string(make$0(1, 61)));
          if(0 <= index)
           var
            _ge_ = s.slice(index + 1 | 0),
            _gf_ = [0, s.slice(0, index), _ge_];
          else
           var _gf_ = undefined$0;
          return case$1(_gf_, interrupt, _gg_);
         },
       _gc_ = aux$0([0, case$1(arr[idx$0], interrupt, _gb_), acc], _ga_);
      return _gc_;
     }
     catch(_gd_){
      var _f$_ = caml_wrap_exception(_gd_);
      if(_f$_ !== Local_exn) throw caml_maybe_attach_backtrace(_f$_, 0);
      var idx$1 = idx$0 - 1 | 0, idx$0 = idx$1;
     }
    }
   }
   aux$0(0, len - 1 | 0);
   urldecode_js_string_string(t43.href);
   symbol(s$1, symbol(_c5_, git_version));
   var console$0 = caml_js_get_console(0);
   function create$1(param){
    var seq = [];
    caml_update_dummy(seq, [0, seq, seq]);
    return seq;
   }
   var empty = 0;
   function underlying(p){
    var match = p[1];
    switch(match[0]){
      case 0:
       return p;
      case 1:
       return p;
      case 2:
       return p;
      default:
       var p$0 = match[1], p$1 = underlying(p$0);
       if(1 - (p$1 === p$0 ? 1 : 0)) p[1] = [3, p$1];
       return p$1;
    }
   }
   function set_promise_state(p, state){p[1] = state; return p;}
   var current_storage = [0, empty];
   function concat_regular_callbacks(l1, l2){
    return typeof l1 === "number"
            ? l2
            : typeof l2 === "number" ? l1 : [0, l1, l2];
   }
   function clean_up_callback_cells(callbacks){
    if(typeof callbacks !== "number")
     switch(callbacks[0]){
       case 0:
        var
         l2 = callbacks[2],
         l1 = callbacks[1],
         l1$0 = clean_up_callback_cells(l1),
         l2$0 = clean_up_callback_cells(l2);
        return concat_regular_callbacks(l1$0, l2$0);
       case 2:
        if(! callbacks[1][1]) return 0; break;
     }
    return callbacks;
   }
   function add_implicitly_removed_callbac(callbacks, f){
    var
     node$0 = [1, f],
     existing = callbacks[1],
     node = typeof existing === "number" ? node$0 : [0, node$0, existing];
    callbacks[1] = node;
    return 0;
   }
   var
    async_exception_hook =
      [0,
       function(exn){
        prerr_string(_cd_);
        prerr_string(to_string(exn));
        caml_ml_output_char(stderr, 10);
        print_backtrace(stderr);
        caml_ml_flush(stderr);
        do_at_exit(0);
        return caml_sys_exit(2);
       }];
   function handle_with_async_exception_ho(f, v){
    try{var _f__ = caml_call1(f, v); return _f__;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     return caml_call1(async_exception_hook[1], exn);
    }
   }
   var Canceled = [248, _ce_, caml_fresh_oo_id(0)];
   function run_callbacks(callbacks, result){
    if(1 === result[0])
     var _f9_ = result[1] === Canceled ? 1 : 0, is_canceled = _f9_;
    else
     var is_canceled = 0;
    if(is_canceled){
     var
      fs = callbacks[2],
      iter_callback_list$2 =
        function(counter, fs, rest){
         var fs$0 = fs, rest$0 = rest;
         for(;;){
          if(typeof fs$0 === "number"){
           if(counter >= 50)
            return caml_trampoline_return(iter_list$0, [0, rest$0]);
           var counter$0 = counter + 1 | 0;
           return iter_list$0(counter$0, rest$0);
          }
          switch(fs$0[0]){
            case 0:
             var
              fs$1 = fs$0[2],
              fs$2 = fs$0[1],
              rest$1 = [0, fs$1, rest$0],
              fs$0 = fs$2,
              rest$0 = rest$1;
             break;
            case 1:
             var f = fs$0[2], storage = fs$0[1];
             current_storage[1] = storage;
             handle_with_async_exception_ho(f, 0);
             if(counter >= 50)
              return caml_trampoline_return(iter_list$0, [0, rest$0]);
             var counter$1 = counter + 1 | 0;
             return iter_list$0(counter$1, rest$0);
            default:
             var node = fs$0[1];
             if(node[4]){
              node[4] = 0;
              node[1][2] = node[2];
              node[2][1] = node[1];
             }
             if(counter >= 50)
              return caml_trampoline_return(iter_list$0, [0, rest$0]);
             var counter$2 = counter + 1 | 0;
             return iter_list$0(counter$2, rest$0);
          }
         }
        },
      iter_list$0 =
        function(counter, rest){
         if(! rest) return 0;
         var rest$0 = rest[2], fs = rest[1];
         if(counter >= 50)
          return caml_trampoline_return(iter_callback_list$2, [0, fs, rest$0]);
         var counter$0 = counter + 1 | 0;
         return iter_callback_list$2(counter$0, fs, rest$0);
        },
      iter_callback_list =
        function(fs, rest){
         return caml_trampoline(iter_callback_list$2(0, fs, rest));
        };
     iter_callback_list(fs, 0);
    }
    var fs$0 = callbacks[1];
    function iter_callback_list$1(counter, fs, rest){
     var fs$0 = fs, rest$0 = rest;
     for(;;){
      if(typeof fs$0 === "number"){
       if(counter >= 50)
        return caml_trampoline_return(iter_list, [0, rest$0]);
       var counter$0 = counter + 1 | 0;
       return iter_list(counter$0, rest$0);
      }
      switch(fs$0[0]){
        case 0:
         var
          fs$1 = fs$0[2],
          fs$2 = fs$0[1],
          rest$1 = [0, fs$1, rest$0],
          fs$0 = fs$2,
          rest$0 = rest$1;
         break;
        case 1:
         var f = fs$0[1];
         caml_call1(f, result);
         if(counter >= 50)
          return caml_trampoline_return(iter_list, [0, rest$0]);
         var counter$1 = counter + 1 | 0;
         return iter_list(counter$1, rest$0);
        default:
         var match = fs$0[1][1];
         if(match){
          var f$0 = match[1];
          caml_call1(f$0, result);
          if(counter >= 50)
           return caml_trampoline_return(iter_list, [0, rest$0]);
          var counter$2 = counter + 1 | 0;
          return iter_list(counter$2, rest$0);
         }
         if(counter >= 50)
          return caml_trampoline_return(iter_list, [0, rest$0]);
         var counter$3 = counter + 1 | 0;
         return iter_list(counter$3, rest$0);
      }
     }
    }
    function iter_list(counter, rest){
     if(! rest) return 0;
     var rest$0 = rest[2], fs = rest[1];
     if(counter >= 50)
      return caml_trampoline_return(iter_callback_list$1, [0, fs, rest$0]);
     var counter$0 = counter + 1 | 0;
     return iter_callback_list$1(counter$0, fs, rest$0);
    }
    function iter_callback_list$0(fs, rest){
     return caml_trampoline(iter_callback_list$1(0, fs, rest));
    }
    return iter_callback_list$0(fs$0, 0);
   }
   var
    current_callback_nesting_depth = [0, 0],
    deferred_callbacks = [0, 0, 0, 0],
    default_maximum_callback_nesti = 42;
   function run_in_resolution_loop(f){
    current_callback_nesting_depth[1] =
     current_callback_nesting_depth[1] + 1 | 0;
    var storage_snapshot = current_storage[1], result$0 = caml_call1(f, 0);
    if(1 === current_callback_nesting_depth[1])
     for(;;){
      if(0 === deferred_callbacks[1]) break;
      var _f8_ = deferred_callbacks[2];
      if(! _f8_) throw caml_maybe_attach_backtrace(Empty, 1);
      var content = _f8_[1];
      if(_f8_[2]){
       var next = _f8_[2];
       deferred_callbacks[1] = deferred_callbacks[1] - 1 | 0;
       deferred_callbacks[2] = next;
      }
      else{
       deferred_callbacks[1] = 0;
       deferred_callbacks[2] = 0;
       deferred_callbacks[3] = 0;
      }
      var result = content[2], callbacks = content[1];
      run_callbacks(callbacks, result);
     }
    current_callback_nesting_depth[1] =
     current_callback_nesting_depth[1] - 1 | 0;
    current_storage[1] = storage_snapshot;
    return result$0;
   }
   function resolve
   (allow_deferring$0, maximum_callback_nesting_depth$0, p, result){
    var callbacks = p[1][1], p$0 = set_promise_state(p, result);
    if(allow_deferring$0)
     var sth = allow_deferring$0[1], allow_deferring = sth;
    else
     var allow_deferring = 1;
    if(maximum_callback_nesting_depth$0)
     var
      sth$0 = maximum_callback_nesting_depth$0[1],
      maximum_callback_nesting_depth = sth$0;
    else
     var maximum_callback_nesting_depth = default_maximum_callback_nesti;
    var
     should_defer =
       allow_deferring
        ? maximum_callback_nesting_depth
          <= current_callback_nesting_depth[1]
          ? 1
          : 0
        : allow_deferring;
    if(should_defer)
     add([0, callbacks, result], deferred_callbacks);
    else
     run_in_resolution_loop
      (function(param){return run_callbacks(callbacks, result);});
    return p$0;
   }
   function run_callback_or_defer_it(opt, f, if_deferred){
    if(opt)
     var sth = opt[1], run_immediately_and_ensure_tai = sth;
    else
     var run_immediately_and_ensure_tai = 0;
    if(run_immediately_and_ensure_tai) return caml_call1(f, 0);
    var should_defer = 42 <= current_callback_nesting_depth[1] ? 1 : 0;
    if(! should_defer)
     return run_in_resolution_loop(function(param){return caml_call1(f, 0);});
    var
     match = caml_call1(if_deferred, 0),
     deferred_result = match[3],
     deferred_callback = match[2],
     immediate_result = match[1],
     deferred_record = [0, [1, deferred_callback], 0, 0, 0];
    add([0, deferred_record, deferred_result], deferred_callbacks);
    return immediate_result;
   }
   function wakeup_general(api_function_name, r, result){
    var p = underlying(r), _f7_ = p[1];
    switch(_f7_[0]){
      case 1:
       return _f7_[1] === Canceled
               ? 0
               : caml_call1(ksprintf(invalid_arg, _cg_), api_function_name);
      case 2:
       if(0 === result[0])
        var x = result[1], result$0 = [0, x];
       else
        var exn = result[1], result$0 = [1, exn];
       resolve(_ch_, 0, p, result$0);
       return 0;
      default:
       return caml_call1(ksprintf(invalid_arg, _cf_), api_function_name);
    }
   }
   function wakeup(r, v){return wakeup_general(_ci_, r, [0, v]);}
   function return$0(v){return [0, [0, v]];}
   function new_pending(how_to_cancel){
    var state = [2, [0, 0, 0, how_to_cancel, 0]];
    return [0, state];
   }
   function task(param){var p = new_pending(1); return [0, p, p];}
   function symbol_bind(p, f){
    var p$0 = underlying(p);
    function create_result_promise_and_call(param){
     var p = new_pending([0, p$0]), saved_storage = current_storage[1];
     function callback(p_result){
      if(1 === p_result[0]){
       var p$1 = underlying(p);
       resolve(_cm_, 0, p$1, p_result);
       return 0;
      }
      var v = p_result[1];
      current_storage[1] = saved_storage;
      try{var _f6_ = caml_call1(f, v), user_provided_promise = _f6_;}
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(! 1) throw caml_maybe_attach_backtrace(exn, 0);
       var user_provided_promise = [0, [1, exn]];
      }
      var
       outer_promise = underlying(p),
       p$0 = underlying(user_provided_promise);
      if(p$0 !== outer_promise){
       var match = p$0[1];
       switch(match[0]){
         case 1:
          resolve(_cl_, 0, outer_promise, p$0[1]); break;
         case 2:
          var
           p_callbacks = match[1],
           outer_callbacks = outer_promise[1][1],
           regular_callbacks =
             concat_regular_callbacks(outer_callbacks[1], p_callbacks[1]),
           cleanups_deferred = outer_callbacks[4] + p_callbacks[4] | 0;
          if(42 < cleanups_deferred)
           var
            cleanups_deferred$0 = 0,
            regular_callbacks$0 = clean_up_callback_cells(regular_callbacks);
          else
           var
            cleanups_deferred$0 = cleanups_deferred,
            regular_callbacks$0 = regular_callbacks;
          var
           l2 = p_callbacks[2],
           l1 = outer_callbacks[2],
           cancel_callbacks =
             typeof l1 === "number"
              ? l2
              : typeof l2 === "number" ? l1 : [0, l1, l2];
          outer_callbacks[1] = regular_callbacks$0;
          outer_callbacks[2] = cancel_callbacks;
          outer_callbacks[4] = cleanups_deferred$0;
          outer_callbacks[3] = p_callbacks[3];
          set_promise_state(p$0, [3, outer_promise]);
          break;
         default: resolve(_ck_, 0, outer_promise, p$0[1]);
       }
      }
      return 0;
     }
     return [0, p, callback];
    }
    var result = p$0[1];
    switch(result[0]){
      case 1:
       return [0, result];
      case 2:
       var
        p_callbacks = result[1],
        match = create_result_promise_and_call(0),
        callback = match[2],
        p$1 = match[1];
       add_implicitly_removed_callbac(p_callbacks, callback);
       return p$1;
      default:
       var
        v = result[1],
        _f5_ =
          function(param){
           var
            match = create_result_promise_and_call(0),
            callback = match[2],
            p = match[1];
           return [0, p, callback, p$0[1]];
          };
       return run_callback_or_defer_it
               (_cn_, function(param){return caml_call1(f, v);}, _f5_);
    }
   }
   function on_cancel(p, f){
    var p$0 = underlying(p), match = p$0[1];
    switch(match[0]){
      case 1:
       if(match[1] !== Canceled) return 0;
       var
        _f4_ =
          function(param){
           return [0,
                   0,
                   function(param){
                    return handle_with_async_exception_ho(f, 0);
                   },
                   _co_];
          };
       return run_callback_or_defer_it
               (_cp_,
                function(param){return handle_with_async_exception_ho(f, 0);},
                _f4_);
      case 2:
       var
        callbacks = match[1],
        node = [1, current_storage[1], f],
        node$0 =
          typeof callbacks[2] === "number" ? node : [0, node, callbacks[2]];
       callbacks[2] = node$0;
       return 0;
      default: return 0;
    }
   }
   function poll(p){
    var match = underlying(p)[1];
    switch(match[0]){
      case 1:
       var e = match[1]; throw caml_maybe_attach_backtrace(e, 0);
      case 2:
       return 0;
      default: var v = match[1]; return [0, v];
    }
   }
   var
    pause_hook = [0, function(_f3_){return 0;}],
    paused = create$1(0),
    _cq_ = [0, 0];
   function wakeup_paused(param){
    if(paused[2] === paused){_cq_[1] = 0; return 0;}
    var tmp = create$1(0);
    tmp[1][2] = paused[2];
    paused[2][1] = tmp[1];
    tmp[1] = paused[1];
    paused[1][2] = tmp;
    paused[1] = paused;
    paused[2] = paused;
    _cq_[1] = 0;
    var curr$1 = tmp[2], curr = curr$1;
    for(;;){
     var _f2_ = curr !== tmp ? 1 : 0;
     if(! _f2_) return _f2_;
     if(curr[4]){var r = curr[3]; wakeup(r, 0);}
     var curr$0 = curr[2], curr = curr$0;
    }
   }
   var Wrong_headers = [248, _cr_, caml_fresh_oo_id(0)];
   function yield$0(param){
    var match = task(0), w = match[2], t = match[1], d = 0.;
    function callback(_f1_){return wakeup(w, _f1_);}
    var id = [0, 0];
    function loop(d, param){
     if(2147483000. < d)
      var remain = d - 2147483000., step = overflow_limit;
     else
      var remain = 0., step = d;
     var
      cb =
        remain == 0. ? callback : function(_f0_){return loop(remain, _f0_);};
     id[1] = [0, global.setTimeout(caml_js_wrap_callback(cb), step)];
     return 0;
    }
    loop(d, 0);
    on_cancel
     (t,
      function(param){
       var match = id[1];
       if(! match) return 0;
       var x = match[1];
       id[1] = 0;
       return global.clearTimeout(x);
      });
    return t;
   }
   function wakeup$0(param){
    return 1 === param
            ? (global.setTimeout(caml_js_wrap_callback(wakeup_paused), 0.), 0)
            : 0;
   }
   pause_hook[1] = wakeup$0;
   function prerr_string$0(s){
    return console$0.log(caml_jsstring_of_string(s));
   }
   async_exception_hook[1] =
    function(exn){
     prerr_string$0(_ct_);
     prerr_string$0(to_string(exn));
     return print_backtrace(stderr);
    };
   function icon(nm){return caml_jsstring_of_string(symbol(_cu_, nm));}
   var tree_color = "#794c0d";
   function option(var$0){
    return get$0(var$0, function(param){return new array_constructor;});
   }
   var style = option(global.hyp_style);
   function opt_style(v, default$0){
    return get$0(v, function(param){return default$0;});
   }
   function sdiv(z, s){return [254, z[1] / s, z[2] / s];}
   function sq_norm(c){return c[1] * c[1] + c[2] * c[2];}
   function norm(c){return Math.sqrt(sq_norm(c));}
   function conj(z){return [254, z[1], - z[2]];}
   function neg(z){return [254, - z[1], - z[2]];}
   function add$0(z, t){return [254, z[1] + t[1], z[2] + t[2]];}
   function sub$1(z, t){return [254, z[1] - t[1], z[2] - t[2]];}
   function mul(z, t){
    return [254, z[1] * t[1] - z[2] * t[2], z[1] * t[2] + z[2] * t[1]];
   }
   function add_mul(a, z, b){
    return [254,
            a[1] * z[1] - a[2] * z[2] + b[1],
            a[1] * z[2] + a[2] * z[1] + b[2]];
   }
   function div(z, t){
    var n = sq_norm(t);
    return [254,
            (z[1] * t[1] + z[2] * t[2]) / n,
            (z[2] * t[1] - z[1] * t[2]) / n];
   }
   function transf(a, b, c, d, z){
    var _fZ_ = add_mul(c, z, d);
    return div(add_mul(a, z, b), _fZ_);
   }
   function transl(p){
    var c = mul(conj(p), one);
    return function(z){return transf(one, p, c, one, z);};
   }
   function compose(param, _fX_){
    var
     t2 = _fX_[2],
     p2 = _fX_[1],
     t1 = param[2],
     p1 = param[1],
     t2p1 = mul(t2, p1),
     den = add$0(mul(t2p1, conj(p2)), one),
     _fY_ = div(conj(den), den),
     c = mul(mul(t1, t2), _fY_),
     _fW_ = sdiv(c, norm(c));
    return [0, div(add$0(t2p1, p2), den), _fW_];
   }
   function compute_translation(z0, z1){
    var dz = sub$1(z1, z0), z0z1 = mul(z0, z1), _fV_ = 1. - sq_norm(z0z1);
    return sdiv(add$0(mul(z0z1, conj(dz)), dz), _fV_);
   }
   var json = JSON;
   function getfile(url){
    try{var _fM_ = return$0(caml_read_file_content(url)); return _fM_;}
    catch(_fN_){
     var _fL_ = caml_wrap_exception(_fN_);
     if(_fL_ !== Not_found) throw caml_maybe_attach_backtrace(_fL_, 0);
     var
      _fK_ =
        function(r){
         var cod = r[2], msg = r[4];
         if(0 !== cod && 200 !== cod){var p = new_pending(0); return p;}
         return return$0(msg);
        },
      match = task(0),
      w = match[2],
      res = match[1],
      req = caml_xmlhttprequest_create(0);
     req.open("GET", caml_jsstring_of_string(url), true$0);
     req.responseType = cst$2;
     var content_type = 0, headers$0 = 0;
     iter
      (function(param){
        var v = param[2], n = param[1];
        return req.setRequestHeader
                (caml_jsstring_of_string(n), caml_jsstring_of_string(v));
       },
       headers$0);
     var
      headers =
        function(s){
         function _fT_(v){return [0, caml_string_of_jsstring(v)];}
         function _fU_(param){return 0;}
         return case$0
                 (req.getResponseHeader(caml_jsbytes_of_string(s)),
                  _fU_,
                  _fT_);
        },
      st = [0, 382334108],
      do_check_headers =
        function(param){
         if(382334108 === st[1]){req.status; st[1] = 583419792;}
         return 479410653 !== st[1] ? 1 : 0;
        },
      t47 =
        caml_js_wrap_callback
         (function(param){
           switch(req.readyState){
             case 2:
              if(! onIE){do_check_headers(0); return 0;} break;
             case 3:
              if(onIE){do_check_headers(0); return 0;} break;
             case 4:
              var _fR_ = do_check_headers(0);
              if(! _fR_) return _fR_;
              var
               code = req.status,
               _fO_ =
                 function(param){
                  var x = req.responseXML;
                  function _fS_(x){return [0, x];}
                  var match = case$0(x, function(param){return 0;}, _fS_);
                  if(! match) return 0;
                  var doc = match[1];
                  return doc.documentElement === no_handler ? 0 : [0, doc];
                 },
               _fP_ = caml_string_of_jsstring,
               _fQ_ = function(param){return _cs_;},
               response =
                 [0,
                  url,
                  code,
                  headers,
                  case$0(req.responseText, _fQ_, _fP_),
                  _fO_];
              return wakeup(w, response);
           }
           return 0;
          });
     req.onreadystatechange = t47;
     var _fJ_ = function(upload){return 0;};
     iter$2(req.upload, _fJ_);
     req.send(no_handler);
     on_cancel(res, function(param){return req.abort();});
     return symbol_bind(res, _fK_);
    }
   }
   function load_image(src){
    var img = createImg(document);
    function _fI_(param){return return$0(img);}
    var
     match = task(0),
     w = match[2],
     t = match[1],
     t2 = handler(function(param){wakeup(w, 0); return false$0;});
    img.onload = t2;
    img.src = src;
    return symbol_bind(t, _fI_);
   }
   function create_canvas(t7, t9){
    var d = global.document, t10 = createCanvas(d);
    t10.width = t7;
    t10.height = t9;
    return t10;
   }
   var debug_widget = createDiv(document), t13 = debug_widget.style;
   t13.position = cst_absolute;
   var t16 = debug_widget.style;
   t16.bottom = cst_0;
   var t19 = debug_widget.style;
   t19.left = cst_0;
   var t22 = debug_widget.style;
   t22.lineHeight = "0.9em";
   var
    text_size_div =
      [246,
       function(param){
        var t106 = createDiv(document), t108 = t106.style;
        t108.visibility = cst_hidden;
        var t111 = t106.style;
        t111.position = cst_absolute;
        var t114 = t106.style;
        t114.whiteSpace = cst_nowrap;
        appendChild(document.body, t106);
        return t106;
       }];
   function default_language(param){
    function _fG_(param){
     function _fH_(param){return cst_en;}
     var t126 = global.navigator;
     return get$0(t126.userLanguage, _fH_);
    }
    var t124 = global.navigator;
    return get$0(t124.language, _fG_).substring(0, 2);
   }
   function _cv_(st){
    var x = st.getItem(cst_hyp_lang);
    return x == no_handler ? default_language(0) : x;
   }
   var language = [0, case$1(global.localStorage, default_language, _cv_)];
   console$0.log(language[1]);
   function local_messages(msgs){return option(msgs[language[1]]);}
   function screen_transform(canvas){
    var
     _fF_ = opt_style(style.padding, 0.),
     offset = opt_style(style.border, 0.5) + _fF_,
     w = canvas.width,
     h = canvas.height,
     rx = w / 2.,
     ry = h / 2.,
     dx = w / 2.,
     dy = h / 2.,
     rx$0 = max(5., rx - offset),
     ry$0 = max(5., ry - offset);
    return [0, rx$0, ry$0, dx, dy];
   }
   function from_screen(canvas, x, y){
    var
     match = screen_transform(canvas),
     dy = match[4],
     dx = match[3],
     ry = match[2],
     rx = match[1],
     z = [254, (x - dx) / rx, (y - dy) / ry],
     n = norm(z);
    return n <= 0.95 ? z : sdiv(z, n / 0.95);
   }
   function ellipse_arc(c, cx, cy, rx, ry, start, fin, clock_wise){
    c.save();
    c.translate(cx, cy);
    c.scale(rx, ry);
    c.arc(0., 0., 1., start, fin, clock_wise);
    return c.restore();
   }
   function draw(canvas, vertices, edges, nodes, boxes){
    console$0.time(cst_draw);
    var
     t192 = canvas.getContext(cst_2d),
     transf = screen_transform(canvas),
     dy$1 = transf[4],
     dx$1 = transf[3],
     ry$1 = transf[2],
     rx$1 = transf[1];
    t192.clearRect(0., 0., canvas.width, canvas.height);
    var padding = opt_style(style.padding, 0.);
    t192.beginPath();
    ellipse_arc
     (t192, dx$1, dy$1, rx$1 + padding, ry$1 + padding, 0., 7., false$0);
    function _fk_(color){t192.fillStyle = color; return t192.fill();}
    iter$2(style.backgroundColor, _fk_);
    function _fl_(color){
     t192.lineWidth = 1.;
     t192.strokeStyle = color;
     return t192.stroke();
    }
    iter$2(style.boundaryColor, _fl_);
    t192.lineWidth = 2.;
    t192.lineCap = "round";
    var t205 = opt_style(style.treeColor, tree_color);
    t192.strokeStyle = t205;
    var
     ry$2 = transf[2],
     rx$2 = transf[1],
     _fn_ = edges.length - 1 - 1 | 0,
     _fm_ = 0;
    if(_fn_ >= 0){
     var i$0 = _fm_;
     for(;;){
      var
       match$2 = caml_check_bound(edges, i$0)[1 + i$0],
       t207 = match$2[3],
       j = match$2[2],
       j$0 = match$2[1],
       z1 = caml_check_bound(vertices, j$0)[1 + j$0],
       z2 = caml_check_bound(vertices, j)[1 + j],
       x = z1[1] - z2[1],
       y = z1[2] - z2[2];
      if(4. < rx$2 * ry$2 * (x * x + y * y)){
       t192.lineWidth = t207;
       var d = 2. * (z1[1] * z2[2] - z1[2] * z2[1]);
       if(Math.abs(d) < 0.05){
        var
         dy$0 = transf[4],
         dx$0 = transf[3],
         ry$0 = transf[2],
         rx$0 = transf[1];
        t192.beginPath();
        t192.moveTo(z1[1] * rx$0 + dx$0, z1[2] * ry$0 + dy$0);
        t192.lineTo(z2[1] * rx$0 + dx$0, z2[2] * ry$0 + dy$0);
        t192.stroke();
       }
       else{
        var
         n1 = sq_norm(z1) + 1.,
         n2 = sq_norm(z2) + 1.,
         z0 =
           [254, (z2[2] * n1 - z1[2] * n2) / d, (z1[1] * n2 - z2[1] * n1) / d],
         dy = transf[4],
         dx = transf[3],
         ry = transf[2],
         rx = transf[1],
         rd = norm(sub$1(z1, z0)),
         start = Math.atan2(z1[2] - z0[2], z1[1] - z0[1]),
         fin = Math.atan2(z2[2] - z0[2], z2[1] - z0[1]);
        t192.beginPath();
        var alpha = (fin - start + 6.283185307179586) % 6.283185307179586;
        if(rx == ry)
         t192.arc
          (z0[1] * rx + dx,
           z0[2] * rx + dy,
           rd * rx,
           start,
           fin,
           ! ! (3.141592653589793 < alpha ? 1 : 0));
        else
         ellipse_arc
          (t192,
           z0[1] * rx + dx,
           z0[2] * ry + dy,
           rd * rx,
           rd * ry,
           start,
           fin,
           ! ! (3.141592653589793 < alpha ? 1 : 0));
        t192.stroke();
       }
      }
      var _fA_ = i$0 + 1 | 0;
      if(_fn_ === i$0) break;
      var i$0 = _fA_;
     }
    }
    var
     image_count = [0, 0],
     large_image_count = [0, 0],
     _fp_ = nodes.length - 1 - 1 | 0,
     _fo_ = 0;
    if(_fp_ >= 0){
     var i = _fo_;
     for(;;){
      var
       match = caml_check_bound(nodes, i)[1 + i],
       img = match[2],
       l = match[1];
      a:
      b:
      if(typeof img !== "number"){
       if(4204112 <= img[1]){
        var _fr_ = img[2], match$0 = _fr_[2];
        if(! match$0) break b;
        var
         t227 = match$0[1],
         circle = _fr_[1],
         z = caml_check_bound(vertices, i)[1 + i],
         _fs_ = 1.,
         r2 =
           fold_left
            (function(z){
               return function(r2, param){
                var j = param[1];
                return min
                        (r2,
                         sq_norm(sub$1(caml_check_bound(vertices, j)[1 + j], z)));};
              }
              (z),
             _fs_,
             l),
         w = t227.width,
         h = t227.height,
         img_d = Math.sqrt(w * w + h * h),
         rd$0 = Math.sqrt(r2 * rx$2 * ry$2) * 0.5,
         rd$1 = img_d / 2. < rd$0 ? img_d / 2. : rd$0,
         w$0 = w / img_d * rd$1,
         h$0 = h / img_d * rd$1;
        if(circle){
         t192.beginPath();
         var t231 = opt_style(style.nodeBackgroundColor, tree_color);
         t192.fillStyle = t231;
         t192.arc
          (z[1] * rx$2 + dx$1,
           z[2] * ry$2 + dy$1,
           Math.sqrt(w$0 * w$0 + h$0 * h$0),
           0.,
           7.,
           false$0);
         t192.fill();
        }
        t192.drawImage
         (t227,
          z[1] * rx$2 + dx$1 - w$0,
          z[2] * ry$2 + dy$1 - h$0,
          2. * w$0,
          2. * h$0);
       }
       else{
        var img$0 = img[2][1];
        caml_array_set(boxes[3], i, 0.);
        var
         z$0 = caml_check_bound(vertices, i)[1 + i],
         min_scale$0 =
           function(z){
            function min_scale(l, w, h, s){
             var s$0 = [0, s], _fC_ = l.length - 1 - 1 | 0, _fB_ = 0;
             if(_fC_ >= 0){
              var i = _fB_;
              for(;;){
               var
                match = caml_check_bound(l, i)[1 + i],
                large = match[2],
                j = match[1],
                _fD_ = z[1],
                sx =
                  Math.abs(caml_check_bound(vertices, j)[1 + j][1] - _fD_) / w,
                sy = Math.abs(vertices[1 + j][2] - z[2]) / h,
                s$1 = sy < sx ? sx : sy,
                s$2 = large ? s$1 : 1.9 * s$1;
               if(s$2 < s$0[1]) s$0[1] = s$2;
               var _fE_ = i + 1 | 0;
               if(_fC_ === i) break;
               var i = _fE_;
              }
             }
             return s$0[1];
            }
            return min_scale;
           },
         min_scale = min_scale$0(z$0);
        if(caml_obj_tag(img$0) !== 246){
         var _ft_ = caml_obj_tag(img$0);
         c:
         if(250 === _ft_)
          var _fu_ = img$0[1];
         else{
          if(246 !== _ft_ && 244 !== _ft_){var _fu_ = img$0; break c;}
          var _fu_ = force_lazy_block(img$0);
         }
         var match$1 = poll(_fu_);
         if(match$1){
          var
           t209 = match$1[1],
           w$1 = t209.width,
           h$1 = t209.height,
           s = min_scale(l, 1., 1., 1.),
           scale = s / max(w$1 / rx$2, h$1 / ry$2),
           w$2 = w$1 * scale / 2.,
           h$2 = h$1 * scale / 2.,
           _fv_ = 1. < w$2 ? 1 : 0,
           _fw_ = _fv_ ? 1. < h$2 ? 1 : 0 : _fv_;
          if(_fw_){
           var x$0 = z$0[1] * rx$2 + dx$1, y$0 = z$0[2] * ry$2 + dy$1;
           t192.drawImage(t209, x$0 - w$2, y$0 - h$2, 2. * w$2, 2. * h$2);
           caml_array_set(boxes[1], i, x$0);
           caml_array_set(boxes[2], i, y$0);
           caml_array_set(boxes[3], i, w$2);
           caml_array_set(boxes[4], i, h$2);
           image_count[1]++;
           var
            _fx_ = 2. <= w$2 ? 1 : 0,
            _fy_ = _fx_ ? 2. <= h$2 ? 1 : 0 : _fx_;
           if(_fy_) large_image_count[1]++;
          }
         }
        }
        else{
         var s$0 = min_scale(l, 1., 1., 1.);
         if(1. < s$0 * max(rx$2, ry$2)){
          var _fz_ = caml_obj_tag(img$0);
          c:
          if(250 !== _fz_){
           if(246 !== _fz_ && 244 !== _fz_) break c;
           force_lazy_block(img$0);
          }
         }
        }
       }
       break a;
      }
      var _fq_ = i + 1 | 0;
      if(_fp_ === i) break;
      var i = _fq_;
     }
    }
    console$0.timeEnd(cst_draw);
    return console$0.log(image_count[1], large_image_count[1]);
   }
   function symbol$0(x, f){return caml_call1(f, x);}
   function tree_vertice_count(n){
    var l = n[2], _fj_ = 1;
    return fold_left
            (function(s, n){return s + tree_vertice_count(n) | 0;}, _fj_, l);
   }
   function tree_edge_count(n){
    var l = n[2], _fi_ = 0;
    return fold_left
            (function(s, n){return (s + 1 | 0) + tree_edge_count(n) | 0;},
             _fi_,
             l);
   }
   function randomize_tree(n){
    var ch = n[2], _fg_ = ch.length - 1 - 1 | 0;
    if(_fg_ >= 0){
     var i = _fg_;
     for(;;){
      var
       v = caml_check_bound(ch, i)[1 + i],
       j = math.random() * (i + 1 | 0) | 0;
      ch[1 + i] = caml_check_bound(ch, j)[1 + j];
      ch[1 + j] = v;
      var _fh_ = i - 1 | 0;
      if(0 === i) break;
      var i = _fh_;
     }
    }
    return iter$0(randomize_tree, ch);
   }
   var need_redraw = [0, 0], redraw_funct = [0, function(param){return 0;}];
   function perform_redraw(param){
    need_redraw[1] = 0;
    return caml_call1(redraw_funct[1], 0);
   }
   function schedule_redraw(param){
    var
     _fd_ = 1 - need_redraw[1],
     _fe_ =
       _fd_
        ? (need_redraw
           [1]
          = 1,
          global.requestAnimationFrame
           (caml_js_wrap_callback
             (function(param){
               var _ff_ = need_redraw[1];
               return _ff_ ? perform_redraw(0) : _ff_;
              })),
          0)
        : _fd_;
    return _fe_;
   }
   function compute_text_nodes(node_names, nodes){
    try{var _e__ = assq(language[1], node_names)[1], names = _e__;}
    catch(_fb_){
     var _eX_ = caml_wrap_exception(_fb_);
     if(_eX_ !== Not_found) throw caml_maybe_attach_backtrace(_eX_, 0);
     try{var _e9_ = assq(cst_en, node_names)[1], _eZ_ = _e9_;}
     catch(_fc_){
      var _eY_ = caml_wrap_exception(_fc_);
      if(_eY_ !== Not_found) throw caml_maybe_attach_backtrace(_eY_, 0);
      var _eZ_ = create$0(0, 11);
     }
     var names = _eZ_;
    }
    try{var _e8_ = find(names, _cB_), _e1_ = _e8_;}
    catch(_fa_){
     var _e0_ = caml_wrap_exception(_fa_);
     if(_e0_ !== Not_found) throw caml_maybe_attach_backtrace(_e0_, 0);
     var _e1_ = _cA_;
    }
    var t275 = caml_jsstring_of_string(_e1_);
    document.title = t275;
    var _e3_ = nodes.length - 1 - 1 | 0, _e2_ = 0;
    if(_e3_ >= 0){
     var i = _e2_;
     for(;;){
      var match = caml_check_bound(nodes, i)[1 + i], _e4_ = match[2];
      a:
      if(typeof _e4_ !== "number" && 4204112 === _e4_[1]){
       var
        match$0 = _e4_[2],
        info = match$0[3],
        is_root = match$0[1],
        neigh = match[1];
       try{
        var
         info$0 = find(names, info),
         font = opt_style(style.nodeFont, "20px sans-serif"),
         _eW_ = caml_obj_tag(text_size_div);
        b:
        if(250 === _eW_)
         var t116 = text_size_div[1];
        else{
         if(246 !== _eW_ && 244 !== _eW_){var t116 = text_size_div; break b;}
         var t116 = force_lazy_block(text_size_div);
        }
        var t118 = t116.style;
        t118.font = font;
        var txt = document.createTextNode(caml_jsstring_of_string(info$0));
        appendChild(t116, txt);
        var h = t116.clientHeight, w = t116.clientWidth;
        removeChild(t116, txt);
        var
         w$0 = w + 8 | 0,
         h$0 = h + 8 | 0,
         canvas = create_canvas(w$0, h$0),
         t260 = canvas.getContext(cst_2d),
         t259 = opt_style(style.nodeBackgroundColor, tree_color);
        t260.fillStyle = t259;
        var r = min(4., min(w$0, h$0) / 2.);
        t260.beginPath();
        t260.moveTo(0. + r, 0.);
        t260.arcTo(0. + w$0, 0., 0. + w$0, 0. + r, r);
        t260.arcTo(0. + w$0, 0. + h$0, 0. + w$0 - r, 0. + h$0, r);
        t260.arcTo(0., 0. + h$0, 0., 0. + h$0 - r, r);
        t260.arcTo(0., 0., 0. + r, 0., r);
        t260.fill();
        t260.font = font;
        var t265 = opt_style(style.nodeColor, "black");
        t260.fillStyle = t265;
        t260.textAlign = cst_center;
        t260.textBaseline = cst_middle;
        t260.fillText(caml_jsstring_of_string(info$0), w$0 / 2., h$0 / 2.);
        var _e7_ = [0, canvas], canvas$0 = _e7_;
       }
       catch(_e$_){
        var _e6_ = caml_wrap_exception(_e$_);
        if(_e6_ !== Not_found) throw caml_maybe_attach_backtrace(_e6_, 0);
        var canvas$0 = 0;
       }
       caml_check_bound(nodes, i)[1 + i] =
        [0, neigh, [0, 4204112, [0, is_root, canvas$0, info]]];
       break a;
      }
      var _e5_ = i + 1 | 0;
      if(_e3_ === i) break;
      var i = _e5_;
     }
    }
    return 0;
   }
   function weight_sum(l){
    var _eV_ = 0.;
    return fold_left(function(s, n){var w = n[1]; return s + w;}, _eV_, l);
   }
   function compute_weights(node){
    var l = node[2];
    if(0 === l.length - 1) return [0, 1., [0]];
    var l$0 = map(compute_weights, l);
    return [0, 0.6 * weight_sum(l$0), l$0];
   }
   function close_button(over){
    var
     color = opt_style(style.buttonColor, "#888888"),
     canvas = create_canvas(32, 32),
     t286 = canvas.getContext(cst_2d);
    t286.save();
    t286.lineWidth = 2.;
    t286.strokeStyle = color;
    if(over){t286.shadowBlur = 4.; t286.shadowColor = color;}
    t286.beginPath();
    t286.moveTo(6.82842712474619, 6.82842712474619);
    t286.lineTo(25.17157287525381, 25.17157287525381);
    t286.moveTo(6.82842712474619, 25.17157287525381);
    t286.lineTo(25.17157287525381, 6.82842712474619);
    t286.stroke();
    t286.restore();
    var _eU_ = over ? _cI_ : _cJ_, t308 = caml_jsstring_of_string(_eU_);
    canvas.className = t308;
    var t312 = canvas.style;
    t312.position = cst_absolute;
    var t315 = canvas.style;
    t315.top = cst_0;
    var t318 = canvas.style;
    t318.right = cst_0;
    return canvas;
   }
   function img_button(href, h, src){
    function decoration(over){
     var t320 = createImg(document), t319 = icon(src);
     t320.src = t319;
     var t321 = createDiv(document), t323 = t321.style;
     t323.position = cst_absolute;
     var t326 = t321.style;
     t326.width = cst_38px;
     var
      t328 = caml_jsstring_of_string(symbol("" + max(38, h), _cK_)),
      t329 = t321.style;
     t329.height = t328;
     var t332 = t321.style;
     t332.margin = cst_2px;
     var t335 = t321.style;
     t335.borderRadius = cst_2px;
     var
      extra = max(6, 44 - h | 0),
      t337 =
        caml_jsstring_of_string
         (symbol
           ("" + (extra / 2 | 0),
            symbol(_cM_, symbol("" + (extra - (extra / 2 | 0) | 0), _cL_)))),
      t338 = t321.style;
     t338.padding = t337;
     var
      _eT_ = over ? _cN_ : _cP_,
      t339 = caml_jsstring_of_string(symbol(_cO_, _eT_));
     t321.className = t339;
     appendChild(t321, t320);
     return t321;
    }
    var button = createDiv(document);
    button.className = cst_button;
    var t345 = button.style;
    t345.width = cst_48px;
    var
     t347 = caml_jsstring_of_string(symbol("" + (8 + max(38, h) | 0), _cQ_)),
     t348 = button.style;
    t348.height = t347;
    if(href){
     var t351 = href[1], t350 = createA(document);
     t350.target = cst_blank;
     t350.href = t351;
     appendChild(button, t350);
     var container = t350;
    }
    else
     var container = button;
    appendChild(container, decoration(1));
    appendChild(container, decoration(0));
    return button;
   }
   function tooltip(t358){
    var tooltip = createDiv(document), t355 = tooltip.style;
    t355.position = cst_absolute;
    tooltip.className = "tooltip on";
    tooltip.innerHTML = t358;
    return tooltip;
   }
   function show_on_click(button, t361){
    var
     activated = [0, 0],
     t364 =
       handler
        (function(ev){
          if(1 - activated[1]){
           activated[1] = 1;
           var c = [0, no_handler];
           c[1] =
            addEventListener
             (document,
              click,
              handler
               (function(ev){
                 function _eS_(param){
                  iter$1(c[1], removeEventListener);
                  t361.className = cst_text_on;
                  activated[1] = 0;
                  return return$0(0);
                 }
                 symbol_bind(yield$0(0), _eS_);
                 return true$0;
                }),
              true$0);
           t361.className = cst_text;
          }
          stopPropagation(ev);
          return false$0;
         });
    return button.onclick = t364;
   }
   function show_image(all_messages, image_info, name, small_image){
    return symbol_bind
            (image_info,
             function(image_info){
              var
               messages = local_messages(all_messages),
               i = [0, -1],
               name_js = caml_jsstring_of_string(name),
               _eI_ = image_info.length - 1 - 1 | 0,
               _eH_ = 0;
              if(_eI_ >= 0){
               var j = _eH_;
               for(;;){
                if(name_js === caml_check_bound(image_info, j)[1 + j][1])
                 i[1] = j;
                var _eN_ = j + 1 | 0;
                if(_eI_ === j) break;
                var j = _eN_;
               }
              }
              if(0 <= i[1]){
               var
                _eJ_ = i[1],
                info = caml_check_bound(image_info, _eJ_)[1 + _eJ_];
               console$0.log(name, i[1]);
               var container = createDiv(document), t371 = container.style;
               t371.margin = "10px";
               var t374 = container.style;
               t374.position = cst_absolute;
               var t377 = container.style;
               t377.top = cst_0;
               var t380 = container.style;
               t380.bottom = cst_0;
               var t383 = container.style;
               t383.left = cst_0;
               var t386 = container.style;
               t386.right = cst_0;
               var
                img_container = createDiv(document),
                t389 = img_container.style;
               t389.position = cst_absolute;
               var t392 = img_container.style;
               t392.top = cst_0;
               var t395 = img_container.style;
               t395.bottom = "4em";
               var t398 = img_container.style;
               t398.left = cst_38px;
               var t401 = img_container.style;
               t401.right = cst_38px;
               var
                wrap =
                  function(elt){
                   var t402 = createDiv(document), t404 = t402.style;
                   t404.position = cst_absolute;
                   var t407 = t402.style;
                   t407.top = cst_0;
                   var t410 = t402.style;
                   t410.bottom = cst_0;
                   var t413 = t402.style;
                   t413.left = cst_0;
                   var t416 = t402.style;
                   t416.right = cst_0;
                   var t419 = t402.style;
                   t419.margin = cst_auto;
                   var
                    t421 = caml_jsstring_of_string(symbol("" + info[5], _cR_)),
                    t422 = t402.style;
                   t422.maxHeight = t421;
                   appendChild(t402, elt);
                   return t402;
                  },
                t453 = createImg(document),
                _eK_ = caml_obj_tag(small_image);
               a:
               if(250 === _eK_)
                var _eL_ = small_image[1];
               else{
                if(246 !== _eK_ && 244 !== _eK_){
                 var _eL_ = small_image;
                 break a;
                }
                var _eL_ = force_lazy_block(small_image);
               }
               var match = poll(_eL_);
               if(match){
                var
                 small_image$0 = match[1],
                 canvas = create_canvas(info[4], info[5]),
                 c = canvas.getContext(cst_2d);
                c.drawImage(small_image$0, 0., 0., info[4], info[5]);
                var t433 = canvas.style;
                t433.display = cst_block;
                var t436 = canvas.style;
                t436.height = cst_auto;
                var t439 = canvas.style;
                t439.width = cst_auto;
                var t442 = canvas.style;
                t442.maxWidth = cst_100;
                var t445 = canvas.style;
                t445.maxHeight = cst_100;
                var t448 = canvas.style;
                t448.marginLeft = cst_auto;
                var t451 = canvas.style;
                t451.marginRight = cst_auto;
                var w = wrap(canvas);
                appendChild(img_container, w);
                var
                 t452 =
                   handler
                    (function(param){
                      removeChild(img_container, w);
                      return false$0;
                     });
                t453.onload = t452;
               }
               var match$0 = info[7];
               if(match$0)
                var url = match$0[1], t454 = url;
               else
                var
                 t454 =
                   caml_jsstring_of_string(symbol(_c0_, symbol(name, _cZ_)));
               t453.src = t454;
               var t456 = info[4];
               t453.width = t456;
               var t458 = info[5];
               t453.height = t458;
               var t462 = t453.style;
               t462.display = cst_block;
               var t465 = t453.style;
               t465.height = cst_auto;
               var t468 = t453.style;
               t468.width = cst_auto;
               var t471 = t453.style;
               t471.maxWidth = cst_100;
               var t474 = t453.style;
               t474.maxHeight = cst_100;
               var t477 = t453.style;
               t477.marginLeft = cst_auto;
               var t480 = t453.style;
               t480.marginRight = cst_auto;
               var
                w$0 = wrap(t453),
                handle_error =
                  function(param){
                   removeChild(img_container, w$0);
                   return false$0;
                  },
                t481 = handler(handle_error);
               t453.onerror = t481;
               var t483 = handler(handle_error);
               t453.onabort = t483;
               appendChild(img_container, w$0);
               appendChild(container, img_container);
               var legend = createDiv(document), t485 = info[3];
               legend.innerHTML = t485;
               var
                t487 =
                  handler(function(ev){stopPropagation(ev); return true$0;});
               legend.onclick = t487;
               legend.className = cst_text;
               var t493 = legend.style;
               t493.position = cst_absolute;
               var t496 = legend.style;
               t496.bottom = cst_0;
               var t499 = legend.style;
               t499.marginRight = cst_auto;
               var t502 = legend.style;
               t502.marginLeft = cst_auto;
               appendChild(container, legend);
               var background = createDiv(document);
               appendChild(background, container);
               background.className = cst_overlay;
               var t507 = background.style;
               t507.width = cst_100;
               var t510 = background.style;
               t510.height = cst_100;
               var t513 = background.style;
               t513.position = cst_absolute;
               var t516 = background.style;
               t516.top = cst_0;
               var t519 = background.style;
               t519.left = cst_0;
               var t522 = background.style;
               t522.zIndex = "1";
               var button = createDiv(document);
               button.className = cst_button;
               var t527 = button.style;
               t527.position = cst_absolute;
               var t530 = button.style;
               t530.top = cst_0;
               var t533 = button.style;
               t533.right = cst_0;
               var t536 = button.style;
               t536.cursor = cst_pointer;
               appendChild(button, close_button(1));
               appendChild(button, close_button(0));
               var
                t538 =
                  tooltip
                   (opt_style
                     (messages.close, "Click anywhere to return to the tree")),
                t540 = t538.style;
               t540.right = "32px";
               var t543 = t538.style;
               t543.top = "20px";
               appendChild(button, t538);
               appendChild(background, button);
               var buttons = createDiv(document), t546 = buttons.style;
               t546.position = cst_absolute;
               var t549 = buttons.style;
               t549.top = cst_0;
               var t552 = buttons.style;
               t552.left = cst_0;
               var
                suffix =
                  language[1] === cst_en
                   ? _cS_
                   : symbol(_cY_, caml_string_of_jsstring(language[1])),
                url$0 =
                  symbol
                   (_cT_, symbol(caml_string_of_jsstring(info[2]), suffix)),
                commons =
                  img_button([0, caml_jsstring_of_string(url$0)], 52, _cU_),
                t554 =
                  tooltip
                   (opt_style
                     (messages.wikimediaCommons,
                      "See image description on Wikimedia Commons")),
                t556 = t554.style;
               t556.left = cst_48px;
               var t559 = t554.style;
               t559.top = "12px";
               appendChild(commons, t554);
               appendChild(buttons, commons);
               var
                wikipedia = img_button(0, 34, _cV_),
                t573 = createDiv(document),
                count = [0, 0],
                dl = createDl(document),
                list =
                  function(title, lang){
                   var ul = createUl(document), empty = [0, 1], _eO_ = info[6];
                   iter$0
                    (function(param){
                      var
                       refer = param[3],
                       lang$0 = param[2],
                       name = param[1],
                       _eQ_ = lang$0 === lang ? 1 : 0;
                      if(! _eQ_) return _eQ_;
                      empty[1] = 0;
                      var t563 = createA(document);
                      appendChild(t563, document.createTextNode(name));
                      t563.target = cst_blank;
                      var
                       refer$0 = caml_string_of_jsstring(refer),
                       _eR_ =
                         0 === caml_ml_string_length(refer$0)
                          ? caml_string_of_jsstring(name)
                          : refer$0,
                       url =
                         symbol
                          (_cX_,
                           symbol(caml_string_of_jsstring(lang), symbol(_cW_, _eR_))),
                       t564 = caml_jsstring_of_string(url);
                      t563.href = t564;
                      var li = createLi(document);
                      appendChild(li, t563);
                      return appendChild(ul, li);
                     },
                     _eO_);
                   var _eP_ = 1 - empty[1];
                   if(! _eP_) return _eP_;
                   count[1]++;
                   var dd = createDd(document);
                   appendChild(dd, document.createTextNode(title));
                   appendChild(dl, dd);
                   var dt = createDt(document);
                   appendChild(dt, ul);
                   return appendChild(dl, dt);
                  },
                _eM_ = language[1];
               list(opt_style(messages.language, cst_In_English), _eM_);
               if(language[1] !== cst_en) list(cst_In_English, cst_en);
               if(0 < count[1])
                appendChild(t573, dl);
               else
                appendChild
                 (t573,
                  document.createTextNode
                   (opt_style(messages.noRef, "No reference found.")));
               t573.className = cst_text_on;
               var t576 = t573.style;
               t576.position = cst_absolute;
               var t579 = t573.style;
               t579.left = cst_48px;
               var t582 = t573.style;
               t582.top = "62px";
               var t585 = t573.style;
               t585.whiteSpace = cst_nowrap;
               appendChild(wikipedia, t573);
               appendChild(buttons, wikipedia);
               var
                t586 =
                  handler(function(ev){stopPropagation(ev); return true$0;});
               t573.onclick = t586;
               show_on_click(wikipedia, t573);
               var
                t588 =
                  handler(function(ev){stopPropagation(ev); return true$0;});
               buttons.onclick = t588;
               appendChild(background, buttons);
               appendChild(document.body, background);
               var
                t592 =
                  handler
                   (function(param){
                     removeChild(document.body, background);
                     return true$0;
                    });
               background.onclick = t592;
              }
              return return$0(0);
             });
   }
   var
    information_en =
      '<h1>A tree of animals<\/h1> This <a target="_blank" href="http://en.wikipedia.org/wiki/Phylogenetic_tree"><em>phylogenetic<\/em> tree<\/a> displays the relationships among animals.<h2>Usage<\/h2>Browse the tree by dragging it with the mouse. Click on any image to display a larger version.<h2>Credits<\/h2>This software and the images it uses are under free licenses. Images are from <a target="_blank" href="http://commons.wikimedia.org/wiki/Main_Page">Wikimedia Commons<\/a>.  You can click on each image for details.  The software has been written by Jérôme Vouillon (CNRS).';
   iter(function(src){load_image(icon(src)); return 0;}, icons);
   function _cw_(s){return return$0(json.parse(caml_jsstring_of_string(s)));}
   var all_messages = symbol_bind(getfile(_cx_), _cw_);
   function _cF_(s){
    var
     info$0 = json.parse(caml_jsstring_of_string(s)),
     node_names = info$0[2],
     tree$0 = info$0[1];
    randomize_tree(tree$0);
    function _d3_(param){
     var
      about = param[3],
      tbl = param[2],
      lang = param[1],
      h = create$0(0, 101);
     iter$0
      (function(param){
        var
         v = param[2],
         k = param[1],
         data$0 = caml_string_of_jsstring(v),
         key$0 = caml_string_of_jsstring(k),
         i$1 = key_index(h, key$0),
         bucket = [0, key$0, data$0, caml_check_bound(h[2], i$1)[1 + i$1]];
        caml_check_bound(h[2], i$1)[1 + i$1] = bucket;
        h[1] = h[1] + 1 | 0;
        var _eG_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
        if(! _eG_) return _eG_;
        var
         odata = h[2],
         osize = odata.length - 1,
         nsize$0 = osize * 2 | 0,
         _eF_ = nsize$0 < max_array_length ? 1 : 0;
        if(! _eF_) return _eF_;
        var
         ndata = caml_make_vect(nsize$0, 0),
         _ew_ = h.length - 1 < 4 ? 1 : 0,
         _ex_ = _ew_ || (h[4] < 0 ? 1 : 0),
         inplace = 1 - _ex_;
        h[2] = ndata;
        var
         nsize = ndata.length - 1,
         ndata_tail = caml_make_vect(nsize, 0),
         _ez_ = odata.length - 1 - 1 | 0,
         _ey_ = 0;
        if(_ez_ >= 0){
         var i$0 = _ey_;
         a:
         for(;;){
          var cell$1 = caml_check_bound(odata, i$0)[1 + i$0], cell = cell$1;
          for(;;){
           if(! cell){
            var _eE_ = i$0 + 1 | 0;
            if(_ez_ === i$0) break a;
            var i$0 = _eE_;
            break;
           }
           var
            key = cell[1],
            data = cell[2],
            next = cell[3],
            cell$0 = inplace ? cell : [0, key, data, 0],
            nidx = key_index(h, key),
            match = caml_check_bound(ndata_tail, nidx)[1 + nidx];
           if(match)
            match[3] = cell$0;
           else
            caml_check_bound(ndata, nidx)[1 + nidx] = cell$0;
           caml_check_bound(ndata_tail, nidx)[1 + nidx] = cell$0;
           var cell = next;
          }
         }
        }
        if(inplace){
         var _eB_ = nsize - 1 | 0, _eA_ = 0;
         if(_eB_ >= 0){
          var i = _eA_;
          for(;;){
           var match$0 = caml_check_bound(ndata_tail, i)[1 + i];
           if(match$0) match$0[3] = 0;
           var _eD_ = i + 1 | 0;
           if(_eB_ === i) break;
           var i = _eD_;
          }
         }
         var _eC_ = 0;
        }
        else
         var _eC_ = inplace;
        return _eC_;
       },
       tbl);
     return [0, lang, [0, h, about]];
    }
    var
     node_names$0 =
       symbol$0
        (symbol$0(node_names, function(_ev_){return map(_d3_, _ev_);}),
         to_list);
    function compute(is_root, n){
     var ch = n[2], info = n[1], info$0 = caml_string_of_jsstring(info);
     if(0 === caml_ml_string_length(info$0))
      var info$1 = 870530776;
     else if(124 === caml_string_get(info$0, 0))
      var
       img = sub$0(info$0, 1, caml_ml_string_length(info$0) - 1 | 0),
       info$1 =
         [0,
          3654627,
          [0,
           [246,
            function(param){
             function _et_(param){
              function _eu_(img){schedule_redraw(0); return return$0(img);}
              return symbol_bind
                      (load_image
                        (caml_jsstring_of_string(symbol(_cz_, symbol(img, _cy_)))),
                       _eu_);
             }
             return symbol_bind(yield$0(0), _et_);
            }],
           img]];
     else
      var info$1 = [0, 4204112, [0, is_root, 0, info$0]];
     var ch$0 = map(function(n){return compute(0, n);}, ch);
     return [0, info$1, ch$0];
    }
    var
     root = compute(1, tree$0),
     node_count = tree_vertice_count(root),
     vertices = caml_make_vect(node_count, zero),
     edges = caml_make_vect(tree_edge_count(root), _cD_),
     nodes = caml_make_vect(node_count, [0, [0], 870530776]),
     vi = [0, 0],
     ei = [0, 0],
     weights = compute_weights(root);
    function layout_rec
    (current, current_weights, is_root, transf, lineWidth, dir){
     var
      ch = current[2],
      info = current[1],
      ch_weights = current_weights[2],
      i$0 = vi[1];
     vi[1]++;
     var _eq_ = transf[1];
     caml_check_bound(vertices, i$0)[1 + i$0] = _eq_;
     var l$0 = ch.length - 1;
     if(0 === l$0)
      var ch$0 = [0];
     else{
      var j = [0, 0], total_weight = weight_sum(ch_weights);
      if(is_root)
       var
        w = caml_check_bound(ch_weights, 0)[1][1],
        _er_ = (total_weight - w) / 2.;
      else
       var _er_ = 0.;
      var
       w0 = [0, _er_],
       f =
         function(node, weights){
          var
           w = weights[1],
           angle = Math.acos(dir[1]) * w / total_weight,
           th =
             Math.acos(dir[1]) * ((w0[1] + w / 2.) / total_weight * 2. - 1.);
          j[1]++;
          w0[1] = w0[1] + w;
          var
           a =
             [254,
              (Math.cos(angle) - 0.5000000000000001)
              / (1. - Math.cos(1.0471975511965976 + angle)),
              0.],
           dir$0 = [254, 0.5000000000000001, 0.8660254037844386];
          if(0.25 < a[1])
           var dir$1 = dir$0, a$1 = a;
          else
           var
            dir$2 = transl(neg(a$0))([254, Math.cos(angle), Math.sin(angle)]),
            dir$1 = dir$2,
            a$1 = a$0;
          var
           u =
             compose
              ([0, a$1, one], [0, zero, [254, Math.cos(th), Math.sin(th)]]),
           ch =
             layout_rec
              (node, weights, 0, compose(u, transf), lineWidth * 0.94, dir$1),
           i = ch[1],
           k = ei[1];
          ei[1]++;
          caml_check_bound(edges, k)[1 + k] = [0, i$0, i, lineWidth];
          return ch;
         },
       l = ch.length - 1;
      if(ch_weights.length - 1 !== l)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _cC_], 1);
      if(0 === l)
       var _es_ = [0];
      else{
       var
        _ek_ = caml_check_bound(ch_weights, 0)[1],
        r = caml_make_vect(l, f(caml_check_bound(ch, 0)[1], _ek_)),
        _em_ = l - 1 | 0,
        _el_ = 1;
       if(_em_ >= 1){
        var i = _el_;
        for(;;){
         var
          _en_ = caml_check_bound(ch_weights, i)[1 + i],
          _eo_ = f(caml_check_bound(ch, i)[1 + i], _en_);
         caml_check_bound(r, i)[1 + i] = _eo_;
         var _ep_ = i + 1 | 0;
         if(_em_ === i) break;
         var i = _ep_;
        }
       }
       var _es_ = r;
      }
      var ch$0 = _es_;
     }
     caml_check_bound(nodes, i$0)[1 + i$0] = [0, [0], info];
     return [0, i$0, ch$0];
    }
    var
     tree = layout_rec(root, weights, 1, [0, zero, one], 6., _cE_),
     frontiers = caml_make_vect(nodes.length - 1, [0, [0], [0]]);
    function status(i){
     var info = caml_check_bound(nodes, i)[1 + i][2];
     return [0, i, 870530776 !== info ? 1 : 0];
    }
    function compute_frontiers(node){
     var l = node[2], i = node[1];
     iter$0(compute_frontiers, l);
     if(0 === l.length - 1)
      var _ee_ = [0, status(i)], _ef_ = [0, [0, status(i)], _ee_];
     else
      var
       _eg_ = l.length - 1 - 1 | 0,
       _eh_ = caml_check_bound(l, _eg_)[1 + _eg_][1],
       _ei_ = caml_check_bound(frontiers, _eh_)[1 + _eh_][2],
       _ej_ = caml_check_bound(l, 0)[1][1],
       _ef_ = [0, caml_check_bound(frontiers, _ej_)[1 + _ej_][1], _ei_];
     caml_check_bound(frontiers, i)[1 + i] = _ef_;
     return 0;
    }
    compute_frontiers(tree);
    var neighboors = caml_make_vect(nodes.length - 1, [0]);
    function compute_neigh(node, parent, lft, rght){
     var
      ch = node[2],
      i = node[1],
      children = map(function(n){return status(n[1]);}, ch),
      _d4_ =
        caml_array_concat([0, parent, [0, lft, [0, rght, [0, children, 0]]]]);
     caml_check_bound(neighboors, i)[1 + i] = _d4_;
     var
      is_root = 0 === parent.length - 1 ? 1 : 0,
      n = ch.length - 1,
      _d6_ = n - 1 | 0,
      _d5_ = 0;
     if(_d6_ >= 0){
      var j = _d5_;
      for(;;){
       if(0 < j)
        var
         _d7_ = j - 1 | 0,
         _d8_ = caml_check_bound(ch, _d7_)[1 + _d7_][1],
         lft$0 = caml_check_bound(frontiers, _d8_)[1 + _d8_][2];
       else if(is_root)
        var
         _ec_ = n - 1 | 0,
         _ed_ = caml_check_bound(ch, _ec_)[1 + _ec_][1],
         lft$0 = caml_check_bound(frontiers, _ed_)[1 + _ed_][2];
       else
        var lft$0 = lft;
       if(j < (n - 1 | 0))
        var
         _d9_ = j + 1 | 0,
         _d__ = caml_check_bound(ch, _d9_)[1 + _d9_][1],
         rght$0 = caml_check_bound(frontiers, _d__)[1 + _d__][1];
       else if(is_root)
        var
         _eb_ = caml_check_bound(ch, 0)[1][1],
         rght$0 = caml_check_bound(frontiers, _eb_)[1 + _eb_][1];
       else
        var rght$0 = rght;
       var _d$_ = [0, status(i)];
       compute_neigh(caml_check_bound(ch, j)[1 + j], _d$_, lft$0, rght$0);
       var _ea_ = j + 1 | 0;
       if(_d6_ === j) break;
       var j = _ea_;
      }
     }
     return 0;
    }
    compute_neigh(tree, [0], [0], [0]);
    var _d1_ = nodes.length - 1 - 1 | 0, _d0_ = 0;
    if(_d1_ >= 0){
     var i = _d0_;
     for(;;){
      var info = caml_check_bound(nodes, i)[1 + i][2];
      nodes[1 + i] = [0, caml_check_bound(neighboors, i)[1 + i], info];
      var _d2_ = i + 1 | 0;
      if(_d1_ === i) break;
      var i = _d2_;
     }
    }
    var
     boxes =
       [0,
        caml_make_vect(node_count, 0.),
        caml_make_vect(node_count, 0.),
        caml_make_vect(node_count, 0.),
        caml_make_vect(node_count, 0.)];
    compute_text_nodes(node_names$0, nodes);
    return return$0([0, [0, vertices, edges, nodes, boxes], node_names$0]);
   }
   var tree_info = symbol_bind(getfile(tree_url), _cF_);
   function _cG_(s){return return$0(json.parse(caml_jsstring_of_string(s)));}
   var image_info = symbol_bind(getfile(_cH_), _cG_);
   function start(param){
    try{
     createCanvas(global.document);
     var
      p =
        symbol_bind
         (tree_info,
          function(param){
           var
            tree_i18n = param[2],
            match = param[1],
            boxes = match[4],
            nodes = match[3],
            edges = match[2],
            vertices = match[1];
           return symbol_bind
                   (all_messages,
                    function(all_messages){
                     var page = document.documentElement, t666 = page.style;
                     t666.overflow = cst_hidden;
                     var t669 = page.style;
                     t669.height = cst_100;
                     var t671 = document.body, t673 = t671.style;
                     t673.overflow = cst_hidden;
                     var t675 = document.body, t677 = t675.style;
                     t677.margin = cst_0px;
                     var t679 = document.body, t681 = t679.style;
                     t681.height = cst_100;
                     var
                      w = page.clientWidth,
                      h = page.clientHeight,
                      element = create_canvas(w, h);
                     appendChild(document.body, element);
                     var
                      tr = [0, [0, zero, one]],
                      tr$0 = [0, tr[1]],
                      l = vertices.length - 1,
                      vertices$0 = 0 === l ? [0] : caml_array_sub(vertices, 0, l);
                     redraw_funct[1] =
                      function(param){
                       need_redraw[1] = 0;
                       console$0.time(cst_transform);
                       var
                        t691 = page.clientWidth,
                        t693 = page.clientHeight,
                        _dY_ = t691 !== element.width ? 1 : 0,
                        _dZ_ = _dY_ || (t693 !== element.height ? 1 : 0);
                       if(_dZ_){element.width = t691; element.height = t693;}
                       var
                        param$0 = tr$0[1],
                        t = param$0[2],
                        p = param$0[1],
                        c = mul(conj(p), t),
                        _dV_ = vertices.length - 1 - 1 | 0,
                        _dU_ = 0;
                       if(_dV_ >= 0){
                        var i = _dU_;
                        for(;;){
                         var
                          _dW_ =
                            transf(t, p, c, one, caml_check_bound(vertices, i)[1 + i]);
                         caml_check_bound(vertices$0, i)[1 + i] = _dW_;
                         var _dX_ = i + 1 | 0;
                         if(_dV_ === i) break;
                         var i = _dX_;
                        }
                       }
                       console$0.timeEnd(cst_transform);
                       return draw(element, vertices$0, edges, nodes, boxes);
                      };
                     perform_redraw(0);
                     var
                      t702 =
                        handler
                         (function(param){
                           var
                            page = document.documentElement,
                            w = page.clientWidth,
                            h = page.clientHeight,
                            _dS_ = w !== element.width ? 1 : 0,
                            _dT_ = _dS_ || (h !== element.height ? 1 : 0);
                           if(_dT_) schedule_redraw(0);
                           return true$0;
                          });
                     global.onresize = t702;
                     function find_box(boxes, x, y){
                      var
                       p = [0, -1],
                       _dN_ = boxes[3].length - 1 - 1 | 0,
                       _dM_ = 0;
                      if(_dN_ >= 0){
                       var i = _dM_;
                       for(;;){
                        var _dO_ = 0. < boxes[3][1 + i] ? 1 : 0;
                        if(_dO_)
                         var
                          _dP_ =
                            Math.abs(x - boxes[1][1 + i]) < boxes[3][1 + i] ? 1 : 0,
                          _dQ_ =
                            _dP_
                             ? Math.abs(y - boxes[2][1 + i]) < boxes[4][1 + i] ? 1 : 0
                             : _dP_;
                        else
                         var _dQ_ = _dO_;
                        if(_dQ_) p[1] = i;
                        var _dR_ = i + 1 | 0;
                        if(_dN_ === i) break;
                        var i = _dR_;
                       }
                      }
                      return p[1];
                     }
                     var on_image = [0, 0];
                     function update_cursor(x, y){
                      var i = find_box(boxes, x, y);
                      if(-1 === i){
                       var _dI_ = on_image[1];
                       if(_dI_){
                        var t709 = element.style;
                        t709.cursor = cst$2;
                        on_image[1] = 0;
                        var _dJ_ = 0;
                       }
                       else
                        var _dJ_ = _dI_;
                       return _dJ_;
                      }
                      var _dK_ = 1 - on_image[1];
                      if(_dK_){
                       var t706 = element.style;
                       t706.cursor = cst_pointer;
                       on_image[1] = 1;
                       var _dL_ = 0;
                      }
                      else
                       var _dL_ = _dK_;
                      return _dL_;
                     }
                     var
                      t712 =
                        handler
                         (function(t711){
                           update_cursor(t711.clientX, t711.clientY);
                           return false$0;
                          });
                     element.onmousemove = t712;
                     var
                      t37 =
                        handler
                         (function(t23){
                           var
                            x0 = t23.clientX,
                            y0 = t23.clientY,
                            started = [0, 0],
                            c1 =
                              addEventListener
                               (document,
                                mousemove,
                                handler
                                 (function(t25){
                                   var
                                    x1 = t25.clientX,
                                    y1 = t25.clientY,
                                    _dF_ = 1 - started[1];
                                   if(_dF_)
                                    var
                                     _dG_ = 4 < abs(x1 - x0 | 0) ? 1 : 0,
                                     _dH_ = _dG_ || (4 < abs(y1 - y0 | 0) ? 1 : 0);
                                   else
                                    var _dH_ = _dF_;
                                   if(_dH_){
                                    started[1] = 1;
                                    var t29 = element.style;
                                    t29.cursor = cst_move;
                                   }
                                   if(started[1]){
                                    var
                                     z0 = from_screen(element, x0, y0),
                                     z1 = from_screen(element, x1, y1),
                                     p = tr[1][1],
                                     z0$0 = transl(neg(p))(z0),
                                     p$0 = compute_translation(z0$0, z1);
                                    tr$0[1] = [0, p$0, one];
                                    schedule_redraw(0);
                                   }
                                   stopPropagation(t25);
                                   return true$0;
                                  }),
                                true$0),
                            c2 = [0, no_handler];
                           c2[1] =
                            addEventListener
                             (document,
                              mouseup,
                              handler
                               (function(t34){
                                 removeEventListener(c1);
                                 iter$1(c2[1], removeEventListener);
                                 if(started[1]){
                                  var t32 = element.style;
                                  t32.cursor = cst$2;
                                  var y = t34.clientY, x = t34.clientX;
                                  tr[1] = tr$0[1];
                                  on_image[1] = 0;
                                  update_cursor(x, y);
                                 }
                                 else{
                                  var
                                   y$0 = t34.clientY,
                                   x$0 = t34.clientX,
                                   i = find_box(boxes, x$0, y$0);
                                  a:
                                  if(0 < i){
                                   var _dE_ = caml_check_bound(nodes, i)[1 + i][2];
                                   if(typeof _dE_ !== "number" && 3654627 === _dE_[1]){
                                    var match = _dE_[2], name = match[2], img = match[1];
                                    show_image(all_messages, image_info, name, img);
                                    break a;
                                   }
                                  }
                                 }
                                 return true$0;
                                }),
                              true$0);
                           return true$0;
                          });
                     element.onmousedown = t37;
                     addEventListener
                      (element,
                       touchstart,
                       handler
                        (function(t39){
                          function _dg_(touch){
                           var
                            id = touch.identifier,
                            x0 = touch.clientX,
                            y0 = touch.clientY,
                            started = [0, 0],
                            c1 =
                              addEventListener
                               (document,
                                touchmove,
                                handler
                                 (function(t45){
                                   var
                                    t46 = t45.changedTouches,
                                    _dv_ = t46.length - 1 | 0,
                                    _du_ = 0;
                                   if(_dv_ >= 0){
                                    var i = _du_;
                                    for(;;){
                                     var
                                      _dw_ =
                                        function(touch){
                                         var _dy_ = touch.identifier === id ? 1 : 0;
                                         if(_dy_){
                                          var
                                           x1 = touch.clientX,
                                           y1 = touch.clientY,
                                           _dz_ = 1 - started[1];
                                          if(_dz_)
                                           var
                                            _dA_ = 4 < abs(x1 - x0 | 0) ? 1 : 0,
                                            _dB_ = _dA_ || (4 < abs(y1 - y0 | 0) ? 1 : 0);
                                          else
                                           var _dB_ = _dz_;
                                          if(_dB_){
                                           started[1] = 1;
                                           var t55 = element.style;
                                           t55.cursor = cst_move;
                                          }
                                          var _dC_ = started[1];
                                          if(_dC_){
                                           console$0.time(cst_transform);
                                           var
                                            z0 = from_screen(element, x0, y0),
                                            z1 = from_screen(element, x1, y1),
                                            p = tr[1][1],
                                            z0$0 = transl(neg(p))(z0),
                                            p$0 = compute_translation(z0$0, z1);
                                           tr$0[1] = [0, p$0, one];
                                           return schedule_redraw(0);
                                          }
                                          var _dD_ = _dC_;
                                         }
                                         else
                                          var _dD_ = _dy_;
                                         return _dD_;
                                        };
                                     iter$2(t45.changedTouches.item(i), _dw_);
                                     var _dx_ = i + 1 | 0;
                                     if(_dv_ === i) break;
                                     var i = _dx_;
                                    }
                                   }
                                   stopPropagation(t45);
                                   return false$0;
                                  }),
                                true$0),
                            c2 = [0, no_handler],
                            c3 = [0, no_handler];
                           c2[1] =
                            addEventListener
                             (document,
                              touchend,
                              handler
                               (function(t56){
                                 var
                                  t57 = t56.changedTouches,
                                  _dn_ = t57.length - 1 | 0,
                                  _dm_ = 0;
                                 if(_dn_ >= 0){
                                  var i = _dm_;
                                  for(;;){
                                   var
                                    _do_ =
                                      function(touch){
                                       var _dq_ = touch.identifier === id ? 1 : 0;
                                       if(! _dq_) return _dq_;
                                       var x = touch.clientX, y = touch.clientY;
                                       removeEventListener(c1);
                                       iter$1(c2[1], removeEventListener);
                                       iter$1(c3[1], removeEventListener);
                                       if(started[1]){
                                        var t66 = element.style;
                                        t66.cursor = cst$2;
                                        tr[1] = tr$0[1];
                                        return 0;
                                       }
                                       var i = find_box(boxes, x, y), _dr_ = 0 < i ? 1 : 0;
                                       if(_dr_){
                                        var _ds_ = caml_check_bound(nodes, i)[1 + i][2];
                                        if(typeof _ds_ !== "number" && 3654627 === _ds_[1]){
                                         var match = _ds_[2], name = match[2], img = match[1];
                                         show_image(all_messages, image_info, name, img);
                                         return 0;
                                        }
                                        var _dt_ = 0;
                                       }
                                       else
                                        var _dt_ = _dr_;
                                       return _dt_;
                                      };
                                   iter$2(t56.changedTouches.item(i), _do_);
                                   var _dp_ = i + 1 | 0;
                                   if(_dn_ === i) break;
                                   var i = _dp_;
                                  }
                                 }
                                 return true$0;
                                }),
                              true$0);
                           c3[1] =
                            addEventListener
                             (document,
                              touchend,
                              handler
                               (function(t67){
                                 var
                                  t68 = t67.changedTouches,
                                  _di_ = t68.length - 1 | 0,
                                  _dh_ = 0;
                                 if(_di_ >= 0){
                                  var i = _dh_;
                                  for(;;){
                                   var
                                    _dj_ =
                                      function(touch){
                                       var _dl_ = touch.identifier === id ? 1 : 0;
                                       if(! _dl_) return _dl_;
                                       touch.clientX;
                                       touch.clientY;
                                       removeEventListener(c1);
                                       iter$1(c2[1], removeEventListener);
                                       iter$1(c3[1], removeEventListener);
                                       if(started[1]){var t77 = element.style; t77.cursor = cst$2;}
                                       tr[1] = tr$0[1];
                                       return 0;
                                      };
                                   iter$2(t67.changedTouches.item(i), _dj_);
                                   var _dk_ = i + 1 | 0;
                                   if(_di_ === i) break;
                                   var i = _dk_;
                                  }
                                 }
                                 return false$0;
                                }),
                              true$0);
                           return 0;
                          }
                          iter$2(t39.changedTouches.item(0), _dg_);
                          return false$0;
                         }),
                       true$0);
                     function handle_key_event(t716){
                      var switcher = t716.keyCode - 37 | 0;
                      if(3 < switcher >>> 0) return true$0;
                      switch(switcher){
                        case 0:
                         var
                          p = tr[1][1],
                          z0$3 = transl(neg(p))(z0),
                          p$0 = compute_translation(z0$3, z1);
                         tr$0[1] = [0, p$0, one];
                         tr[1] = tr$0[1];
                         schedule_redraw(0);
                         return false$0;
                        case 1:
                         var
                          p$1 = tr[1][1],
                          z0$4 = transl(neg(p$1))(z0$0),
                          p$2 = compute_translation(z0$4, z1$0);
                         tr$0[1] = [0, p$2, one];
                         tr[1] = tr$0[1];
                         schedule_redraw(0);
                         return false$0;
                        case 2:
                         var
                          p$3 = tr[1][1],
                          z0$5 = transl(neg(p$3))(z0$1),
                          p$4 = compute_translation(z0$5, z1$1);
                         tr$0[1] = [0, p$4, one];
                         tr[1] = tr$0[1];
                         schedule_redraw(0);
                         return false$0;
                        default:
                         var
                          p$5 = tr[1][1],
                          z0$6 = transl(neg(p$5))(z0$2),
                          p$6 = compute_translation(z0$6, z1$2);
                         tr$0[1] = [0, p$6, one];
                         tr[1] = tr$0[1];
                         schedule_redraw(0);
                         return false$0;
                      }
                     }
                     addEventListener
                      (document, keydown, handler(handle_key_event), true$0);
                     var prev_buttons = [0, 0];
                     function make_buttons(param){
                      var match = prev_buttons[1];
                      if(match){
                       var buttons = match[1];
                       removeChild(document.body, buttons);
                      }
                      var buttons$0 = createDiv(document), t720 = buttons$0.style;
                      t720.position = cst_absolute;
                      var t723 = buttons$0.style;
                      t723.right = cst_0;
                      var t726 = buttons$0.style;
                      t726.bottom = cst_0;
                      var
                       messages = local_messages(all_messages),
                       info = img_button(0, 38, _c1_),
                       t729 = info.style;
                      t729.position = cst_absolute;
                      var t732 = info.style;
                      t732.bottom = cst_2px;
                      var t735 = info.style;
                      t735.right = cst_0;
                      var t738 = info.style;
                      t738.cursor = cst_pointer;
                      var
                       t739 =
                         handler
                          (function(param){
                            try{var _dd_ = assq(language[1], tree_i18n)[2], info = _dd_;
                            }
                            catch(_de_){
                             var _c$_ = caml_wrap_exception(_de_);
                             if(_c$_ !== Not_found)
                              throw caml_maybe_attach_backtrace(_c$_, 0);
                             try{var _dc_ = assq(cst_en, tree_i18n)[2], _db_ = _dc_;}
                             catch(_df_){
                              var _da_ = caml_wrap_exception(_df_);
                              if(_da_ !== Not_found)
                               throw caml_maybe_attach_backtrace(_da_, 0);
                              var _db_ = information_en;
                             }
                             var info = _db_;
                            }
                            var t595 = createDiv(document);
                            t595.className = cst_text;
                            var t598 = t595.style;
                            t598.width = cst_80;
                            var t601 = t595.style;
                            t601.margin = cst_auto;
                            t595.innerHTML = info;
                            var cell = createDiv(document), t606 = cell.style;
                            t606.display = cst_table_cell;
                            var t609 = cell.style;
                            t609.verticalAlign = cst_middle;
                            appendChild(cell, t595);
                            var table = createDiv(document), t612 = table.style;
                            t612.width = cst_100;
                            var t615 = table.style;
                            t615.height = cst_100;
                            var t618 = table.style;
                            t618.display = cst_table;
                            appendChild(table, cell);
                            var overlay = createDiv(document);
                            overlay.className = "overlay translucent";
                            appendChild(overlay, table);
                            var c = [0, no_handler];
                            function close_info(param){
                             removeChild(document.body, overlay);
                             return iter$1(c[1], removeEventListener);
                            }
                            c[1] =
                             addEventListener
                              (document,
                               keydown,
                               handler
                                (function(t622){
                                  var match = t622.keyCode;
                                  if(13 !== match && 27 !== match) return true$0;
                                  close_info(0);
                                  return false$0;
                                 }),
                               true$0);
                            var button = createElement(document, elt);
                            appendChild
                             (button,
                              document.createTextNode(opt_style(messages.ok, "OK")));
                            var
                             t626 =
                               handler(function(param){close_info(0); return false$0;});
                            button.onclick = t626;
                            var
                             button_div = createDiv(document),
                             t630 = button_div.style;
                            t630.textAlign = cst_center;
                            var t633 = button_div.style;
                            t633.margin = "2em auto";
                            appendChild(button_div, button);
                            appendChild(t595, button_div);
                            appendChild(document.body, overlay);
                            return false$0;
                           });
                      info.onclick = t739;
                      var
                       t742 = tooltip(opt_style(messages.info, "Information")),
                       t744 = t742.style;
                      t744.right = cst_36px;
                      var t747 = t742.style;
                      t747.bottom = cst_36px;
                      appendChild(info, t742);
                      appendChild(buttons$0, info);
                      var lang = img_button(0, 38, _c2_), t750 = lang.style;
                      t750.position = cst_absolute;
                      var t753 = lang.style;
                      t753.bottom = cst_2px;
                      var t756 = lang.style;
                      t756.right = cst_48px;
                      var t759 = lang.style;
                      t759.cursor = cst_pointer;
                      var
                       t770 = createDiv(document),
                       dl = createDl(document),
                       ul = createUl(document);
                      iter
                       (function(param){
                         var
                          id = param[2],
                          name = param[1],
                          t763 = createA(document);
                         appendChild
                          (t763,
                           document.createTextNode(caml_jsstring_of_string(name)));
                         t763.href = "#";
                         var
                          t764 =
                            handler
                             (function(param){
                               var lang = caml_jsstring_of_string(id);
                               function _c__(st){return st.setItem(cst_hyp_lang, lang);}
                               iter$2(global.localStorage, _c__);
                               language[1] = lang;
                               make_buttons(0);
                               compute_text_nodes(tree_i18n, nodes);
                               schedule_redraw(0);
                               return false$0;
                              });
                         t763.onclick = t764;
                         var li = createLi(document);
                         appendChild(li, t763);
                         return appendChild(ul, li);
                        },
                        languages);
                      var dd = createDd(document);
                      appendChild
                       (dd,
                        document.createTextNode
                         (opt_style(messages.languages, "Languages")));
                      appendChild(dl, dd);
                      var dt = createDt(document);
                      appendChild(dt, ul);
                      appendChild(dl, dt);
                      appendChild(t770, dl);
                      t770.className = cst_text_on;
                      var t773 = t770.style;
                      t773.position = cst_absolute;
                      var t776 = t770.style;
                      t776.right = cst_0px;
                      var t779 = t770.style;
                      t779.bottom = "46px";
                      var t782 = t770.style;
                      t782.whiteSpace = cst_nowrap;
                      appendChild(lang, t770);
                      show_on_click(lang, t770);
                      appendChild(buttons$0, lang);
                      var
                       recenter = img_button(0, 38, _c3_),
                       t785 = recenter.style;
                      t785.position = cst_absolute;
                      var t788 = recenter.style;
                      t788.bottom = cst_2px;
                      var t791 = recenter.style;
                      t791.right = "96px";
                      var t794 = recenter.style;
                      t794.cursor = cst_pointer;
                      var
                       t795 =
                         handler
                          (function(param){
                            tr$0[1] = [0, zero, one];
                            tr[1] = tr$0[1];
                            schedule_redraw(0);
                            return false$0;
                           });
                      recenter.onclick = t795;
                      var
                       t798 = tooltip(opt_style(messages.recenter, "Recenter")),
                       t800 = t798.style;
                      t800.right = cst_36px;
                      var t803 = t798.style;
                      t803.bottom = cst_36px;
                      appendChild(recenter, t798);
                      appendChild(buttons$0, recenter);
                      appendChild(document.body, buttons$0);
                      prev_buttons[1] = [0, buttons$0];
                      return 0;
                     }
                     make_buttons(0);
                     var t806 = createImg(document), t805 = icon(_c4_);
                     t806.src = t805;
                     var t808 = createA(document);
                     t808.target = cst_blank;
                     t808.href = "http://ocsigen.org/";
                     appendChild(t808, t806);
                     var logo = createDiv(document), t813 = logo.style;
                     t813.position = cst_absolute;
                     var t816 = logo.style;
                     t816.left = cst_0;
                     var t819 = logo.style;
                     t819.bottom = cst_0;
                     appendChild(logo, t808);
                     appendChild(document.body, logo);
                     return return$0(0);
                    });
          }),
      match = underlying(p)[1];
     switch(match[0]){
       case 1:
        var exn = match[1]; throw caml_maybe_attach_backtrace(exn, 0);
       case 2:
        var
         p_callbacks = match[1],
         callback =
           function(result){
            if(1 !== result[0]) return 0;
            var exn = result[1];
            return caml_call1(async_exception_hook[1], exn);
           };
        add_implicitly_removed_callbac(p_callbacks, callback);
        break;
     }
     return false$0;
    }
    catch(_c9_){
     var _c8_ = caml_wrap_exception(_c9_);
     if(_c8_ !== Canvas_not_available)
      throw caml_maybe_attach_backtrace(_c8_, 0);
     var t636 = createDiv(document);
     t636.className = cst_text;
     var t639 = t636.style;
     t639.width = cst_80;
     var t642 = t636.style;
     t642.margin = cst_auto;
     t636.innerHTML =
      'Unfortunately, this browser is not supported. Please try again with another browser, such as <a href="http://www.mozilla.org/firefox/">Firefox<\/a>, <a href="http://www.google.com/chrome/">Chrome<\/a> or <a href="http://www.opera.com/">Opera<\/a>.';
     var cell = createDiv(document), t647 = cell.style;
     t647.display = cst_table_cell;
     var t650 = cell.style;
     t650.verticalAlign = cst_middle;
     appendChild(cell, t636);
     var table = createDiv(document), t653 = table.style;
     t653.width = cst_100;
     var t656 = table.style;
     t656.height = cst_100;
     var t659 = table.style;
     t659.display = cst_table;
     appendChild(table, cell);
     var overlay = createDiv(document);
     overlay.className = cst_overlay;
     appendChild(overlay, table);
     appendChild(document.body, overlay);
     return false$0;
    }
   }
   var t822 = handler(start);
   global.onload = t822;
   do_at_exit(0);
   return;
  }
  (globalThis));

//# sourceMappingURL=hypertree.map
